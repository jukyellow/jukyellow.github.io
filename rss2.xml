<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>옐란 기술 블로그</title>
    <link>https://jukyellow.github.io/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/cdf18cd03aab32c27ceca73be4250201</url>
      <title>옐란 기술 블로그</title>
      <link>https://jukyellow.github.io/</link>
    </image>
    
    <atom:link href="https://jukyellow.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>yelan&#39;s tech blog</description>
    <pubDate>Fri, 09 Apr 2021 22:33:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>도커 기본 명령어</title>
      <link>https://jukyellow.github.io/2021/04/10/docker-command2/</link>
      <guid>https://jukyellow.github.io/2021/04/10/docker-command2/</guid>
      <pubDate>Fri, 09 Apr 2021 22:33:17 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;개요: 도커를 사용하여 API 서버/서비스를 개발(ubuntu)하는 과정에서 사용했던 도커 기본 명령어를 정래해 본다.  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jukyellow.github.io/2021/02/23/docke</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>개요: 도커를 사용하여 API 서버/서비스를 개발(ubuntu)하는 과정에서 사용했던 도커 기본 명령어를 정래해 본다.  </li><li><a href="https://jukyellow.github.io/2021/02/23/docker-install-root-dir-modify/">기본 설치(centos)는 이전 블로그 참고</a>  </li></ul><h1 id="도커란"><a href="#도커란" class="headerlink" title="도커란?"></a>도커란?</h1><blockquote><p>가상화 기술(하나의 HW를 SW적으로 분할하여 마치 여러개의 독립된 HW에서 동작시키는것과 같이 리소스를 공유하는 기술)의 하나로,<br>컨테이너 단위로 구동되고, 컨터이너(SW적으로 분리된 독립된 공간) 안에 OS에서부터 application Layer까지 stack 형식으로 쌓아 올림으로써,<br>필요한 구성요소를 손쉽게 다운로드/실행하는 방식으로 동작시키는 기술이다.  </p></blockquote><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A. 도커 기본 명령어</span><br><span class="line"><span class="bullet">1.</span> 버전 확인</span><br><span class="line"><span class="bullet">2.</span> 이미지 확인</span><br><span class="line"><span class="bullet">3.</span> 컨테이너 목록 확인</span><br><span class="line"><span class="bullet">4.</span> 컨테이너 구동</span><br><span class="line"><span class="bullet">5.</span> 컨테이너 IP 확인</span><br><span class="line"><span class="bullet">6.</span> 컨테이너 종료</span><br><span class="line"><span class="bullet">7.</span> 컨테이너/이미지 삭제</span><br><span class="line"><span class="bullet">8.</span> 컨테이너 내부 접속</span><br><span class="line"><span class="bullet">9.</span> 컨테이너/Host간 파일 복사</span><br><span class="line"><span class="bullet">10.</span> 도커 이미지 빌드 </span><br><span class="line"><span class="bullet">11.</span> 도커 run 명령어 옵션</span><br><span class="line"></span><br><span class="line">B. Dockerfile</span><br><span class="line"></span><br><span class="line">C. Docker 실행(쉘로 관리)</span><br></pre></td></tr></table></figure><h1 id="도커-기본-명령어"><a href="#도커-기본-명령어" class="headerlink" title="도커 기본 명령어"></a>도커 기본 명령어</h1><h2 id="버전확인"><a href="#버전확인" class="headerlink" title="버전확인"></a>버전확인</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker -v</span></span><br></pre></td></tr></table></figure><h2 id="도커-이미지-목록"><a href="#도커-이미지-목록" class="headerlink" title="도커 이미지 목록"></a>도커 이미지 목록</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><h2 id="도커-컨테이너-목록"><a href="#도커-컨테이너-목록" class="headerlink" title="도커 컨테이너 목록"></a>도커 컨테이너 목록</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps -a</span></span><br></pre></td></tr></table></figure><h2 id="컨테이너-구동"><a href="#컨테이너-구동" class="headerlink" title="컨테이너 구동"></a>컨테이너 구동</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run --rm --publish <span class="number">8001</span>:<span class="number">80</span> -it nginx</span><br></pre></td></tr></table></figure><h2 id="컨테이너-ip-port-확인"><a href="#컨테이너-ip-port-확인" class="headerlink" title="컨테이너 ip/port 확인"></a>컨테이너 ip/port 확인</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> exec CONTAINER_ID <span class="built_in">ip</span> <span class="keyword">addr</span> show eth0</span><br><span class="line"><span class="symbol">docker</span> port 도커ID</span><br></pre></td></tr></table></figure><h2 id="컨테이너-종료"><a href="#컨테이너-종료" class="headerlink" title="컨테이너 종료"></a>컨테이너 종료</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> stop 컨테이너ID(<span class="number">5555</span>b<span class="number">7</span>dd<span class="number">1385</span>)</span><br></pre></td></tr></table></figure><h2 id="도커-컨테이너-모두-삭제-이미지-삭제"><a href="#도커-컨테이너-모두-삭제-이미지-삭제" class="headerlink" title="도커 컨테이너 모두 삭제, 이미지 삭제"></a>도커 컨테이너 모두 삭제, 이미지 삭제</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 컨테이너 하나 삭제</span><br><span class="line">docker rm 컨테이너ID</span><br><span class="line">- 권한 없어서 전체삭제는 안됨?</span><br><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> -<span class="params">q</span>)</span></span><br><span class="line">- 이미지 삭제</span><br><span class="line">docker rmi <span class="literal">[이미지명]</span></span><br><span class="line">- dangling image remove</span><br><span class="line"><span class="number">1</span>) docker rmi -f <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">f</span> <span class="string">&quot;dangling=true&quot;</span> -<span class="params">q</span>)</span></span><br><span class="line"><span class="number">2</span>) docker image prune</span><br><span class="line">(docker api <span class="number">1.25</span>이상 지원, -a를 붙이면 전체삭제함으로주의!(-a없이 사용하자))</span><br></pre></td></tr></table></figure><h2 id="컨테이너-내부접속"><a href="#컨테이너-내부접속" class="headerlink" title="컨테이너 내부접속"></a>컨테이너 내부접속</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> exec -it  <span class="number">98</span>a<span class="number">6916</span>d<span class="number">8759</span> /bin/bash</span><br></pre></td></tr></table></figure><h2 id="컨테이너-Host-파일복사"><a href="#컨테이너-Host-파일복사" class="headerlink" title="컨테이너/Host 파일복사"></a>컨테이너/Host 파일복사</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>) 호스트-&gt;컨테이너 : docker cp<span class="meta"> [host 파일경로] [container name]:[container 내부 경로]</span></span><br><span class="line"><span class="attribute">docker</span> cp testWebApp.war <span class="number">9492</span>a<span class="number">62</span>f<span class="number">43</span>d<span class="number">4</span>:/usr/local/tomcat/webapps</span><br><span class="line"><span class="attribute">2</span>) 컨테이너-&gt;호스트 : docker cp<span class="meta"> [container name]:[container 내부 경로] [host 파일경로]</span></span><br><span class="line"><span class="attribute">docker</span> cp <span class="number">445</span>a<span class="number">0</span>ba<span class="number">19</span>eea:/usr/local/tomcat/conf/server.xml c:/<span class="number">101</span>_dimg</span><br></pre></td></tr></table></figure><h2 id="도커-이미지-빌드"><a href="#도커-이미지-빌드" class="headerlink" title="도커 이미지 빌드"></a>도커 이미지 빌드</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- docker build -t [이미지명]  .</span><br><span class="line">docker build -t nginx .</span><br></pre></td></tr></table></figure><h2 id="도커-이미지-다운로드-구동"><a href="#도커-이미지-다운로드-구동" class="headerlink" title="도커 이미지 다운로드/구동"></a>도커 이미지 다운로드/구동</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull tomcat:<span class="number">8</span></span><br><span class="line"><span class="attribute">docker</span> run -d -i -t -p <span class="number">8081</span>:<span class="number">8080</span> tomcat:<span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="도커-컨테이너-접속-stdout"><a href="#도커-컨테이너-접속-stdout" class="headerlink" title="도커 컨테이너 접속(stdout?)"></a>도커 컨테이너 접속(stdout?)</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">attach</span> 도커ID</span><br></pre></td></tr></table></figure><h2 id="컨테이너-로그-tail"><a href="#컨테이너-로그-tail" class="headerlink" title="컨테이너 로그 tail"></a>컨테이너 로그 tail</h2><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">log</span> <span class="built_in">tail</span> </span><br><span class="line">docker logs -f 컨테이너ID</span><br><span class="line">- 옵션: --<span class="built_in">tail</span>=<span class="number">5</span> (최근<span class="number">5</span>줄만 보기?)</span><br><span class="line">- <span class="built_in">log</span> <span class="built_in">tail</span> 종료: Ctrl+p -&gt; Ctrl+q 연속으로 입력(바로 종료하면 컨테이너 죽음 주의!)</span><br></pre></td></tr></table></figure><h2 id="컨테이너-실행-페라미터-전달"><a href="#컨테이너-실행-페라미터-전달" class="headerlink" title="컨테이너 실행 페라미터 전달"></a>컨테이너 실행 페라미터 전달</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -e <span class="string">&quot;SPRING_PROFILES_ACTIVE=dev&quot;</span> -p <span class="number">8080</span>:<span class="number">8080</span> -t springio/gs-spring-boot-docker</span><br></pre></td></tr></table></figure><h2 id="도커-run-명령어-주요-옵션"><a href="#도커-run-명령어-주요-옵션" class="headerlink" title="도커 run 명령어 주요 옵션"></a>도커 run 명령어 주요 옵션</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">14)도커 <span class="builtin-name">run</span> 명령어 상세</span><br><span class="line">docker <span class="builtin-name">run</span> -d -i -t -p 9001:9001 nginx_microsvc:latest</span><br><span class="line">docker <span class="builtin-name">run</span> &lt;옵션&gt; &lt;이미지 이름, ID&gt; &lt;명령&gt; &lt;매개 변수&gt;</span><br><span class="line">-d: <span class="attribute">--detach</span>=<span class="literal">false</span>: Detached 모드입니다. 보통 데몬 모드라고 부르며 컨테이너가 백그라운드로 실행됩니다.</span><br><span class="line">-i: <span class="attribute">--interactive</span>=<span class="literal">false</span>: 표준 입력(stdin)을 활성화하며 컨테이너와 연결(attach)되어 있지 않더라도 표준 입력을 유지합니다.</span><br><span class="line">   보통 이 옵션을 사용하여 Bash에 명령을 입력합니다</span><br><span class="line">-t: <span class="attribute">--tty</span>=<span class="literal">false</span>: TTY 모드(pseudo-TTY)를 사용합니다. Bash를 사용하려면 이 옵션을 설정해야 합니다.</span><br><span class="line">   이 옵션을 설정하지 않으면 명령을 입력할 수는 있지만 셸이 표시되지 않습니다.</span><br><span class="line">-p: --publish=[]: 호스트에 연결된 컨테이너의 특정 포트를 외부에 노출합니다.</span><br><span class="line">   보통 웹 서버의 포트를 노출할 때 주로 사용합니다.</span><br></pre></td></tr></table></figure><hr><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="dockerfile-CMD-명령어"><a href="#dockerfile-CMD-명령어" class="headerlink" title="dockerfile CMD 명령어"></a>dockerfile CMD 명령어</h2><ul><li>CMD [“nginx”, “-g”, “daemon off;”]</li><li>CMD [“&lt;실행 파일&gt;”, “&lt;매개 변수1&gt;”, “&lt;매개 변수2&gt;”]</li><li>셸 없이 바로 실행할 때 매개 변수 설정하기<br>: daemon off : nginx.conf에 daemon off;로 설정했으므로 Nginx 웹 서버를 foreground로 실행합니다.  </li></ul><h2 id="도커-파일-예제"><a href="#도커-파일-예제" class="headerlink" title="도커 파일 예제"></a>도커 파일 예제</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> msap-zuul-server-0.1.0.war app.war</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.war&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="dockerfile-이미지-빌드"><a href="#dockerfile-이미지-빌드" class="headerlink" title="dockerfile 이미지 빌드"></a>dockerfile 이미지 빌드</h2><p>docker build -t msap-config-server .</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)<span class="built_in"> bridge </span>모드</span><br><span class="line">docker <span class="builtin-name">run</span> --publish 9000:9000 -it msap-config-server (bridge 모드: 네트웍 격리)</span><br><span class="line">2) host 모드</span><br><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--net</span>=host --publish 9000:9000 -it msap-config-server (host 모드: host와 IP공유)</span><br></pre></td></tr></table></figure><hr><h1 id="도커-실행-쉘로-관리법"><a href="#도커-실행-쉘로-관리법" class="headerlink" title="도커 실행 쉘로 관리법"></a>도커 실행 쉘로 관리법</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 해당 컨테이너 종료</span><br><span class="line">docker stop <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> --<span class="params">filter</span> &#x27;<span class="params">name</span>=<span class="params">facenet</span>-<span class="params">server</span>&#x27; -<span class="params">q</span>)</span></span><br><span class="line"><span class="number">2</span>) 이미지 삭제</span><br><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> --<span class="params">filter</span> &#x27;<span class="params">name</span>=<span class="params">facenet</span>-<span class="params">server</span>&#x27; -<span class="params">a</span> -<span class="params">q</span>)</span></span><br><span class="line">docker rmi -f <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">f</span> <span class="string">&quot;dangling=true&quot;</span> -<span class="params">q</span>)</span></span><br><span class="line"><span class="number">3</span>) 빌드</span><br><span class="line">docker build -t facenet-server .</span><br><span class="line"><span class="number">4</span>) 실행</span><br><span class="line">docker run --name ai-hsgd-verfiy-server \</span><br><span class="line">           --publish <span class="number">8312</span>:<span class="number">8312</span> \</span><br><span class="line">           --net=host \</span><br><span class="line">           -d \</span><br><span class="line">           -it \</span><br><span class="line">           -v ai-hsgd-verfiy-server-logs:/logs ai-hsgd-verfiy-server</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/msa/">MSA</category>
      
      <category domain="https://jukyellow.github.io/categories/msa/docker/">Docker</category>
      
      
      <category domain="https://jukyellow.github.io/tags/docker/">docker</category>
      
      <category domain="https://jukyellow.github.io/tags/docker-install/">docker install</category>
      
      <category domain="https://jukyellow.github.io/tags/root-dir/">Root Dir</category>
      
      <category domain="https://jukyellow.github.io/tags/centos/">Centos</category>
      
      <category domain="https://jukyellow.github.io/tags/msa/">MSA</category>
      
      
      <comments>https://jukyellow.github.io/2021/04/10/docker-command2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>리눅스/유닉스 명령어 모음2</title>
      <link>https://jukyellow.github.io/2021/04/02/linux-command2/</link>
      <guid>https://jukyellow.github.io/2021/04/02/linux-command2/</guid>
      <pubDate>Thu, 01 Apr 2021 20:42:22 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;개요 : 유닉스(솔라리스) OS에서 Java Application을 운영하면서 사용했던 명령어들을 두번째로 정리해본다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jukyellow.github.io/2021/03/05/linux-c</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>개요 : 유닉스(솔라리스) OS에서 Java Application을 운영하면서 사용했던 명령어들을 두번째로 정리해본다.</li><li><a href="https://jukyellow.github.io/2021/03/05/linux-command/">서비스 운영자로서 기본 유닉스 사용법 정리는 이전 블로그 참고</a></li></ul><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> nslookup</span><br><span class="line"><span class="bullet">2.</span> hostname</span><br><span class="line"><span class="bullet">3.</span> telnet/ping/tracert</span><br><span class="line"><span class="bullet">4.</span> 터미널 ssh 접속</span><br><span class="line"><span class="bullet">5.</span> Shell 특수문자와 2&gt;&amp;1의 의미</span><br><span class="line"><span class="bullet">6.</span> 파일 생성시간 기준으로 찾기/삭제하기</span><br><span class="line"><span class="bullet">7.</span> SWAP 메모리 추가</span><br><span class="line"><span class="bullet">8.</span> 웹서버 설정(Sun ONE)과 WAS Timeout설정</span><br></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><ul><li>DNS에 등록된 domain name을 ip addresss 반환  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nslookup</span> <span class="selector-tag">www</span><span class="selector-class">.google</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><ul><li>hostname 확인 방법  <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/hosts</span><br><span class="line"><span class="number">127.0.0.1</span>    localhost</span><br><span class="line"><span class="number">127.0.1.1</span>    storycompiler</span><br></pre></td></tr></table></figure></li><li>관련문제: Java 프로세스에서 UnKnownHostException 발생시, DNS에서 host이름으로 IP를 못찾는것!  </li><li>해결방법: 로컬 캐시(/etc/hosts에 정보 기입) 및 networking restart  </li><li>참고: <a href="https://storycompiler.tistory.com/118">https://storycompiler.tistory.com/118</a>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="regexp">/etc/i</span>nit.d/networking restart</span><br><span class="line">[ ok ] Restarting networking (via systemctl): networking.service.</span><br></pre></td></tr></table></figure></li></ul><h2 id="telnet-ping-tracert"><a href="#telnet-ping-tracert" class="headerlink" title="telnet/ping/tracert"></a>telnet/ping/tracert</h2><ul><li>telnet : 텔넷 접속 명령어</li><li>활용: 방화벽 오픈(Ip/port) 확인용으로 주로 사용, 방화벽이 열리지 않은 경우 접속 실패 발생  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">telnet</span> <span class="built_in">ip</span> port</span><br></pre></td></tr></table></figure></li><li>ping: target ip로 네트워크 상태 확인(패킷 전송 및 응답 수신)</li><li>활용 : 주로 상대방 서버의 live상태를 체크 및 방화벽 오픈 여부 목적으로 사용  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ping</span> <span class="built_in">ip</span> 옵션</span><br></pre></td></tr></table></figure></li><li>tracert (리눅스 traceroute): ip 라우팅 경로 추적  </li><li>활용 : 내부망/외부망이 분리된 경우, 인터넷망에서 접속 실패/다운로드 실패시에 라우팅 경로를 확인하여 문제를 찾아볼수 있다.  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tracert</span> <span class="built_in">ip</span></span><br></pre></td></tr></table></figure></li><li>기타(windows): 접속 사이트별 응답정보 확인용으로  <blockquote><p>fiddler 설치 및 확인 : <a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler</a>  </p></blockquote></li></ul><h2 id="터미널-SSH-접속"><a href="#터미널-SSH-접속" class="headerlink" title="터미널 SSH 접속"></a>터미널 SSH 접속</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -p <span class="number">15022</span> user@<span class="number">123.123.123.123</span></span><br></pre></td></tr></table></figure><h2 id="Shell-특수문자와-2-gt-amp-1의-의미"><a href="#Shell-특수문자와-2-gt-amp-1의-의미" class="headerlink" title="Shell 특수문자와 2&gt;&amp;1의 의미"></a>Shell 특수문자와 2&gt;&amp;1의 의미</h2><ul><li>$! : 최근 백그라운드 작업의 프로세스 번호  </li><li>활용: 프로세스 pid를 저장해두고 stop shell에서 kill pid로 죽일때 사용가능<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $! &gt; <span class="variable">$HOME</span><span class="regexp">/bin/</span>pid/stop_pid.sh</span><br></pre></td></tr></table></figure></li><li>2&gt;&amp;1 : 2(standard err)를 &amp;1(standard output과 같은 파일로) &gt;(redirect한다)<blockquote><p>설명: 표준에러를 표준출력 파일과 같은 stream(파일)로 write한다.</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Dtype=<span class="keyword">TEST</span> com.<span class="keyword">test</span>.java <span class="keyword">test</span>.cfg &gt; <span class="keyword">test</span>.out <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;  </span><br><span class="line"><span class="comment">#java프로세스를 실행하는데 test.out파일로 표준출력을 write함. </span></span><br><span class="line"><span class="comment">#그리고 표준에러도 표준출력과 같은 파일로 쓰고, java프로세스는 백그라운드(&amp;)로 실행 </span></span><br><span class="line"><span class="comment">#표준에러를 파일에 쓰도록 했기때문에, 화면(screen)에 Exception내용이 찍히지 않음  </span></span><br></pre></td></tr></table></figure></li></ul><h2 id="파일-생성시간-기준으로-찾기-삭제하기"><a href="#파일-생성시간-기준으로-찾기-삭제하기" class="headerlink" title="파일 생성시간 기준으로 찾기/삭제하기"></a>파일 생성시간 기준으로 찾기/삭제하기</h2><ul><li>참고: <a href="https://joont.tistory.com/129">https://joont.tistory.com/129</a></li><li>방법: find의 -newer 옵션(지정한 파일의 날짜보다 이후에 수정된 파일을 찾아주는 옵션) 활용<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) touch -t <span class="number">20160501</span> <span class="built_in">begin</span>  (우분투는 yyyyMMddhh24mi 까지 입력해야 됨?)</span><br><span class="line"><span class="number">2</span><span class="number">-1</span>) <span class="built_in">find</span> . -newer <span class="built_in">begin</span> -<span class="built_in">print</span></span><br><span class="line">&gt; <span class="built_in">begin</span> 파일보다 이후에 수정된 파일을 검색합니다. 즉, <span class="number">2016</span>년 <span class="number">5</span>월 <span class="number">1</span>일 이후의 파일을 검색하게 되는것이죠.</span><br><span class="line"><span class="number">2</span><span class="number">-2</span>) <span class="built_in">find</span> . ! -newer <span class="built_in">begin</span> -<span class="built_in">print</span></span><br><span class="line">&gt; <span class="built_in">find</span>의 부정연산자를 사용하면 <span class="number">2016</span>년 <span class="number">5</span>월 <span class="number">1</span>일 이전의 파일도 검색 가능합니다.</span><br><span class="line"><span class="number">2</span><span class="number">-3</span>) touch -t <span class="number">20160530</span> <span class="built_in">end</span>, <span class="built_in">find</span> . -newer <span class="built_in">begin</span> -a ! -newer <span class="built_in">end</span> -<span class="built_in">print</span></span><br><span class="line">&gt;<span class="number">2016</span>년 <span class="number">5</span>월 <span class="number">1</span>일부터 <span class="number">2016</span>년 <span class="number">5</span>월 <span class="number">30</span>일 사이에 수정된 파일을 검색하는 방법입니다.</span><br><span class="line"><span class="number">3</span>) <span class="built_in">find</span> . -newer <span class="built_in">begin</span> -a ! -newer <span class="built_in">end</span> | wc -l</span><br><span class="line">&gt; 개수 구하기</span><br><span class="line"><span class="number">4</span>) <span class="built_in">find</span> . -newer <span class="built_in">begin</span> -a ! -newer <span class="built_in">end</span> -exec rm -f &#123;&#125; \;</span><br><span class="line">&gt; 삭제하기 (*주의: 반드시 . 현재디렉토리 기준으로 찾기바람, /를 쓰면 최상위 경로가 됨)  </span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="SWAP-메모리-추가-1G-gt-3G할때"><a href="#SWAP-메모리-추가-1G-gt-3G할때" class="headerlink" title="SWAP 메모리 추가(1G-&gt;3G할때)"></a>SWAP 메모리 추가(1G-&gt;3G할때)</h2><ul><li><p>참고1: <a href="https://htst.tistory.com/32">https://htst.tistory.com/32</a></p></li><li><p>크게 두가지 방식 partition(디스크 할당) or SWAPFILE(swap용 big file추가) 처리가 있음</p></li><li><p>partition이 존재할때 swapfile을 추가하여 간단하게 스왑메모리를 추가할수 있음.</p></li><li><p>참고2: <a href="https://steps4great.tistory.com/7">https://steps4great.tistory.com/7</a> –swapfile 만들기</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo fallocate -l 2G <span class="string">/swapfile</span>  → swapfile 생성</span><br><span class="line">sudo chmod 600 <span class="string">/swapfile</span> → root 사용자만 사용할 수 있도록 권한 변경</span><br><span class="line">sudo mkswap <span class="string">/swapfile</span>  → 스왑메모리로 변경</span><br><span class="line">sudo swapon <span class="string">/swapfile</span>  → 스왑메모리 활성화</span><br></pre></td></tr></table></figure></li><li><p>재부팅시 swap메모리 남아있게 설정</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>fstab</span><br><span class="line">입력내용 → /swapfile swap swap <span class="keyword">default</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>스왑메모리 제거</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="string">/etc/fstab</span> → 자동마운트 내용 제거 및 주석처리</span><br><span class="line">sudo swapoff -v <span class="string">/swapfile</span></span><br><span class="line">sudo swapoff on <span class="string">/swapfile</span></span><br><span class="line">sudo rm -r <span class="string">/swapfile</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="웹서버-설정과-WAS-Timeout설정"><a href="#웹서버-설정과-WAS-Timeout설정" class="headerlink" title="웹서버 설정과 WAS Timeout설정"></a>웹서버 설정과 WAS Timeout설정</h2><h3 id="웹서버-Sun-ONE-설정파일"><a href="#웹서버-Sun-ONE-설정파일" class="headerlink" title="웹서버(Sun ONE) 설정파일"></a>웹서버(Sun ONE) 설정파일</h3><ol><li>/opt/sunone61/https-xxx/config/object.conf : URI 패턴을 등록하고 해당하는 요청일때 필터링 기능 동작</li><li>/opt/sunone61/https-xxx/config/server.xml : 웹서버 포트등 설정<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">Object</span> <span class="type">name</span>=&quot;weblogic_do&quot; ppath=&quot;*.do&quot;&gt;</span><br><span class="line"> Service fn=&quot;wl_proxy&quot; WebLogicCluster=&quot;xxx.xxx.xxx.xxx:9820,xxx.xxx.xxx.xxx:9820&quot; DynamicServerList=&quot;OFF&quot; Idempotent=&quot;ON&quot; WLIOTimeoutSecs=&quot;3600&quot; KeepAliveEnabled=&quot;false&quot; CookieName=&quot;NLPS_ADMIN_JSESSIONID&quot;</span><br><span class="line">&lt;/<span class="keyword">Object</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="설정파일-object-conf-옵션-설명"><a href="#설정파일-object-conf-옵션-설명" class="headerlink" title="설정파일(object.conf) 옵션 설명"></a>설정파일(object.conf) 옵션 설명</h3><ol><li>WLIOTimeoutSecs (HungServerRecoverSecs) : WLS로 request를 보내고 response를 받기 위해 대기하는 시간, default 300초  </li><li>KeepAliveEnabled : Plug-in과 WLS의 연결을 지속할 것인지 여부를 결정  <blockquote><p>client request를 처리한 후 WLS와의 연결을 닫아버릴 것인지 연결된 상태로 두었다가 다음 요청이 들어왔을 때 재사용할 것인지 설정<br>Default =&gt; true(Netscape and Microsoft IIS) &amp; ON (Apache)  </p></blockquote></li><li>Idempotent (ON/OFF) :<blockquote><p>WebLogic서버로 부터 request전송시 에러가 발생하거나, 서버로부터 결과를 기다리는 중에 위에 정의된 WLIOTimeoutSecs 시간 초과되어서 에러 발생시 요청을 다시 보낼 것인가를 지정<br>서버와 연결은 되었는데 그 이후에 에러가 발생 하였을 경우 해당 옵션이 ON이면 다시 연결을 시도하고, 요청을 보내게 되므로 중복 요청의 가능성이 있다. OFF권장  </p></blockquote></li></ol><h3 id="WAS-Timeout-설정"><a href="#WAS-Timeout-설정" class="headerlink" title="WAS Timeout 설정"></a>WAS Timeout 설정</h3><ul><li>세션 Timeout 설정:  </li></ul><ol><li>웹로직 콘솔: 배치-&gt;프로젝트명-&gt;구성 &gt; “세션시간초과” 항목  </li><li>서버 xml파일  </li></ol><ul><li>web.xml : /WEB-INF 하위, web.xml의 경우에 단위는 분이다.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>weblogic.xml : 단위는 초이다.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-descriptor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>TimeoutSecs<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-descriptor</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/linux/">Linux</category>
      
      
      <category domain="https://jukyellow.github.io/tags/nslookup/">nslookup</category>
      
      <category domain="https://jukyellow.github.io/tags/telnet/">telnet</category>
      
      <category domain="https://jukyellow.github.io/tags/hostname/">hostname</category>
      
      <category domain="https://jukyellow.github.io/tags/tracert/">tracert</category>
      
      <category domain="https://jukyellow.github.io/tags/ssh%EC%A0%91%EC%86%8D/">ssh접속</category>
      
      <category domain="https://jukyellow.github.io/tags/%ED%8C%8C%EC%9D%BC%EC%83%9D%EC%84%B1%EC%8B%9C%EA%B0%84-%EC%82%AD%EC%A0%9C/">파일생성시간 삭제</category>
      
      <category domain="https://jukyellow.github.io/tags/2-1/">2&gt;&amp;1</category>
      
      <category domain="https://jukyellow.github.io/tags/%EC%9B%B9%EC%84%9C%EB%B2%84%EC%84%A4%EC%A0%95/">웹서버설정</category>
      
      
      <comments>https://jukyellow.github.io/2021/04/02/linux-command2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>주식 기술지표 산출법 정리</title>
      <link>https://jukyellow.github.io/2021/04/02/stock-tech-indicator/</link>
      <guid>https://jukyellow.github.io/2021/04/02/stock-tech-indicator/</guid>
      <pubDate>Thu, 01 Apr 2021 20:32:40 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;주식 투자관련 기술지표 정의/산출법(계산식)들을 정리해 본다.  &lt;/li&gt;
&lt;li&gt;참고도서: 퀀트 전략을 위한 인공지능 트레이닝  &lt;/li&gt;
&lt;li&gt;진척률(2021.04.02): 1%&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;목차&quot;&gt;&lt;a hr</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>주식 투자관련 기술지표 정의/산출법(계산식)들을 정리해 본다.  </li><li>참고도서: 퀀트 전략을 위한 인공지능 트레이닝  </li><li>진척률(2021.04.02): 1%</li></ul><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.RA(이동평균션) : <span class="type">Standard</span> deviation rolling average</span><br><span class="line"><span class="number">2</span>.MACD : <span class="type">Moving</span> Average Convergence/Divergence</span><br><span class="line"><span class="number">3</span>.CCI : <span class="type">Commodity</span> Channel Index # Momentum(모멘텀) Indicators</span><br><span class="line"><span class="number">4</span>.ATR(변동성) : <span class="type">Average</span> <span class="literal">True</span> <span class="keyword">Range</span></span><br><span class="line"><span class="number">5</span>.BOLL(볼린저 밴드) : <span class="type">Bollinger</span> Band</span><br><span class="line"><span class="number">7</span>.MTM1 </span><br><span class="line"><span class="number">7</span>.MTM3</span><br><span class="line"><span class="number">8</span>.ROC : <span class="type">Rate</span> <span class="keyword">of</span> change : ((<span class="type">price</span>/prevPrice)-<span class="number">1</span>)*<span class="number">100</span></span><br><span class="line"><span class="number">9</span>.WPR : <span class="type">william</span> percent <span class="keyword">range</span> (Williams&#x27; %R)</span><br></pre></td></tr></table></figure><h2 id="이동평균선"><a href="#이동평균선" class="headerlink" title="이동평균선"></a>이동평균선</h2>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/finance/">Finance</category>
      
      
      <category domain="https://jukyellow.github.io/tags/stock/">Stock</category>
      
      <category domain="https://jukyellow.github.io/tags/indicatior/">Indicatior</category>
      
      <category domain="https://jukyellow.github.io/tags/%EB%B3%BC%EB%A6%B0%EC%A0%80%EB%B0%B4%EB%93%9C/">볼린저밴드</category>
      
      <category domain="https://jukyellow.github.io/tags/%EC%9D%B4%EB%8F%99%ED%8F%89%EA%B7%A0%EC%84%A0/">이동평균선</category>
      
      <category domain="https://jukyellow.github.io/tags/%EB%AA%A8%EB%A9%98%ED%85%80/">모멘텀</category>
      
      <category domain="https://jukyellow.github.io/tags/%EB%B3%80%EB%8F%99%EC%84%B1/">변동성</category>
      
      
      <comments>https://jukyellow.github.io/2021/04/02/stock-tech-indicator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AI 이론 정리노트</title>
      <link>https://jukyellow.github.io/2021/04/02/ai-theory-note/</link>
      <guid>https://jukyellow.github.io/2021/04/02/ai-theory-note/</guid>
      <pubDate>Thu, 01 Apr 2021 20:32:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;딥러닝/머신러닝 이론를 작성해보자!&lt;/li&gt;
&lt;li&gt;진척률(2021.04.02): 1%&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>딥러닝/머신러닝 이론를 작성해보자!</li><li>진척률(2021.04.02): 1%</li></ul><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">A. 개론</span><br><span class="line"><span class="bullet"> 1.</span> 신경망의 역사</span><br><span class="line"><span class="bullet"> 2.</span> 머신러닝과 딥러닝의 차이</span><br><span class="line"><span class="bullet"> 3.</span> 신경망 구조</span><br><span class="line"><span class="bullet"> 4.</span> 오류 역전파 알고리즘</span><br><span class="line"><span class="bullet"> 5.</span> 활성화 함수</span><br><span class="line"><span class="bullet"> 6.</span> 성능측정 및 평가</span><br><span class="line">B. NLP</span><br><span class="line"><span class="bullet"> 7.</span> 자연어 처리 개요</span><br><span class="line"><span class="bullet"> 8.</span> 자연어 전처리 및 성능측정/평가</span><br><span class="line"><span class="bullet"> 9.</span> Word2Vec, FastText, 통계적?...</span><br><span class="line"><span class="bullet"> 10.</span> RNN/LSTM, Seq2Seq</span><br><span class="line"><span class="bullet"> 11.</span> Attention 모델</span><br><span class="line"><span class="bullet"> 12.</span> Transformer 모델(Bert)</span><br><span class="line"><span class="bullet"> 13.</span> GPT-3 모델</span><br><span class="line">C. 머신러닝 모델</span><br><span class="line"><span class="bullet"> 14.</span> SVC</span><br><span class="line"><span class="bullet"> 15.</span> 배깅과 부스팅</span><br><span class="line"><span class="bullet"> 16.</span> 랜덤포레스트</span><br><span class="line"><span class="bullet"> 17.</span> XgBoost, AdaBoost 등</span><br><span class="line"><span class="bullet"> 18.</span> 앙상블</span><br><span class="line"><span class="bullet"> 19.</span> 성능측정, 평가</span><br><span class="line">D. 이미지 모델</span><br><span class="line"><span class="bullet"> 20.</span> CNN 개요</span><br><span class="line"><span class="bullet"> 21.</span> CNN 다양한 버전들</span><br><span class="line"><span class="bullet"> 22.</span> 안면인식</span><br><span class="line"><span class="bullet"> 23.</span> OCR</span><br><span class="line">E. 통계모델</span><br><span class="line"><span class="bullet"> 24.</span> 통계모델 개요</span><br><span class="line"><span class="bullet"> 25.</span> AR/ARIMA 모형</span><br><span class="line">F. AI와 수학/통계학</span><br><span class="line"><span class="bullet"> 26.</span> 기술통계(평균,분산,표준편차,표준정규분포등)</span><br><span class="line"><span class="bullet"> 27.</span> </span><br><span class="line"><span class="bullet"> 28.</span> </span><br><span class="line"><span class="bullet"> 29.</span> </span><br><span class="line"><span class="bullet"> 30.</span> </span><br></pre></td></tr></table></figure><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/note/">Note</category>
      
      
      <category domain="https://jukyellow.github.io/tags/%EA%B0%95%EC%9D%98%EB%85%B8%ED%8A%B8/">강의노트</category>
      
      <category domain="https://jukyellow.github.io/tags/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/tags/lecture/">Lecture</category>
      
      <category domain="https://jukyellow.github.io/tags/kaist/">Kaist</category>
      
      <category domain="https://jukyellow.github.io/tags/note/">note</category>
      
      
      <comments>https://jukyellow.github.io/2021/04/02/ai-theory-note/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>빅데이터 이론/분석 Part2</title>
      <link>https://jukyellow.github.io/2021/04/02/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part2/</link>
      <guid>https://jukyellow.github.io/2021/04/02/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part2/</guid>
      <pubDate>Thu, 01 Apr 2021 20:31:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;[온라인 강좌 강의노트]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K-MOOC 강좌명: [집콕]빅데이터의 세계, 원리와 응용  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jukyellow.github.io/2021/03/16/%EB%B9%85%EB%8D%B0</description>
        
      
      
      
      <content:encoded><![CDATA[<p>[온라인 강좌 강의노트]</p><ul><li>K-MOOC 강좌명: [집콕]빅데이터의 세계, 원리와 응용  </li><li><a href="https://jukyellow.github.io/2021/03/16/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part1/">빅데이터 이론/분석 Part1</a></li><li>진척률(2021.04.02): 5%</li></ul><h1 id="5주차"><a href="#5주차" class="headerlink" title="5주차"></a>5주차</h1><ul><li>데이터 군집화 방법  </li></ul><hr><h2 id="군집분석이란"><a href="#군집분석이란" class="headerlink" title="군집분석이란?"></a>군집분석이란?</h2><ul><li>정의: 유사한 특성을 가진 데이터 집단으로 그룹화하는 기법  </li><li>구분: 자율학습(목표 변수가 없음), 비지도 학습에 해당  </li><li>목표: 데이터 이해를 돕기위해, 특성 값이 유사한 레코드들의 모임으로 세분화  </li><li>유형: 계층적 클러스터링(Single Linkage method?), 비계층적(K-means), 모델기반(Kohonen network)  </li></ul><h3 id="계층적-병합-군집화"><a href="#계층적-병합-군집화" class="headerlink" title="계층적 병합 군집화"></a>계층적 병합 군집화</h3><ul><li>N개의 군집 시작 -&gt; 가장 근접한 2개의 레코드를 군집 병합 -&gt; 매 단계에서 가장 거리가 짧은 2개 군집 병합  </li><li>레코드간의 거리 측정: 유클리드 거리, 만하탄 거리, </li><li>군집간의 거리 측정: 최단거리/최대거리/평균거리/중심거리 등  </li><li>단일(최단) 연결법(Single Linkage method)<br>: 각 군집에 속하는 임의의 두 개체들 사이의 거리중 최단거리로 정의하여 유사성이 큰 군집을 묶어나가는 방법  </li><li>계층적 군집화의 장단점:<br>: (장점) 군집의 수 명시 필요없음, 군집화가 자동수행, 덴드로그램 도출 이해용이<br>: (단점) 데이터가 클 경우 거리행열 계산 부담, 극단치에 민감, 비안정성(데이터 재구성시 상이한 결과 나타날수 있음)  </li></ul><h3 id="비계층적-군집분석"><a href="#비계층적-군집분석" class="headerlink" title="비계층적 군집분석"></a>비계층적 군집분석</h3><ul><li>원하는 군집의 수(K)를 사전에 명시하고, 군집들 내부의 분산을 최소화하도록 각 사례를 K개의 군집중 하나에 할당하는 기법  </li><li>ex: k-means  </li><li>절차: 클러스터링 수 K결정 -&gt; 최초 군집 기준값 결정-&gt; 군집분류-&gt; 군집 기준값 설정-&gt;군집재분류&lt;-&gt;군집기준값변경-&gt;최종 클러스터 도출  </li></ul><h2 id="군집분석의-장단점-및-활용"><a href="#군집분석의-장단점-및-활용" class="headerlink" title="군집분석의 장단점 및 활용"></a>군집분석의 장단점 및 활용</h2><ul><li>장점: 데이터에 대한 사전 지식 필요없음, 모든 형태의 데이터에 적용가능    </li><li>단점: 각 변수에 대한 가중치를 결정하거나 거리 정의 방법에 따라 결과 차이 가능, 초기 클러스터 수에 민감, 결과 해석 어려움  </li><li>활용<br>: (데이터 이해제고) 데이터 마이닝 초기작업에 유용, 세부집단 지식 없어서 전체 이해 하기 어려운 경우 탐색가능<br>: 텍스트 마이닝 적용시, 유사 문서 군집화 유용<br>: 마케팅의 고객 세분화 등 다양한 분양에 적용  </li></ul><h2 id="실습1"><a href="#실습1" class="headerlink" title="실습1"></a>실습1</h2><ul><li>보험청구 데이터 유사그룹 생성, 보험사기 정보 활용 분류모형 구축  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/data-scientist/">Data Scientist</category>
      
      <category domain="https://jukyellow.github.io/categories/data-scientist/note/">Note</category>
      
      
      <category domain="https://jukyellow.github.io/tags/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0/">빅데이터</category>
      
      <category domain="https://jukyellow.github.io/tags/data-analysis/">Data Analysis</category>
      
      <category domain="https://jukyellow.github.io/tags/data-scientist/">Data Scientist</category>
      
      <category domain="https://jukyellow.github.io/tags/k-mooc/">K-MOOC</category>
      
      <category domain="https://jukyellow.github.io/tags/%EA%B0%95%EC%9D%98%EB%85%B8%ED%8A%B8/">강의노트</category>
      
      
      <comments>https://jukyellow.github.io/2021/04/02/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>구글 Colab Jupyter Notebook 사용 팁</title>
      <link>https://jukyellow.github.io/2021/03/23/google-colab-tip/</link>
      <guid>https://jukyellow.github.io/2021/03/23/google-colab-tip/</guid>
      <pubDate>Mon, 22 Mar 2021 20:57:17 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;keras framework로 2년간 google colab과 google drive를 이용해 작업시 사용하던 내용을 정리해본다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>keras framework로 2년간 google colab과 google drive를 이용해 작업시 사용하던 내용을 정리해본다.  </li></ul><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> Google Drive file download-upload</span><br><span class="line"><span class="bullet">2.</span> Colab file upload/download</span><br><span class="line"><span class="bullet">3.</span> Colab tensorflow/keras downgrade</span><br><span class="line"><span class="bullet">4.</span> Colab file handling</span><br><span class="line"><span class="bullet">5.</span> Colab utility install</span><br><span class="line"><span class="bullet">6.</span> Colab github 프로젝트 연동</span><br><span class="line"><span class="bullet">7.</span> Colab upload 오류 대처</span><br><span class="line"><span class="bullet">8.</span> Colab에 주식관련 Lib 설치(Ta-Lib)</span><br></pre></td></tr></table></figure><h1 id="Google-drive-file-download-upload"><a href="#Google-drive-file-download-upload" class="headerlink" title="Google drive file download-upload"></a>Google drive file download-upload</h1><h2 id="file-download"><a href="#file-download" class="headerlink" title="file download"></a>file download</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#구글 드라이브에서 다운로드</span></span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line">auth.authenticate_user()</span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line">drive_service = build(<span class="string">&#x27;drive&#x27;</span>, <span class="string">&#x27;v3&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO </span><br><span class="line"><span class="keyword">from</span> googleapiclient.http <span class="keyword">import</span> MediaIoBaseDownload</span><br><span class="line"></span><br><span class="line">TEMP_PATH = <span class="string">&#x27;/tmp/&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcp_download</span>(<span class="params">file_name, key</span>):</span></span><br><span class="line">    <span class="comment">#3. 모델 다운로드</span></span><br><span class="line">    <span class="comment">#https://drive.google.com/open?id=1TlvbayGRCjAI6bOZrUYMmv6g6b95rnRM</span></span><br><span class="line">    request = drive_service.files().get_media(fileId=key)</span><br><span class="line"></span><br><span class="line">    downloaded = io.BytesIO()</span><br><span class="line">    downloader = MediaIoBaseDownload(downloaded, request)</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> done <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">      status, done = downloader.next_chunk()</span><br><span class="line">      <span class="keyword">if</span> status:</span><br><span class="line">          print(<span class="string">&quot;Download %%%d%%.&quot;</span> % <span class="built_in">int</span>(status.progress() * <span class="number">100</span>))</span><br><span class="line">      print(<span class="string">&quot;Download Complete!&quot;</span>)</span><br><span class="line">    downloaded.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(TEMP_PATH + file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(downloaded.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용법 : 다운로드시 사용할 파일명, 파일key 정보만 있으면 됨!</span></span><br><span class="line">down_file_name = <span class="string">&#x27;201912_purcon_gd.csv&#x27;</span></span><br><span class="line">gcp_download(down_file_name, <span class="string">&#x27;1q-E4K439JJBV2HnqgbibHMhmNOAHO11v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pickle 파일 다운로드 및 로딩</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">gd_tokenizer_name = <span class="string">&#x27;gd_tokenizer_350K4_ALL.pickle&#x27;</span></span><br><span class="line">gcp_download(gd_tokenizer_name, <span class="string">&#x27;15hcUEPYB-el1oNctRrhLqObuFKVvXJSV&#x27;</span>)</span><br><span class="line"><span class="comment">#loading</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(TEMP_PATH + gd_tokenizer_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> handle:</span><br><span class="line">    gd_tokenizer = pickle.load(handle) </span><br></pre></td></tr></table></figure><h2 id="file-upload"><a href="#file-upload" class="headerlink" title="file upload"></a>file upload</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">!pip install -U -q PyDrive</span><br><span class="line"><span class="keyword">from</span> pydrive.auth <span class="keyword">import</span> GoogleAuth</span><br><span class="line"><span class="keyword">from</span> pydrive.drive <span class="keyword">import</span> GoogleDrive</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> oauth2client.client <span class="keyword">import</span> GoogleCredentials</span><br><span class="line"></span><br><span class="line">gcp_drive = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doGoodleDriveAuth</span>():</span></span><br><span class="line">    <span class="comment"># 1. Authenticate and create the PyDrive client.</span></span><br><span class="line">    auth.authenticate_user()</span><br><span class="line">    gauth = GoogleAuth()</span><br><span class="line">    print(<span class="string">&#x27;gauth:&#x27;</span>,gauth)</span><br><span class="line">    gauth.credentials = GoogleCredentials.get_application_default()</span><br><span class="line"></span><br><span class="line">    gcp_drive = GoogleDrive(gauth)</span><br><span class="line">    print(<span class="string">&#x27;gcp_drive:&#x27;</span>, gcp_drive)</span><br><span class="line">    <span class="keyword">return</span> gcp_drive</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyDrive reference:</span></span><br><span class="line"><span class="comment"># https://googledrive.github.io/PyDrive/docs/build/html/index.html</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcp_upload</span>(<span class="params">file_path, w_file_name</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> gcp_drive == <span class="literal">None</span>:</span><br><span class="line">            drive = doGoodleDriveAuth()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 특정 폴더 안으로 파일 삽입</span></span><br><span class="line">        uploaded = drive.CreateFile(&#123;<span class="string">&#x27;title&#x27;</span>: w_file_name&#125;) <span class="comment">#, &quot;parents&quot;: [&#123;&quot;kind&quot;: &quot;drive#fileLink&quot;,&quot;id&quot;: &#x27;jukyellow@gmail.com&#x27;&#125;]&#125;)</span></span><br><span class="line">        uploaded.SetContentString(w_file_name)</span><br><span class="line">        uploaded.SetContentFile(file_path + w_file_name)</span><br><span class="line">        uploaded.Upload()</span><br><span class="line">        print(<span class="string">&#x27;Uploaded file with ID &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(uploaded.get(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">        <span class="keyword">return</span> uploaded.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e: print(<span class="string">&#x27;gcp_upload err:&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용법</span></span><br><span class="line"><span class="comment"># 먼저, 파일을 100M단위로 분할 압축(100M 이상일때 한번에 안올라가는 문제있어서)</span></span><br><span class="line">!<span class="built_in">zip</span> -s 100M -o TextCNN_EarayStop.<span class="built_in">zip</span> ./TextCNN_EarayStop.h5</span><br><span class="line"><span class="comment"># 루프돌면서 분할 파일 업로드(나중에 다시 합칠때는 다운로드 받고 압축푼다음 합칠수 있음)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">0</span>: div_name = <span class="string">&quot;TextCNN_EarayStop.zip&quot;</span></span><br><span class="line"><span class="keyword">else</span>: div_name = <span class="string">&quot;TextCNN_EarayStop.z0&quot;</span> + <span class="built_in">str</span>(idx)</span><br><span class="line">gcp_upload(<span class="string">&quot;./&quot;</span>, div_name) <span class="comment">#gcp root경로에 저장됨</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e : print(<span class="string">&#x27;e:&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 분할파일을 다시 내려받고 합칠때</span></span><br><span class="line">model_name_early_stop = <span class="string">&#x27;TextCNN_EarayStop_350K4.h5&#x27;</span>  </span><br><span class="line"><span class="comment">#gcp_download(model_name_4bu, &#x27;1T2Es7AO2FTYuMaq2A8-9Tc_g_mUKhitP&#x27;) # temp 경로에 다운로드</span></span><br><span class="line">gcp_download(<span class="string">&#x27;TextCNN_EarayStop_350K4.zip&#x27;</span>,<span class="string">&#x27;1RD9VCeLwKmZrZCP8SRRjwA4ADGPzZcZi&#x27;</span>)</span><br><span class="line">gcp_download(<span class="string">&#x27;TextCNN_EarayStop_350K4.z01&#x27;</span>,<span class="string">&#x27;17RPrQiuPyx5eUATEX5FYMBSxKcao6X5w&#x27;</span>)</span><br><span class="line">gcp_download(<span class="string">&#x27;TextCNN_EarayStop_350K4.z02&#x27;</span>,<span class="string">&#x27;1NrR7sHeVEcqlJT4bSAspx3RsTvbpiZkH&#x27;</span>)</span><br><span class="line">gcp_download(<span class="string">&#x27;TextCNN_EarayStop_350K4.z03&#x27;</span>,<span class="string">&#x27;1nI0yli3HLCSRF3RVWTNgQCUQ0thhmviv&#x27;</span>)</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment"># 분할파일 머지 및 압축해제</span></span><br><span class="line">!cat /tmp/TextCNN_EarayStop_350K4.z* &gt; /tmp/TextCNN_EarayStop_Mer.<span class="built_in">zip</span></span><br><span class="line">!unzip /tmp/TextCNN_EarayStop_Mer.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure><hr><h1 id="Colab-file-upload-download"><a href="#Colab-file-upload-download" class="headerlink" title="Colab file upload/download"></a>Colab file upload/download</h1><h2 id="colab-file-upload"><a href="#colab-file-upload" class="headerlink" title="colab file upload"></a>colab file upload</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 직접 업로드( files.upload())</span></span><br><span class="line"><span class="keyword">from</span> google.colab import files</span><br><span class="line"><span class="comment">#파일업로드창 출력</span></span><br><span class="line">uploaded = files.upload()</span><br><span class="line"><span class="comment">#업로드한 파일정보 출력</span></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> uploaded.keys():</span><br><span class="line">  <span class="builtin-name">print</span>(<span class="string">&#x27;Upload file &quot;&#123;name&#125;&quot; with length &#123;length&#125; bytes&#x27;</span>.format(<span class="attribute">name</span>=fn, <span class="attribute">length</span>=len(uploaded[fn])))</span><br><span class="line"><span class="comment">#읽어서 사용</span></span><br><span class="line">im = imread(<span class="string">&quot;output.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.google drive업로드 후 로딩 방법</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2-1) 파일을 열어서 라인단위로 읽어서 저장하는 방법</span></span><br><span class="line"><span class="comment">#Pre-Trained data를 사용(find-tune)</span></span><br><span class="line">embeddings_index = &#123;&#125;</span><br><span class="line"><span class="comment"># driver code</span></span><br><span class="line"><span class="keyword">from</span> google.colab import drive</span><br><span class="line">import os</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/gdrive&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = open(os.path.join(<span class="string">&#x27;/content/gdrive/My Drive&#x27;</span>, <span class="string">&#x27;glove.6B.100d.txt&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    values = line.split()</span><br><span class="line">    word = values[0]</span><br><span class="line">    coefs = np.asarray(values[1:], <span class="attribute">dtype</span>=<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    embeddings_index[word] = coefs</span><br><span class="line">f.close()</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&#x27;Found %s word vectors.&#x27;</span> % len(embeddings_index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-2) dataPath 및 Gensim 이용해서 파일을 읽어오는 방법</span></span><br><span class="line"><span class="comment"># 2-2-1)</span></span><br><span class="line"><span class="keyword">from</span> gensim.test.utils import datapath, get_tmpfile</span><br><span class="line"><span class="keyword">from</span> google.colab import drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/gdrive&#x27;</span>)</span><br><span class="line"></span><br><span class="line">glove_file = datapath(<span class="string">&#x27;/content/gdrive/My Drive/glove.6B.100d.txt&#x27;</span>) </span><br><span class="line">xy = np.loadtxt( glove_file , <span class="attribute">delimiter</span>=<span class="string">&#x27;,&#x27;</span>, <span class="attribute">dtype</span>=np.float32) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-2-2)</span></span><br><span class="line"><span class="keyword">from</span> gensim.test.utils import datapath, get_tmpfile</span><br><span class="line">feature_data = datapath(<span class="string">&#x27;/content/gdrive/My Drive/AI/kaggle/&#x27;</span> + <span class="string">&#x27;300features_40minwords_10text&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-3) google drive경로에서 읽는 방법</span></span><br><span class="line"><span class="comment"># 2-3-1) image</span></span><br><span class="line"><span class="keyword">from</span> google.colab import drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/gdrive&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot import imread</span><br><span class="line"></span><br><span class="line">im = imread(<span class="string">&quot;/content/gdrive/My Drive/NLP-Lab/output.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-3-2)txt read</span></span><br><span class="line"><span class="keyword">from</span> google.colab import drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/gdrive&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#csv data read</span></span><br><span class="line">xy = np.loadtxt(<span class="string">&#x27;/content/gdrive/My Drive/data-01-test-score.csv&#x27;</span>, <span class="attribute">delimiter</span>=<span class="string">&#x27;,&#x27;</span>, <span class="attribute">dtype</span>=np.float32) </span><br><span class="line"><span class="comment">#문자열인 경우 dtype=np.str</span></span><br><span class="line"><span class="comment">#google driave root 경로: /content/gdrive/My Drive/</span></span><br><span class="line">x_data = xy[:, 0:-1]</span><br><span class="line">y_data = xy[:, [-1]]</span><br><span class="line"><span class="comment">#단 chunk_size 초과로 오류발생 가능..</span></span><br></pre></td></tr></table></figure><h2 id="colab-file-download"><a href="#colab-file-download" class="headerlink" title="colab file download"></a>colab file download</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># A. pandas data 다운로드</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="title">pd</span>.<span class="type">DataFrame</span>(err_vec).to_csv(<span class="string">&quot;/tmp/preporcessing_case6.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"><span class="title">files</span>.download(<span class="string">&quot;/tmp/preporcessing_case6.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># B. Numpy 다운로드</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="title">a</span> = numpy.asarray([ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] ])</span><br><span class="line"><span class="title">numpy</span>.savetxt(<span class="string">&quot;foo.csv&quot;</span>, a, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"><span class="title">files</span>.download(<span class="string">&quot;파일명&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="Colab-tensorflow-keras-downgrade"><a href="#Colab-tensorflow-keras-downgrade" class="headerlink" title="Colab tensorflow/keras downgrade"></a>Colab tensorflow/keras downgrade</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensorflow 1.x대 적용방법 1</span></span><br><span class="line">%tensorflow_version 1.x</span><br><span class="line">import tensorflow as tf</span><br><span class="line"><span class="comment"># 버전확인</span></span><br><span class="line"><span class="builtin-name">print</span>(tf.__version__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensorflow 1.x대 적용방법2</span></span><br><span class="line">!pip install <span class="attribute">tensorflow</span>==1.14.0</span><br><span class="line"><span class="comment"># 특정 버전 설치? : pip3 install tensorflow-gpu==1.15.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># keras version downgrade</span></span><br><span class="line">!pip uninstall keras</span><br><span class="line">!pip install <span class="attribute">keras</span>==2.1.2</span><br><span class="line">import kears</span><br><span class="line"><span class="builtin-name">print</span>(__keras.version__)</span><br></pre></td></tr></table></figure><hr><h1 id="Colab-file-handling"><a href="#Colab-file-handling" class="headerlink" title="Colab file handling"></a>Colab file handling</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 디렉토리 조회</span></span><br><span class="line">! ls -alrt <span class="regexp">/content/</span></span><br><span class="line"><span class="comment"># 파일 move</span></span><br><span class="line">!mv <span class="regexp">/tmp/</span>facenet_keras.h5 /content</span><br><span class="line"><span class="comment"># 파일 삭제</span></span><br><span class="line">!\rm -rf <span class="regexp">/content/</span>origin_data</span><br><span class="line"><span class="comment"># 디렉토리 생성</span></span><br><span class="line">!mkdir <span class="regexp">/content/</span>origin_data</span><br><span class="line"><span class="comment"># 압축관련 설치</span></span><br><span class="line">!apt-get install zip unzip</span><br><span class="line"><span class="comment">#압축 100M이하로!</span></span><br><span class="line">!zip -s <span class="number">100</span>M -o TextCNN_GCN_10bu.zip ./TextCNN_GCN_10bu.h5</span><br><span class="line"><span class="comment"># -r:하위경로 모두 포함하여 압축, 현재경로에 zip파일 만들기(대상은 절대경로로)</span></span><br><span class="line">!zip -r dataset_zip.zip <span class="regexp">/content/</span>dataset</span><br><span class="line"><span class="comment"># 압축풀기 : 한글깨짐 방지: -O cp949</span></span><br><span class="line">!unzip -O cp949 <span class="regexp">/tmp/</span><span class="number">00</span>_Total.zip</span><br><span class="line">!rm -rf <span class="regexp">/tmp/</span><span class="number">00</span>_Total.zip</span><br></pre></td></tr></table></figure><hr><h1 id="Colab-utility-install"><a href="#Colab-utility-install" class="headerlink" title="Colab utility install"></a>Colab utility install</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip uninstall google-api-python-<span class="keyword">client</span> -y</span><br><span class="line">!pip install google-api-python-<span class="keyword">client</span>==<span class="number">1.7</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><hr><h1 id="Colab-github-프로젝트-연동"><a href="#Colab-github-프로젝트-연동" class="headerlink" title="Colab github 프로젝트 연동"></a>Colab github 프로젝트 연동</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!git clone https:<span class="comment">//github.com/philipperemy/keras-attention-mechanism.git</span></span><br><span class="line"></span><br><span class="line">!ls -alrt</span><br><span class="line"></span><br><span class="line">!cd keras-attention-mechanism</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> attention_utils <span class="keyword">import</span> get_activations, get_data</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1337</span>)  # for reproducibility</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense, merge</span><br></pre></td></tr></table></figure><hr><h1 id="Colab-upload-오류-대처"><a href="#Colab-upload-오류-대처" class="headerlink" title="Colab upload 오류 대처"></a>Colab upload 오류 대처</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 오류내용 : RedirectMissingLocation: Redirected but the response is missing a Location: header.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#버전 확인</span></span><br><span class="line"><span class="comment">#!pip list</span></span><br><span class="line"><span class="comment">#httplib2                 0.17.1</span></span><br><span class="line"><span class="comment">#google-api-python-client 1.7.12  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 방안 : downgrade (https://github.com/tokland/youtube-upload/issues/293)</span></span><br><span class="line"><span class="comment"># !pip3 install google-api-python-client==1.7.3 oauth2client==4.1.2 progressbar2==3.38.0 httplib2==0.15.0</span></span><br><span class="line"><span class="comment">!pip uninstall google-api-python-client -y</span></span><br><span class="line"><span class="comment">!pip uninstall oauth2client -y</span></span><br><span class="line"><span class="comment">!pip uninstall progressbar2 -y</span></span><br><span class="line"><span class="comment">!pip uninstall httplib2 -y</span></span><br><span class="line"><span class="comment">!pip install google-api-python-client==1.7.3</span></span><br><span class="line"><span class="comment">!pip install oauth2client==4.1.2</span></span><br><span class="line"><span class="comment">!pip install progressbar2==3.38.0</span></span><br><span class="line"><span class="comment">!pip install httplib2==0.15.0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Colab-주식관련-Lib-설치-Ta-Lib"><a href="#Colab-주식관련-Lib-설치-Ta-Lib" class="headerlink" title="Colab 주식관련 Lib 설치(Ta-Lib)"></a>Colab 주식관련 Lib 설치(Ta-Lib)</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># (<span class="number">2020</span>) http<span class="variable">s:</span>//stackoverflow.<span class="keyword">com</span>/questions/<span class="number">49648391</span>/how-<span class="keyword">to</span>-install-<span class="keyword">ta</span>-lib-in-google-colab</span><br><span class="line">url = <span class="string">&#x27;https://launchpad.net/~mario-mariomedina/+archive/ubuntu/talib/+files&#x27;</span></span><br><span class="line">!wget $url/libta-lib0_0.<span class="number">4.0</span>-oneiric1_amd64.<span class="keyword">deb</span> -qO libta.<span class="keyword">deb</span></span><br><span class="line">!wget $url/<span class="keyword">ta</span>-lib0-dev_0.<span class="number">4.0</span>-oneiric1_amd64.<span class="keyword">deb</span> -qO <span class="keyword">ta</span>.<span class="keyword">deb</span></span><br><span class="line">!dpkg -i libta.<span class="keyword">deb</span> <span class="keyword">ta</span>.<span class="keyword">deb</span></span><br><span class="line">!pip install <span class="keyword">ta</span>-lib</span><br><span class="line">import talib</span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/note/">Note</category>
      
      
      <category domain="https://jukyellow.github.io/tags/colaboratory/">Colaboratory</category>
      
      <category domain="https://jukyellow.github.io/tags/google-colab/">google colab</category>
      
      <category domain="https://jukyellow.github.io/tags/google-drive/">google drive</category>
      
      <category domain="https://jukyellow.github.io/tags/jupter-notebook/">Jupter notebook</category>
      
      <category domain="https://jukyellow.github.io/tags/drive-file-download/">drive file download</category>
      
      <category domain="https://jukyellow.github.io/tags/keras/">keras</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/23/google-colab-tip/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>헥소 검색 엔진 최적화</title>
      <link>https://jukyellow.github.io/2021/03/17/hexo-search-engine-optimization/</link>
      <guid>https://jukyellow.github.io/2021/03/17/hexo-search-engine-optimization/</guid>
      <pubDate>Tue, 16 Mar 2021 21:29:30 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;참고: &lt;a href=&quot;https://youngjunsung.github.io/2019/12/06/hexo-blog-SEO/&quot;&gt;https://youngjunsung.github.io/2019/12/06/hexo-blog-SEO/&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>참고: <a href="https://youngjunsung.github.io/2019/12/06/hexo-blog-SEO/">https://youngjunsung.github.io/2019/12/06/hexo-blog-SEO/</a>  </li></ul><h2 id="플러그인-설치-목록"><a href="#플러그인-설치-목록" class="headerlink" title="플러그인 설치 목록"></a>플러그인 설치 목록</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-auto-canonical</span></span><br><span class="line">npm install <span class="comment">--save hexo-autonofollow</span></span><br><span class="line">npm install <span class="comment">--save hexo-generator-feed</span></span><br><span class="line">npm install <span class="comment">--save hexo-generator-seo-friendly-sitemap</span></span><br><span class="line">npm install <span class="comment">--save hexo-generator-robotstxt</span></span><br></pre></td></tr></table></figure><h2 id="config-xml"><a href="#config-xml" class="headerlink" title="_config.xml"></a>_config.xml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">exclude1.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">exclude2.com</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">rss2.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">robotstxt:</span></span><br><span class="line">  <span class="attr">useragent:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">allow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">https://jukyellow.github.io/sitemap.xml</span></span><br></pre></td></tr></table></figure><h2 id="tag-삽입"><a href="#tag-삽입" class="headerlink" title="tag 삽입"></a>tag 삽입</h2><ul><li>head.ejs 파일의 head 태그 안에 삽입      </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ejs --&gt;</span></span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="구글-네이버-웹마스터-등록"><a href="#구글-네이버-웹마스터-등록" class="headerlink" title="구글/네이버 웹마스터 등록"></a>구글/네이버 웹마스터 등록</h2><h3 id="구글-search-console"><a href="#구글-search-console" class="headerlink" title="구글 search console"></a>구글 search console</h3><ul><li>구글 search console : sitemap.xml 제출  </li></ul><h3 id="네이버"><a href="#네이버" class="headerlink" title="네이버"></a>네이버</h3><ul><li>네이버 웹마스터 도구: 사이트 URL 제출 및 동작체크  </li></ul><hr><h2 id="구글-애널리스틱"><a href="#구글-애널리스틱" class="headerlink" title="구글 애널리스틱"></a>구글 애널리스틱</h2><ul><li>sitemap 정상적으로 제출후, 접속 통계정보 확인 가능<br><img src="./images/google_Analystic.jpg">  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/">Blog, PT</category>
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/hexo/">Hexo</category>
      
      
      <category domain="https://jukyellow.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://jukyellow.github.io/tags/search-engine-optimization/">search engine optimization</category>
      
      <category domain="https://jukyellow.github.io/tags/seo/">SEO</category>
      
      <category domain="https://jukyellow.github.io/tags/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EB%85%B8%EC%B6%9C/">검색엔진노출</category>
      
      <category domain="https://jukyellow.github.io/tags/robots-txt/">robots.txt</category>
      
      <category domain="https://jukyellow.github.io/tags/sitemap-xml/">sitemap.xml</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/17/hexo-search-engine-optimization/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>빅데이터-이론-분석-Part1</title>
      <link>https://jukyellow.github.io/2021/03/16/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part1/</link>
      <guid>https://jukyellow.github.io/2021/03/16/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part1/</guid>
      <pubDate>Mon, 15 Mar 2021 22:08:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;[온라인 강좌 강의노트]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K-MOOC 강좌명: [집콕]빅데이터의 세계, 원리와 응용  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1주차&quot;&gt;&lt;a href=&quot;#1주차&quot; class=&quot;headerlink&quot; title=&quot;1주차&quot;&gt;&lt;/a&gt;1</description>
        
      
      
      
      <content:encoded><![CDATA[<p>[온라인 강좌 강의노트]</p><ul><li>K-MOOC 강좌명: [집콕]빅데이터의 세계, 원리와 응용  </li></ul><h2 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h2><h3 id="빅데이터란"><a href="#빅데이터란" class="headerlink" title="빅데이터란"></a>빅데이터란</h3><ul><li>빅데이터 분석: 귀납적(경험-&gt;정보)  </li><li>비즈니스 인텔리젠스(1990년대말): 데이터-&gt;기업정보활용<br>: 데이터웨어하우스/OLAP, 데이터 마이닝  </li><li>데이터 분석과정<br>: 데이터확인&gt;수집&gt;저장(Hadoop,NoSQL)&gt;처리&gt;분석(통계,마이닝)&gt;표현  </li></ul><h3 id="빅데이터-주요특징"><a href="#빅데이터-주요특징" class="headerlink" title="빅데이터 주요특징"></a>빅데이터 주요특징</h3><ul><li>기술적요소/전략적요소/인적요소  </li><li>기술적요소: 데이터(정형/비정형), 수집/처리/저장, 분석/지식추출  </li><li>전략적요소: 디지털 transformation&gt;Data Technology 활용기획&gt;빅데이터 분석 활용기회탐색&gt;활용시나리오 도출  </li><li>인적요소: CDC(Chief Data Officer), Data Scientists, 빅데이터 팀, 교육  </li></ul><h3 id="빅데이터와-인공지능"><a href="#빅데이터와-인공지능" class="headerlink" title="빅데이터와 인공지능"></a>빅데이터와 인공지능</h3><ul><li>귀납(사례,데이터분석)에 의한 지식획득 가능성(빅데이터)-&gt;딥러닝 학습   </li></ul><h3 id="빅데이터가-제공하는-기회"><a href="#빅데이터가-제공하는-기회" class="headerlink" title="빅데이터가 제공하는 기회"></a>빅데이터가 제공하는 기회</h3><ul><li>의사결정의 질 제고, 운영효율 제고, 새로운 가치 창출(BM발굴)   </li></ul><h3 id="데이터-분석과정"><a href="#데이터-분석과정" class="headerlink" title="데이터 분석과정"></a>데이터 분석과정</h3><ul><li>데이터(Source인식) &gt; 수집(ETL,클롤링) &gt; 저장(Hadoop,NoSQL) &gt; 처리 &gt; 분석(통계,마이닝,머신러닝) &gt; 표현(가시화)  </li></ul><hr><h2 id="2주차"><a href="#2주차" class="headerlink" title="2주차"></a>2주차</h2><h3 id="빅데이터-활용의-핵심-성공요인"><a href="#빅데이터-활용의-핵심-성공요인" class="headerlink" title="빅데이터 활용의 핵심 성공요인"></a>빅데이터 활용의 핵심 성공요인</h3><ul><li>분석을 위한 기획능력 필요  </li><li>분석 시나리오 수립이 어려운 이유: 도메인 지식부족, 수집/저장/분석 기술능력 부족, 어떤 결과가 도출가능한지 이해부족  </li><li>기획능력 향상방법: 요소기술 이해, 가치에 대한 인식, 성공사례 분석  </li></ul><h3 id="활용사례-1"><a href="#활용사례-1" class="headerlink" title="활용사례 1"></a>활용사례 1</h3><ul><li>독감예보 서비스(구글 검색어 빅데이터로 예측)<br>: 어떤 데이터: 검색어 조회수<br>: 어떻게 분석: 빈도를 계산<br>: 어떤 가치 제공: 독감 예보  </li><li>SNS를 활용한 영화 흥행 수익 예측<br>: 어떤 데이터: SNS상의 비정형 Text 데이터<br>: 어떻게 분석: 텍스 마이닝(감정분석, 오피니언 분석)<br>: 어떤 가체 제공: 경영/투자자의 의사결정 자료  </li><li>빅데이터 분석을 통한 심야버스 노선 정책지원<br>: 어떤 데이터: 서울시민 전화통화 기록<br>: 어떻게 분석: 기술통계(평균,표준편차,빈도)<br>: 어떤 가치: 시민편익, 수익보장  </li><li>빅데이터 기반 고객의 소리분석 시스템을 통한 서비스 혁신<br>: 어떤 데이터: 고객 음성 데이터(STT:speech to text)<br>: 어떻게 : 텍스트 마이닝<br>: 어떤 가치: 고객 중심 경영  </li></ul><h3 id="활용사례-2"><a href="#활용사례-2" class="headerlink" title="활용사례 2"></a>활용사례 2</h3><ul><li>데이터 마이닝을 활용한 신용평가 시스템 구축 (국민은행)<br>: (생각1) 기업의 재무제표 지표값과 회사의 부도여부 간의 상관성<br>: (생각2) 부도난 회사의 패턴을 머신러닝으로 모델링(부도패턴 예측) -&gt; 부도예측시스템 구축<br>: 어떤 데이터: 기업 데이터(재무, 비재무)<br>: 어떻게 분석: 통계기법, 인공지능 기법 모형구축<br>: 어떤 가치 제공: 기업 심사비용 감축, 의사 결정 지원  </li><li>빅데이터 분석을 활용한 감사정보 시스템 구축  </li><li>빅데이터 분석을 활용한 탈세 및 범죄 예방시스템 구축<br>: 어떤 데이터: 납세,SNS데이터<br>: 어떻게 분석: 데이터 마이닝, 사회연결망 분석<br>: 어떤 가치 제공: 재정 수입에 기여, 탈세 예방 효과  </li></ul><h3 id="빅데이터-분석-기획1-2"><a href="#빅데이터-분석-기획1-2" class="headerlink" title="빅데이터 분석 기획1,2"></a>빅데이터 분석 기획1,2</h3><ul><li>문제해결 &gt; 목표와 방법 &gt; 확보계획  </li><li>분석 기획 목적:<br>: 분석대상 발굴 및 구체화, 확보 역량, 분석역량, 운영관리 체계 정규화, 의사결정문화 정착<br>: 데이터/분석역량/프로세스/문화/ICT 거버넌스등 전반에 걸친 해결방안 수립  </li><li>분석 기획의 단계: 분석기회 발굴 =&gt; 분석기회 구체화 =&gt; 마스터 플랜 수립<br>: 분석 기회 발굴: 문제 정의/필요성/목표 정의<br>: 분석 기회 구체화: 목표달성 방법 구체화, 수행절차 적용방법/기술 정의<br>: 마스터 플랜수립: 로드맵/일정계획, 분석 거버넌스 체계 필요  </li><li>분석 기회발굴: 톱다운(전사비즈모델분석), 바틈업(대상프로세스선정/분석), 벤치마킹  </li><li>분석 기회 구체화: 분석 체계/과정 구체화, 활용시나리오 구체적 정의<br>: 분석기회 구조화: 묵표가치, 유저스토리 형식 정의, 목표가치 지표화, 분석질문 정의<br>: 분석방안 구체화: 체계/과정 구체화, 전체분석세트 및 관계도출, 데이터 정의 분석 경제성 평가<br>: 활용시나리오정의: 프로세스 지능화/변화 발생  </li><li>마스터 플랜 수립: 전략적 우선순위, 로드맵 수립(우선순위 평가, 분석적용 범위/방식 고려)<br>: 분석 과제 우선순위 평가: 중요도, 경제성(ROI), 실행용이성 고려<br>: 단계적 구현 로드맵 수립:<br>: 일정계획: 세부 일정  </li></ul><hr><h2 id="3주차"><a href="#3주차" class="headerlink" title="3주차"></a>3주차</h2><h3 id="분석을-위한-데이터들"><a href="#분석을-위한-데이터들" class="headerlink" title="분석을 위한 데이터들"></a>분석을 위한 데이터들</h3><ul><li>정형 데이터: 고정된 필드에 저장된 데이터, 설계자에 의해 형태가 정해짐  </li><li>비정형 데이터: 문서/그림/영상…  </li><li>분석대상 데이터의 예<br>: 텍스트분석-&gt;핵심단어, 주요토픽/이슈, 감정(긍정/부정)<br>: 웹: Html&gt;Tagging&gt;분석<br>: SNS: 사용자반응&lt;–게시글 크롤링<br>: 로그데이터: 방문시간/횟수/접근정보/관심상품…<br>: 센서데이터/사진(이미지)/동영상  </li></ul><h3 id="빅데이터의-수집"><a href="#빅데이터의-수집" class="headerlink" title="빅데이터의 수집"></a>빅데이터의 수집</h3><ul><li>데이터수집: 데이터소스 데이터 자동수집, 저장/변환/통합  </li><li>수집과정의 중요성: 정확한 데이터가 필요/분석목적 고려  </li><li>내부데이터/외부데이터  </li><li>수집방법(ETL) : 수집/변환/적재  </li><li>외부 데이터 수집방법: 크롤링(스크래핑)- Textom,  </li></ul><h3 id="데이터-저장-데이터베이스란"><a href="#데이터-저장-데이터베이스란" class="headerlink" title="(데이터 저장) 데이터베이스란"></a>(데이터 저장) 데이터베이스란</h3><h3 id="데이터-저장-데이터모델링이란-E-R모델링"><a href="#데이터-저장-데이터모델링이란-E-R모델링" class="headerlink" title="(데이터 저장) 데이터모델링이란(E-R모델링)"></a>(데이터 저장) 데이터모델링이란(E-R모델링)</h3><h3 id="데이터-분석-데이터-웨어하우스란"><a href="#데이터-분석-데이터-웨어하우스란" class="headerlink" title="(데이터 분석) 데이터 웨어하우스란?"></a>(데이터 분석) 데이터 웨어하우스란?</h3><ul><li>DW: DB(응용프로그램목적), DW(적절한조합-&gt;지식변환 목적-&gt;의사결정지원)  </li><li>DW정의: 주제중심/통합/시간성/비휘발성 자료 집합  </li><li>DW특징: 주제/데이터중심, 비휘발성(읽기중심), 시간성(역사성)  </li><li>데이터 마트(Mart):<br>: 데이터 웨어하우스와 사용자 사이의 중간층에 위치<br>: 하나의 주제 하나의 부서 중심 DW<br>: DW가 도매상이면, DT는 소매상<br>: DW-&gt;DT로 데이터 복제  </li><li>구성<br>: 운영/보관data -&gt; 자료 추출/변환 -&gt; 메타데이터&lt;-&gt; DW-&gt;DT -&gt; 분석도구/OLAP  </li></ul><h3 id="OLAP-On-Line-Analytical-Processing"><a href="#OLAP-On-Line-Analytical-Processing" class="headerlink" title="OLAP(On-Line Analytical Processing)"></a>OLAP(On-Line Analytical Processing)</h3><ul><li>다차원 데이터 구조를 이용하여 다차원의 복잡한 질의를 고속으로 처리하는 데이터 분석기술  </li><li>온라인 분석처리의 구성요소 : 드립 다운(Drill down)/드립 업,  </li></ul><h3 id="빅데이터와-비정형-데이터베이스-1"><a href="#빅데이터와-비정형-데이터베이스-1" class="headerlink" title="빅데이터와 비정형 데이터베이스(1)"></a>빅데이터와 비정형 데이터베이스(1)</h3><ul><li>분산시스템 필요, 비정형 데이터베이스(NoSQL, Hadoop)  </li><li>CAP이론(Consistency-일관성, Availability-가용성, Partiton Tolerance-지속성) 불가능<br>: CAP중 두개를 선택하고 하나를 포기(RDB-C/A, 비정형-P/A, P/C)  </li><li>NoSQL(Not-Only SQL or NoSQL)<br>: 규마 확장성, 분산저장, 대용량 구조/반구조적 저장 용이(MongoDB…)<br>: key-val(레디스,캐시..), 컬럼(H베이스..), 도큐먼트(몽고DB..), 그래프(Neo4J..)  </li><li>NoSQL 특징: 스키마 없음, 저장방식(값,컬럼,문서,그래프), 탄력성, 부하분산용이, 조회용이  </li></ul><h3 id="비정형-데이터베이스-2"><a href="#비정형-데이터베이스-2" class="headerlink" title="비정형 데이터베이스(2)"></a>비정형 데이터베이스(2)</h3><ul><li>하둡(Hadoop)이란? : 대용량 데이터의 분산 저장과 처리가 가능한 자바 기반 오픈소스 프레임워크<br>: 여러개의 컴퓨터를 묶어서 하나의 시스템으로 처리<br>: 하둡 파일 시스템(HDFS), 맵리듀스(분산된 서버 자원으로 쉽게 분석)  </li><li>데이터 &gt; 맵리듀스(분석처리) &gt; HDFS  </li><li>주요특징: 대용량 처리에 적합, 클라우드 환경 적합, 장애의 대비, 저렴한 구축비용 </li><li>구성요소: 파일시스템(HDFS, 64M~128M단위 분산저장/복제/클러스터), 맵리듀스(분산처리계산)  </li></ul><hr><h2 id="4주차"><a href="#4주차" class="headerlink" title="4주차"></a>4주차</h2><h3 id="데이터분석"><a href="#데이터분석" class="headerlink" title="데이터분석"></a>데이터분석</h3><ul><li>데이터 분석 유형<br>: Descriptive Analysis: 현재상황 이해/사실 파악<br>: Diagnostic Analysis : 현재상황 이해/원인파악<br>: Predictive Analysis: 미래, 또는 결과에 대한 예측<br>: Prescriptibe Analsis: 해결방안 도축  </li><li>Descriptive 방식: 데이터 요약/정보생성, 사실이해/현황파악, 의사결정 지원<br>: 기술통계, 군집화, 연관규칙,  </li><li>Predictive 방식: 예측모형, 미래/미지의 값 추정<br>: 예측, 분류, </li></ul><h3 id="Descriptive-Analysis"><a href="#Descriptive-Analysis" class="headerlink" title="Descriptive Analysis"></a>Descriptive Analysis</h3><ul><li>기술통계: 통계기반(평균,최대,최소…) 데이터 속성 요약/파악  </li><li>군집화: 유사속성 묶어, 군집(Cluster)으로 나누는것  </li><li>연관규칙: 데이터에 숨어있는 항목간의 관계를 탐색하는 것, 규칙성 도출    </li></ul><h3 id="Predictive-Analysis"><a href="#Predictive-Analysis" class="headerlink" title="Predictive Analysis"></a>Predictive Analysis</h3><ul><li>예측모형: 과거의 데이터바탕, 관측되지 않은 변수의 미래 값 평가<br>: 예측, 분류  </li><li>예측모형의 구축 및 활용<br>: Historical Data -&gt; Predictive Alogorithms -&gt; Model  -&gt; New data -&gt; predict  </li></ul><h3 id="기계학습"><a href="#기계학습" class="headerlink" title="기계학습"></a>기계학습</h3><ul><li>인공지능기법이자 인공지능에 필요한 지식을 찾는 방법론   </li><li>지도학습/비지도학습/강화박습  </li><li>학습용 데이터 구축: 독립변수(t 시점), 종속변수(t+1시점)<br>: 기계학습(가중치 초기화&gt;출력값 계산&gt;목표값의 비교)-&gt;교사학습(가중치조정-&gt;과정반복)  </li></ul><h3 id="SPSS"><a href="#SPSS" class="headerlink" title="SPSS"></a>SPSS</h3><ul><li>SPSS Modeler(ver 17)<br>: 데이터 마이닝 도구, 대용량 데이터 처리, 결과 예측모형 도출<br>: 데이터 로딩/변환/정제/모델링/그래프/결촤출력 전과정을 하나의 환경에서 제공, 다양한 알고리즘 보유<br><img src="./images/SPSS_Modeler.jpg"><br><img src="./images/SPSS_Modeler2.jpg">  </li></ul><h3 id="데이터-마이닝"><a href="#데이터-마이닝" class="headerlink" title="데이터 마이닝"></a>데이터 마이닝</h3><ul><li>데이터내 관계/패턴/규칙 탐색하여 모형화 및 유용한 지식 추출의 일련과정  </li><li>도입배경: 컴퓨터파워증가, 통계적/기계학습기법 접목/데이터 수집관리능력 향상  </li><li>수행단계: 샘플링-&gt;정제/전처리-&gt;탐색및변형-&gt;모형화-&gt;보고/시각화-&gt;적용단계  </li></ul><h3 id="텍스트-마이닝"><a href="#텍스트-마이닝" class="headerlink" title="텍스트 마이닝"></a>텍스트 마이닝</h3><ul><li>자연어로 구성된 비정형 Text 데이터에서 패턴/관계를 추출하여 가치정보를 찾아내는 기법  </li><li>수행단계: 텍스트수집-&gt;전처리(형태소분석 등)-&gt;의미정보변환(불용어/어간처리 등)-&gt;의미정보추출-&gt;패턴경향분석-&gt;정보표현/평가  </li><li>적용분야: 출시상품 웹반응분석, 고객 VOC분석 마케팅활용  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/data-scientist/">Data Scientist</category>
      
      <category domain="https://jukyellow.github.io/categories/data-scientist/note/">Note</category>
      
      
      <category domain="https://jukyellow.github.io/tags/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0/">빅데이터</category>
      
      <category domain="https://jukyellow.github.io/tags/data-analysis/">Data Analysis</category>
      
      <category domain="https://jukyellow.github.io/tags/data-scientist/">Data Scientist</category>
      
      <category domain="https://jukyellow.github.io/tags/k-mooc/">K-MOOC</category>
      
      <category domain="https://jukyellow.github.io/tags/%EA%B0%95%EC%9D%98%EB%85%B8%ED%8A%B8/">강의노트</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/16/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%A1%A0-%EB%B6%84%EC%84%9D-part1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle-Notebook-Guide</title>
      <link>https://jukyellow.github.io/2021/03/14/kaggle-notebook-guide/</link>
      <guid>https://jukyellow.github.io/2021/03/14/kaggle-notebook-guide/</guid>
      <pubDate>Sun, 14 Mar 2021 04:36:50 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Kaggle 사이트에서 머신러닝 개발환경(jupyter notebook)을 제공한다.  &lt;/li&gt;
&lt;li&gt;Kaggle competition에서 제공하는 DataSet은 100G가 넘어가는게 많은데, 캐글 개발환경에서 바로 DataSet</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Kaggle 사이트에서 머신러닝 개발환경(jupyter notebook)을 제공한다.  </li><li>Kaggle competition에서 제공하는 DataSet은 100G가 넘어가는게 많은데, 캐글 개발환경에서 바로 DataSet 접근이 가능하다.</li><li>1주 최대 38시간 GPU 사용이 가능하고, 주마다 Reset된다.(notebook생성할때 어디서 봤는데 다시 못찾겠다;;)  </li></ul><h1 id="메뉴진입"><a href="#메뉴진입" class="headerlink" title="메뉴진입"></a>메뉴진입</h1><ul><li>회원가입 -&gt; Competion -&gt; Summit Predictions -&gt; New Notebook<br><img src="./images/1_new_notebook.jpg"></li></ul><h1 id="제약사항-확인"><a href="#제약사항-확인" class="headerlink" title="제약사항 확인"></a>제약사항 확인</h1><h2 id="일반-제약사항"><a href="#일반-제약사항" class="headerlink" title="일반 제약사항"></a>일반 제약사항</h2><ol><li>GPU: 1주 38시간(1주일단위 초기화되어 다시 38시간 사용가능)</li><li>20G까지 쓰기 가능 <blockquote><p>You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using “Save &amp; Run All” </p></blockquote></li></ol><h2 id="GPU-설정"><a href="#GPU-설정" class="headerlink" title="GPU 설정"></a>GPU 설정</h2><p><img src="./images/2_gpu_settting.jpg">  </p><h2 id="Data-추가"><a href="#Data-추가" class="headerlink" title="Data 추가"></a>Data 추가</h2><p><img src="./images/3_add_data.jpg">  </p><h1 id="Data접근"><a href="#Data접근" class="headerlink" title="Data접근"></a>Data접근</h1><h2 id="예제코드-제공"><a href="#예제코드-제공" class="headerlink" title="예제코드 제공"></a>예제코드 제공</h2><ul><li>이미 아래와 같이 예제코드 제공하고, 파일count 체크하는 로직을 추가하였다.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class="line"><span class="comment"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class="line"><span class="comment"># For example, here&#x27;s several helpful packages to load</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class="line"><span class="comment"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">f_cnt_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> dirname, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;/kaggle/input&#x27;</span>):</span><br><span class="line">    f_cnt_map[dirname] = <span class="built_in">len</span>(filenames)</span><br><span class="line"><span class="comment"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class="line"><span class="comment"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, d_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(f_cnt_map.keys()):</span><br><span class="line">    print(<span class="string">&quot;idx:&quot;</span>, idx, <span class="string">&quot; ,d_name:&quot;</span>, d_name, <span class="string">&quot; ,f_cnt:&quot;</span>, f_cnt_map[d_name])</span><br><span class="line">print(<span class="string">&quot;---&quot;</span>)    </span><br><span class="line"></span><br><span class="line">prn_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> dirname, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;/kaggle/input&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(dirname, filename))</span><br><span class="line">        prn_cnt + = <span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span>(prn_cnt&gt;=<span class="number">30</span>) <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="샘플파일-보기"><a href="#샘플파일-보기" class="headerlink" title="샘플파일 보기"></a>샘플파일 보기</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 1. 파일명 확인</span><br><span class="line">!<span class="keyword">ls</span> /kaggle/<span class="keyword">input</span>/hpa-single-cell-image-classification/<span class="keyword">test</span>/</span><br><span class="line">- 2. 이미지 보기</span><br><span class="line"># 이미지 샘플(<span class="keyword">test</span>-<span class="keyword">set</span>) 보기!</span><br><span class="line">img_array = np.array(Image.<span class="keyword">open</span>(&#x27;/kaggle/<span class="keyword">input</span>/hpa-single-cell-image-classification/<span class="keyword">test</span>/0040581b-f1f2-4fbe-b043-b6bfea5404bb_blue.png&#x27;))</span><br><span class="line">plt.imshow(img_array)</span><br></pre></td></tr></table></figure><img src="./images/4_sample_img.jpg"></li></ul><h2 id="Label-정보-확인"><a href="#Label-정보-확인" class="headerlink" title="Label 정보 확인"></a>Label 정보 확인</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1-1. 그룹별 갯수 확인</span></span><br><span class="line">tr_group = train_csv.sort_values(<span class="attribute">by</span>=<span class="string">&quot;Label&quot;</span>, <span class="attribute">ascending</span>=<span class="literal">False</span>).groupby(by=[<span class="string">&#x27;Label&#x27;</span>])</span><br><span class="line"><span class="builtin-name">print</span>(tr_group.size().sort_values(<span class="attribute">ascending</span>=<span class="literal">False</span>))</span><br><span class="line"><span class="builtin-name">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-2. label 갯수 확인</span></span><br><span class="line"><span class="comment">#l_list = []</span></span><br><span class="line">la_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> idx, label <span class="keyword">in</span> enumerate(train_csv[<span class="string">&quot;Label&quot;</span>]):</span><br><span class="line">    <span class="keyword">for</span> one_la <span class="keyword">in</span> label.split(<span class="string">&quot;|&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> one_la <span class="keyword">in</span> la_map.keys(): </span><br><span class="line">            la_map[one_la] = la_map[one_la] + 1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            la_map[one_la] = 0</span><br><span class="line"><span class="keyword">for</span> idx, label <span class="keyword">in</span> enumerate(la_map.keys()):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">&#x27;idx:&#x27;</span>, idx, <span class="string">&#x27;,label count:&#x27;</span>, la_map[label])</span><br><span class="line"><span class="builtin-name">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-3. uniq label 갯수 확인</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&#x27;uniq label:&#x27;</span>, len(la_map.keys()))</span><br></pre></td></tr></table></figure><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><ul><li><a href="https://www.kaggle.com/unkukjeong/notebookd8ea319370">https://www.kaggle.com/unkukjeong/notebookd8ea319370</a>  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/competition/">Competition</category>
      
      
      <category domain="https://jukyellow.github.io/tags/kaggle/">Kaggle</category>
      
      <category domain="https://jukyellow.github.io/tags/%EC%BA%90%EA%B8%80/">캐글</category>
      
      <category domain="https://jukyellow.github.io/tags/kaggle-notebook/">kaggle notebook</category>
      
      <category domain="https://jukyellow.github.io/tags/competition/">competition</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/14/kaggle-notebook-guide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo-Category-2Depth-Display</title>
      <link>https://jukyellow.github.io/2021/03/13/hexo-category-2depth-display/</link>
      <guid>https://jukyellow.github.io/2021/03/13/hexo-category-2depth-display/</guid>
      <pubDate>Sat, 13 Mar 2021 13:58:05 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;내가 사용한 Hexo 테마(BeanTech)에는 카테고리 기능이 없었다. &lt;/li&gt;
&lt;li&gt;이전 포스팅한 기능패치 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>내가 사용한 Hexo 테마(BeanTech)에는 카테고리 기능이 없었다. </li><li>이전 포스팅한 기능패치 포스트(<a href="https://jukyellow.github.io/2021/02/25/bug-patch-tuning/)%EC%97%90%EC%84%9C">https://jukyellow.github.io/2021/02/25/bug-patch-tuning/)에서</a> 참고 페이지에서 힌트를 찾았고  </li><li>그냥 날코딩(감으로) 삽질끝에 원하는 형태 구현 성공!  </li></ul><h1 id="Post-카테고리-작성법"><a href="#Post-카테고리-작성법" class="headerlink" title="Post 카테고리 작성법"></a>Post 카테고리 작성법</h1><ul><li>아래와 같이 Post작성시 헤더에 Parent/Child 그룹으로 구성가능  </li><li>Child가 없을때 Parent로만 구성됨<br><img src="./images/c_g_head.jpg">  </li></ul><h1 id="카테고리-페이지-화면설명"><a href="#카테고리-페이지-화면설명" class="headerlink" title="카테고리 페이지 화면설명"></a>카테고리 페이지 화면설명</h1><ul><li>(2) 상단에는 선택한 Parent 노드 출력  </li><li>(3) Child 노드중에서도 선택한 항목을 최상단에 출력  </li><li>(4) 선택하지 않은 Parent는 하위에 차례로 출력  </li><li>(5) 세모박스 클릭시 노드 닫아두기 가능(닫아둔채로 생성도 가능)<br><img src="./images/category_group_desc.jpg">  </li></ul><h1 id="구현-가이드"><a href="#구현-가이드" class="headerlink" title="구현 가이드?"></a>구현 가이드?</h1><h2 id="ejs-문법-생략"><a href="#ejs-문법-생략" class="headerlink" title="ejs 문법(생략)"></a>ejs 문법(생략)</h2><ul><li>Embedded JavaScript templates : 자바스트립트를 할 줄 알면 대충 읽을수 있음  </li></ul><h2 id="선택된-카테고리-정보"><a href="#선택된-카테고리-정보" class="headerlink" title="선택된 카테고리 정보"></a>선택된 카테고리 정보</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;% page.posts.each(<span class="function"><span class="params">post</span>=&gt;</span>&#123; %&gt;</span><br><span class="line">&lt;% p_category = post.categories; <span class="comment">//선택된 카테고리 %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="전체-카테고리-순회"><a href="#전체-카테고리-순회" class="headerlink" title="전체 카테고리 순회"></a>전체 카테고리 순회</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% site.categories.each(function(p_item)&#123; </span><br><span class="line"><span class="comment">&lt;!-- 선택한 카테고리가 아니면 제외 --&gt;</span></span><br><span class="line">&lt;% if(p_category.data[0]._id != p_item._id || (p_category.data[1]!=undefined &amp;&amp; p_category.data[1].parent != p_item._id))&#123; %&gt;</span><br><span class="line">&lt;% return true; //continue  %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="Parent가-존재하는-Child"><a href="#Parent가-존재하는-Child" class="headerlink" title="Parent가 존재하는 Child"></a>Parent가 존재하는 Child</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span><span class="comment">(c_item.parent!=undefined &amp;&amp; p_item._id == c_item.parent)</span>&#123; <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="현재-선택한-Child-전체-출력"><a href="#현재-선택한-Child-전체-출력" class="headerlink" title="현재 선택한 Child 전체 출력"></a>현재 선택한 Child 전체 출력</h2><ul><li>현재 선택한 카테고리(child) ID와 순회중인 child_id 비교(c_item._id == p_category.data[1]._id)  </li><li>전체 포스트를 순회(&lt;% site.posts.sort(‘date’, -1).forEach(function(it){ %&gt;)하며 선택한 카테고리 id에 속하는 포스트 출력  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% site.posts.sort(<span class="string">&#x27;date&#x27;</span>, -<span class="number">1</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">it</span>)</span>&#123; %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (it.categories.length == <span class="number">2</span> &amp;&amp; it.categories.data[<span class="number">1</span>]._id == c_item._id &amp;&amp; c_item._id == p_category.data[<span class="number">1</span>]._id)&#123; %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (head_2d_cnt==<span class="number">0</span>) &#123; %&gt;</span><br><span class="line">&lt;h4 style=<span class="string">&quot;margin:10px 0 10px;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;archive-ul show&quot;</span> data-toggle=<span class="string">&quot;collapse&quot;</span> id=<span class="string">&quot;&lt;%= c_item.name %&gt;&quot;</span> data-target=<span class="string">&quot;#modal-&lt;%= c_item.name %&gt;&quot;</span>&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; <span class="xml"><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/h4&gt;</span><br><span class="line">&lt;ul style=<span class="string">&quot;margin-bottom: 10px;&quot;</span> id=<span class="string">&quot;modal-&lt;%= c_item.name %&gt;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;collapse in&quot;</span>&gt;</span><br><span class="line">&lt;% site.posts.sort(<span class="string">&#x27;date&#x27;</span>, -<span class="number">1</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">it</span>)</span>&#123; %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (it.categories.length == <span class="number">2</span> &amp;&amp; it.categories.data[<span class="number">1</span>]._id == c_item._id &amp;&amp; it.categories.data[<span class="number">1</span>]._id == p_category.data[<span class="number">1</span>]._id)&#123; %&gt;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;listing-item&quot;</span>&gt;</span><br><span class="line">&lt;%= it.date.format(<span class="string">&#x27;MM-DD&#x27;</span>) %&gt;</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-angle-double-right&quot;</span> aria-hidden=<span class="string">&quot;true&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;&lt;%= config.root %&gt;&lt;%= it.path %&gt;&quot;</span> &lt;% <span class="keyword">if</span> (it.description) &#123; %&gt; title=<span class="string">&quot;&lt;%= it.description %&gt;&quot;</span> &lt;% &#125; %&gt;&gt;&lt;%= it.title %&gt;&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;% ++head_2d_cnt; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//break %&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure><h2 id="child-닫은채-출력"><a href="#child-닫은채-출력" class="headerlink" title="child 닫은채 출력"></a>child 닫은채 출력</h2></li><li>현재 child가 열린채 출력  <blockquote><p>리스트의 하위 목록으로 id를 지정(data-target=”#modal-&lt;%= c_item.name %&gt;)  </p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4 <span class="attribute">style</span>=<span class="string">&quot;margin:10px 0 10px;&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;archive-ul show&quot;</span> <span class="attribute">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attribute">id</span>=<span class="string">&quot;&lt;%= c_item.name %&gt;&quot;</span> <span class="attribute">data-target</span>=<span class="string">&quot;#modal-&lt;%= c_item.name %&gt;&quot;</span>&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; &lt;b <span class="attribute">class</span>=<span class="string">&quot;caret&quot;</span>&gt;&lt;/b&gt;&lt;/h4&gt;</span><br><span class="line">&lt;ul <span class="attribute">style</span>=<span class="string">&quot;margin-bottom: 10px;&quot;</span> <span class="attribute">id</span>=<span class="string">&quot;modal-&lt;%= c_item.name %&gt;&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;collapse in&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li>child를 닫은채로 출력  <blockquote><p>하위 tag에서 class값을 “collapse”로 설정</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4 <span class="attribute">style</span>=<span class="string">&quot;margin:10px 0 10px;&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;archive-ul show&quot;</span> <span class="attribute">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attribute">id</span>=<span class="string">&quot;&lt;%= c_item.name %&gt;&quot;</span> <span class="attribute">data-target</span>=<span class="string">&quot;#modal-&lt;%= c_item.name %&gt;&quot;</span>&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; &lt;b <span class="attribute">class</span>=<span class="string">&quot;caret&quot;</span>&gt;&lt;/b&gt;&lt;/h4&gt;</span><br><span class="line">&lt;ul <span class="attribute">style</span>=<span class="string">&quot;margin-bottom: 10px;&quot;</span> <span class="attribute">id</span>=<span class="string">&quot;modal-&lt;%= c_item.name %&gt;&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;collapse&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1></li><li>적용버전: <a href="https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs">https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs</a>  </li><li>주석버전: <a href="https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category_comment.ejs">https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category_comment.ejs</a>  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/">Blog, PT</category>
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/hexo/">Hexo</category>
      
      
      <category domain="https://jukyellow.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://jukyellow.github.io/tags/category-ejs/">category.ejs</category>
      
      <category domain="https://jukyellow.github.io/tags/hexo-category/">hexo category</category>
      
      <category domain="https://jukyellow.github.io/tags/category-group/">category group</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/13/hexo-category-2depth-display/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Stock-Predict-by-CNN-CandleChart</title>
      <link>https://jukyellow.github.io/2021/03/10/stock-predict-by-cnn-candlechart/</link>
      <guid>https://jukyellow.github.io/2021/03/10/stock-predict-by-cnn-candlechart/</guid>
      <pubDate>Tue, 09 Mar 2021 22:07:14 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;머신러닝 및 딥러닝을 활용해 주식Data를 학습/예측하는 CNN 모델을 구현해보자  &lt;blockquote&gt;
&lt;p&gt;정확하게는 기업별 종가의 상승/하락 예측  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;참고도서: 퀀트 전략을 위한</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>머신러닝 및 딥러닝을 활용해 주식Data를 학습/예측하는 CNN 모델을 구현해보자  <blockquote><p>정확하게는 기업별 종가의 상승/하락 예측  </p></blockquote></li><li>참고도서: 퀀트 전략을 위한 인공지능 트레이닝  </li><li>작업설명: 참고도서의 Python 버전을 Juputer nootebook버전으로 변경</li></ul><h1 id="작업순서"><a href="#작업순서" class="headerlink" title="작업순서"></a>작업순서</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>야후주식-&gt;데이터 다운로드-&gt;<span class="type">CSV</span>저장</span><br><span class="line"><span class="number">2.</span><span class="type">CSV</span>-&gt;데이터별 라벨링</span><br><span class="line"><span class="number">3.</span><span class="type">CSV</span>-&gt;업다운(<span class="number">1</span>,<span class="number">0</span>)-&gt;이미지(캔들) 저장</span><br><span class="line"><span class="number">4.</span>이미지 라벨별 -&gt; 폴더이동, 학습전 <span class="class"><span class="keyword">data</span> 복제</span></span><br><span class="line"><span class="number">5.</span>모델학습 </span><br><span class="line"><span class="number">6.</span>성능 테스트</span><br></pre></td></tr></table></figure><hr><h1 id="주식-데이터-다운로드"><a href="#주식-데이터-다운로드" class="headerlink" title="주식 데이터 다운로드"></a>주식 데이터 다운로드</h1><h2 id="회사별-주식코드-조회"><a href="#회사별-주식코드-조회" class="headerlink" title="회사별 주식코드 조회"></a>회사별 주식코드 조회</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code_df = pd.read_html(<span class="string">&#x27;http://kind.krx.co.kr/corpgeneral/corpList.do?method=download&#x27;</span>, header=<span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">code_df = code_df<span class="string">[[&#x27;회사명&#x27;, &#x27;종목코드&#x27;]]</span></span><br><span class="line">code_df = code_df.<span class="built_in">rename</span>(columns=&#123;<span class="string">&#x27;회사명&#x27;</span>: <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;종목코드&#x27;</span>: <span class="string">&#x27;code&#x27;</span>&#125;)</span><br><span class="line"># 종목코드는 <span class="number">6</span>자리로 구분되기때문에 <span class="number">0</span>을 채워 <span class="number">6</span>자리로 변경</span><br><span class="line">code_df.code = code_df.code.map(<span class="string">&#x27;&#123;:06d&#125;&#x27;</span>.<span class="built_in">format</span>)</span><br><span class="line"><span class="built_in">print</span>(code_df.head())</span><br></pre></td></tr></table></figure><h2 id="기업코드-조회-및-주식데이터-조회"><a href="#기업코드-조회-및-주식데이터-조회" class="headerlink" title="기업코드 조회 및 주식데이터 조회"></a>기업코드 조회 및 주식데이터 조회</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 참고: https:<span class="comment">//wendys.tistory.com/174</span></span><br><span class="line"># 회사명으로 주식 종목 코드를 획득할 수 있도록 하는 함수</span><br><span class="line">def get_code(df, name):</span><br><span class="line">    <span class="keyword">code</span> = df.query(<span class="string">&quot;name==&#x27;&#123;&#125;&#x27;&quot;</span>.format(name))[<span class="string">&#x27;code&#x27;</span>].to_string(index=<span class="literal">False</span>)</span><br><span class="line">    # 위와같이 <span class="keyword">code</span>명을 가져오면 앞에 공백이 붙어있는 상황이 발생하여 앞뒤로 sript() 하여 공백 제거</span><br><span class="line">    <span class="keyword">code</span> = <span class="keyword">code</span>.strip()</span><br><span class="line">    return <span class="keyword">code</span></span><br><span class="line"></span><br><span class="line"># ex) 삼성전자의의 코드를 구해보겠습니다.</span><br><span class="line"><span class="keyword">code</span> = get_code(code_df, <span class="string">&#x27;삼성전자&#x27;</span>)</span><br><span class="line"># yahoo의 주식 데이터 종목은 코스피는 .KS, 코스닥은 .KQ가 붙습니다.</span><br><span class="line"># 삼성전자의 경우 코스피에 상장되어있기때문에 <span class="string">&#x27;종목코드.KS&#x27;</span>로 처리하도록 한다.</span><br><span class="line"><span class="keyword">code</span> = <span class="keyword">code</span> + <span class="string">&#x27;.KS&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;code:&#x27;</span>, <span class="keyword">code</span>)</span><br><span class="line"></span><br><span class="line"># get_data_yahoo API를 통해서 yahho finance의 주식 종목 데이터를 가져온다.</span><br><span class="line">df = pdr.get_data_yahoo(<span class="keyword">code</span>)</span><br><span class="line">print(df.head())</span><br></pre></td></tr></table></figure><p><img src="./images/sotck_code.jpg">  </p><h1 id="데이터-별-라벨링-Up-1-Down-0"><a href="#데이터-별-라벨링-Up-1-Down-0" class="headerlink" title="데이터 별 라벨링(Up-1, Down-0)"></a>데이터 별 라벨링(Up-1, Down-0)</h1><h2 id="주식-데이터-CSV-다운로드"><a href="#주식-데이터-CSV-다운로드" class="headerlink" title="주식 데이터 CSV 다운로드"></a>주식 데이터 CSV 다운로드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_yahoo_data</span>(<span class="params">ticker, start_date, end_date, fname, max_attempt, check_exist</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (os.path.exists(fname) == <span class="literal">True</span>) <span class="keyword">and</span> check_exist:</span><br><span class="line">        print(<span class="string">&quot;file exist&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># remove exist file</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(fname):</span><br><span class="line">            os.remove(fname)</span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_attempt):</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                dat = data.get_data_yahoo(<span class="string">&#x27;&#x27;</span>.join(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    ticker)),  start=start_date, end=end_date)</span><br><span class="line">                dat.to_csv(fname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> attempt &lt; max_attempt - <span class="number">1</span>:</span><br><span class="line">                    print(<span class="string">&#x27;Attempt &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(attempt + <span class="number">1</span>, <span class="built_in">str</span>(e)))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="./images/stock_data_csv.jpg">  </p><h2 id="라벨링"><a href="#라벨링" class="headerlink" title="라벨링"></a>라벨링</h2><ul><li>상승세: 1, 하락세:0 으로 하루데이터별 txt파일 저장  <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for i <span class="meta">in</span><span class="meta"> range(</span>0, l<span class="meta">en(</span>df)):</span><br><span class="line">c = df.iloc[i:i +<span class="meta"> int(</span>seq_len), :]</span><br><span class="line">starting = 0</span><br><span class="line">endvalue = 0</span><br><span class="line"><span class="meta">label</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">if</span> l<span class="meta">en(</span>c) ==<span class="meta"> int(</span>seq_len): </span><br><span class="line"># starting = c[<span class="string">&quot;Close&quot;</span>].iloc[-2]</span><br><span class="line">starting = c[<span class="string">&quot;Open&quot;</span>].iloc[-1]</span><br><span class="line">endvalue = c[<span class="string">&quot;Close&quot;</span>].iloc[-1]</span><br><span class="line"># p<span class="meta">rint(</span>f<span class="string">&#x27;endvalue &#123;endvalue&#125; - starting &#123;starting&#125;&#x27;</span>)</span><br><span class="line">tmp_rtn = endvalue / starting -1</span><br><span class="line"><span class="meta">if</span> tmp_rtn &gt; 0:</span><br><span class="line"><span class="meta">label</span> = 1</span><br><span class="line"><span class="meta">else</span>:</span><br><span class="line"><span class="meta">label</span> = 0</span><br><span class="line"></span><br><span class="line">with<span class="meta"> open(</span><span class="string">&quot;&#123;&#125;_label_&#123;&#125;.txt&quot;</span>.<span class="meta">format</span>(<span class="meta">filename</span>[3][:-4], seq_len), <span class="string">&#x27;a&#x27;</span>) <span class="meta">as</span> the_file:</span><br><span class="line">the_file.write(<span class="string">&quot;&#123;&#125;-&#123;&#125;,&#123;&#125;&quot;</span>.<span class="meta">format</span>(<span class="meta">filename</span>[3][:-4], i, <span class="meta">label</span>))</span><br><span class="line">the_file.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="이미지-Candle-chart-저장"><a href="#이미지-Candle-chart-저장" class="headerlink" title="이미지 Candle chart 저장"></a>이미지 Candle chart 저장</h1><ul><li>주식지표를 이미지로 그리는 라이브러리 사용(candlestick2_ochl)  </li><li><a href="https://github.com/matplotlib/mpl-finance">https://github.com/matplotlib/mpl-finance</a> -&gt; (변경됨) <a href="https://github.com/matplotlib/mplfinance">https://github.com/matplotlib/mplfinance</a>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(df)-<span class="built_in">int</span>(seq_len)):</span><br><span class="line"><span class="comment"># ohlc+volume</span></span><br><span class="line">c = df.iloc[i:i + <span class="built_in">int</span>(seq_len), :] </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c) == <span class="built_in">int</span>(seq_len):</span><br><span class="line">my_dpi = <span class="number">96</span></span><br><span class="line">fig = plt.figure(figsize=(dimension / my_dpi, dimension / my_dpi), dpi=my_dpi)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">candlestick2_ochl(ax1, c[<span class="string">&#x27;Open&#x27;</span>], c[<span class="string">&#x27;Close&#x27;</span>], c[<span class="string">&#x27;High&#x27;</span>],c[<span class="string">&#x27;Low&#x27;</span>],</span><br><span class="line">  width=<span class="number">1</span>,colorup=<span class="string">&#x27;#77d879&#x27;</span>, colordown=<span class="string">&#x27;#db3f3f&#x27;</span>)</span><br><span class="line">ax1.grid(<span class="literal">False</span>)</span><br><span class="line">ax1.set_xticklabels([])</span><br><span class="line">ax1.set_yticklabels([])</span><br><span class="line">ax1.xaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">ax1.yaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">ax1.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the second axis for the volume bar-plot</span></span><br><span class="line"><span class="comment"># Add a seconds axis for the volume overlay</span></span><br><span class="line"><span class="keyword">if</span> use_volume:</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line"><span class="comment"># Plot the volume overlay</span></span><br><span class="line">bc = volume_overlay(ax2, c[<span class="string">&#x27;Open&#x27;</span>], c[<span class="string">&#x27;Close&#x27;</span>], c[<span class="string">&#x27;Volume&#x27;</span>],</span><br><span class="line">colorup=<span class="string">&#x27;#77d879&#x27;</span>, colordown=<span class="string">&#x27;#db3f3f&#x27;</span>, alpha=<span class="number">0.5</span>, width=<span class="number">1</span>)</span><br><span class="line">ax2.add_collection(bc)</span><br><span class="line">ax2.grid(<span class="literal">False</span>)</span><br><span class="line">ax2.set_xticklabels([])</span><br><span class="line">ax2.set_yticklabels([])</span><br><span class="line">ax2.xaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">ax2.yaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">ax2.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">pngfile = <span class="string">&#x27;dataset/&#123;&#125;_&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;-&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">seq_len, dimension, symbol, dataset_type, symbol+<span class="string">&quot;_&quot;</span>+dataset_type, i)</span><br><span class="line">fig.savefig(pngfile, pad_inches=<span class="number">0</span>, transparent=<span class="literal">False</span>)</span><br><span class="line">plt.close(fig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alpha 채널 없애기 위한.</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(pngfile)</span><br><span class="line">img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img.save(pngfile)</span><br></pre></td></tr></table></figure><img src="./images/candle_chart_data.jpg">  </li></ul><h1 id="이미지-라벨별-폴더이동"><a href="#이미지-라벨별-폴더이동" class="headerlink" title="이미지 라벨별 폴더이동"></a>이미지 라벨별 폴더이동</h1><h2 id="데이터별-폴더-이동"><a href="#데이터별-폴더-이동" class="headerlink" title="데이터별 폴더 이동"></a>데이터별 폴더 이동</h2><ul><li>학습할 이미지를 1, 0 폴더로 이동<br><img src="./images/data_folder.jpg">  </li></ul><h2 id="소스1-주식-데이터-다운로드-생성"><a href="#소스1-주식-데이터-다운로드-생성" class="headerlink" title="소스1(주식 데이터 다운로드 생성)"></a>소스1(주식 데이터 다운로드 생성)</h2><ul><li><a href="https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_1_CNN_Candle_Chart_Pred_ImgGen_20210309.ipynb">https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_1_CNN_Candle_Chart_Pred_ImgGen_20210309.ipynb</a>  </li></ul><hr><h1 id="CNN-모델설계"><a href="#CNN-모델설계" class="headerlink" title="CNN 모델설계"></a>CNN 모델설계</h1><ul><li>CNN(conv2d) 모델 설계  <blockquote><p>이미지 데이터에서 label(상승-1, 하락-1)을 예측하는 softmax 모델 구현해보자  </p></blockquote></li></ul><pre><code>def build_model(SHAPE, nb_classes, bn_axis, seed=None):    input_layer = Input(shape=SHAPE)    # (2021/03/10,juk) init -&gt; kernel_initializer, border_mode -&gt; padding    # Step 1    x = Conv2D(32, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(input_layer)    # Step 2 - Pooling    x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x) # (2021/03/10,juk) add padding=&#39;same&#39;        # Step 1    x = Conv2D(48, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;,activation=&#39;relu&#39;)(x)    # Step 2 - Pooling    x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x)    x = Dropout(0.25)(x)        # Step 1    x = Conv2D(64, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(x)    # Step 2 - Pooling    x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x)        # Step 1    x = Conv2D(96, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(x)    # Step 2 - Pooling    x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x)    x = Dropout(0.25)(x)        # Step 3 - Flattening    x = Flatten()(x)        # Step 4 - Full connection    x = Dense(256, activation=&#39;relu&#39;)(x) # (2021/03/10,juk) output_dim=256 -&gt; 256    # Dropout    #x = Dropout(0.5)(x)    x = Dense(2, activation=&#39;softmax&#39;)(x)        model = Model(input_layer, x)    model.summary()    return model</code></pre><p><img src="./images/model.jpg">  </p><h1 id="성능평가"><a href="#성능평가" class="headerlink" title="성능평가"></a>성능평가</h1><ul><li>주식데이터의 예측 성능은 50% 전후를 넘지 않는다고 한다.(아직 납득하지 못함;;)  </li><li>상승/하락을 예측하기 위해선 여러가지 변수(재무재표,경제지표 등등)가 상식적으로 필요하겠지만, 여기서는 주가데이터(candle chart:open/close 등)만으로 학습하였고, 이에대한 결과이다.<br><img src="./images/accuracy.jpg">  </li></ul><h2 id="소스2-학습-예측-성능평가"><a href="#소스2-학습-예측-성능평가" class="headerlink" title="소스2(학습/예측/성능평가)"></a>소스2(학습/예측/성능평가)</h2><ul><li><a href="https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_2_CNN_Candle_Chart_Pred_Model_Training_20210309.ipynb">https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_2_CNN_Candle_Chart_Pred_Model_Training_20210309.ipynb</a>  </li></ul><h1 id="총평"><a href="#총평" class="headerlink" title="총평"></a>총평</h1><ul><li>주가데이터 및 Candle-Chart로 기업 주식의 상승/하락을 예측하는 딥러닝 모델을 구현해 봤다.  </li><li>주가 데이터를 이미지로 활용/전처리하는 방법을 catch하게이는 충분한 예제인거 같다.  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/finance/">Finance</category>
      
      
      <category domain="https://jukyellow.github.io/tags/%EC%A3%BC%EC%8B%9D%EC%98%88%EC%B8%A1/">주식예측</category>
      
      <category domain="https://jukyellow.github.io/tags/cnn/">CNN</category>
      
      <category domain="https://jukyellow.github.io/tags/candle-chart/">Candle Chart</category>
      
      <category domain="https://jukyellow.github.io/tags/keras/">Keras</category>
      
      <category domain="https://jukyellow.github.io/tags/conv2d/">Conv2D</category>
      
      <category domain="https://jukyellow.github.io/tags/stock/">Stock</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/10/stock-predict-by-cnn-candlechart/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux-Command</title>
      <link>https://jukyellow.github.io/2021/03/05/linux-command/</link>
      <guid>https://jukyellow.github.io/2021/03/05/linux-command/</guid>
      <pubDate>Thu, 04 Mar 2021 21:36:43 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;유닉스(솔라리스) OS에서 Java 데몬 서비스를 운영하면서, 주로 사용했던 명령어들을 정리하였다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;리눅스-명령어&quot;&gt;&lt;a href=&quot;#리눅스-명령어&quot; class=&quot;headerlink&quot; title=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>유닉스(솔라리스) OS에서 Java 데몬 서비스를 운영하면서, 주로 사용했던 명령어들을 정리하였다.  </li></ul><h1 id="리눅스-명령어"><a href="#리눅스-명령어" class="headerlink" title="리눅스 명령어"></a>리눅스 명령어</h1><h2 id="OS버전-확인"><a href="#OS버전-확인" class="headerlink" title="OS버전 확인"></a>OS버전 확인</h2><h3 id="솔라리스"><a href="#솔라리스" class="headerlink" title="솔라리스"></a>솔라리스</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 커널 버전확인</span><br><span class="line"><span class="variable">$</span> uname <span class="literal">-a</span> </span><br><span class="line">- 패키지버전 확인</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> /etc/relese</span><br></pre></td></tr></table></figure><h3 id="우분투"><a href="#우분투" class="headerlink" title="우분투"></a>우분투</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 커널 버전확인</span><br><span class="line"><span class="variable">$</span> uname <span class="literal">-a</span></span><br><span class="line">- 패키지버전 확인</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> /etc/issue</span><br></pre></td></tr></table></figure><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 패키지 버전확인</span><br><span class="line">$ cat <span class="regexp">/etc/</span>system-release.</span><br></pre></td></tr></table></figure><br><hr><h2 id="프로세스-목록"><a href="#프로세스-목록" class="headerlink" title="프로세스 목록"></a>프로세스 목록</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 특정프로세스 확인</span><br><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> 문자열 </span><br></pre></td></tr></table></figure><h2 id="조회-명령어"><a href="#조회-명령어" class="headerlink" title="조회 명령어"></a>조회 명령어</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 최신 변경 파일순 상세 조회</span><br><span class="line"><span class="symbol">$</span> ls -alrt</span><br><span class="line">- 하위 디렉토리까지 파일수 세기</span><br><span class="line"><span class="symbol">$</span> ls -lR | wc -l </span><br><span class="line">- 파일내 data 조회</span><br><span class="line"><span class="symbol">$</span> grep -l <span class="string">&quot;문자열&quot;</span> *  <span class="comment">// 모든 파일에서 검색, *제일 많이 씀</span></span><br><span class="line"><span class="symbol">$</span> grep 문자열 파일명    <span class="comment">// 특정 파일에서 문자열이 포함된 라인출력</span></span><br><span class="line"><span class="symbol">$</span> grep -c 문자열 파일명 <span class="comment">// 특정 파일에서 문자열이 포함된 라인의 갯수 출력</span></span><br></pre></td></tr></table></figure><h2 id="IP-PORT-체크"><a href="#IP-PORT-체크" class="headerlink" title="IP/PORT 체크"></a>IP/PORT 체크</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>Listen(점유) port 확인</span><br><span class="line">$ netstat -an | grep 8040</span><br><span class="line"><span class="bullet">- </span>방화벽 오픈여부 확인</span><br><span class="line">$ telnet ip port</span><br><span class="line"><span class="bullet">- </span>도메인의 IP 주소 확인</span><br><span class="line">$ nslookup 도메인명</span><br></pre></td></tr></table></figure><h2 id="스토리지-용량체크"><a href="#스토리지-용량체크" class="headerlink" title="스토리지 용량체크"></a>스토리지 용량체크</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 디스크 잔여 용량(disk free)</span><br><span class="line">$ df -h  <span class="regexp">//</span> 사용자가 보기 쉬운 단위로&#123;KB, MB, GB&#125; 잔여량 표시, *제일 많이 씀</span><br><span class="line">$ df .   <span class="regexp">//</span> 현재 디렉토리가 포함된 파티션의 남은 공간을 보여준다.</span><br><span class="line">$ df -k  <span class="regexp">//</span> Kilobyte 단위로 현재 마운트된 파티션들의 남은 공간을 보여준다.</span><br><span class="line">$ df -F ufs -o i <span class="regexp">//</span> inode 파일갯수 확인(<span class="number">100</span>%차면 파일쓰기등 안됨)</span><br><span class="line"></span><br><span class="line">-디스크 현재 사용량(disk Usage)</span><br><span class="line">$ du -sh *  <span class="regexp">//</span> 현재 디렉토리 사용용량(하위폴더 포함), *제일 많이 씀</span><br><span class="line">$ du -h     <span class="regexp">//</span> 현재 디렉토리의 사용용량(사용자가 보기쉬운값으로)</span><br><span class="line">$ du -k     <span class="regexp">//</span> Kilobyte 사용용량 표시</span><br><span class="line">$ du -s * | awk <span class="string">&#x27;$1 &gt; 100000&#x27;</span>  <span class="regexp">//</span> 특정용량 이상조회!</span><br><span class="line">&gt; 참고: https:<span class="regexp">//</span>ko.wikipedia.org<span class="regexp">/wiki/</span>Du_(%EC%<span class="number">9</span>C%A0%EB%<span class="number">8</span>B%<span class="number">89</span>%EC%<span class="number">8</span>A%A4)</span><br></pre></td></tr></table></figure><h2 id="압축-해제"><a href="#압축-해제" class="headerlink" title="압축/해제"></a>압축/해제</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>파일 압축</span><br><span class="line">$ tar -cvf 파일이름  압축할파일 혹은 /디렉토리</span><br><span class="line"><span class="bullet">- </span>파일 해제(압축풀기)</span><br><span class="line">$ tar -xvf 파일이름</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>jar 파일 리스트 보기</span><br><span class="line">$ jar -tvf jar파일명</span><br><span class="line"><span class="bullet">- </span>jar 파일 압축 풀기</span><br><span class="line">$ jar -xvf jar파일명</span><br></pre></td></tr></table></figure><h2 id="Session-관리"><a href="#Session-관리" class="headerlink" title="Session 관리"></a>Session 관리</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 세션 타임아웃 변경</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TMOUT</span></span><br><span class="line"><span class="built_in">export</span> TMOUT=18000  <span class="comment"># 5시간</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TMOUT</span></span><br></pre></td></tr></table></figure><br><hr><h1 id="리눅스-변천사"><a href="#리눅스-변천사" class="headerlink" title="리눅스 변천사"></a>리눅스 변천사</h1><ul><li>사용버전은 크게 솔라리스와 레드헷, 개발자들은 우분투를 많이 씀  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                               유닉스(커널)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                                                 SunOS(커널)</span></span><br><span class="line"><span class="code">                                                     솔라리스(배포판, 상용)</span></span><br><span class="line"><span class="code">             리눅스(커널)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">     리눅스(무료)           레드헷 (상용)</span></span><br><span class="line"><span class="code">우분투(무료)       페도라        센토스(무료)</span></span><br></pre></td></tr></table></figure><ul><li>이미지 출처: <a href="https://upload.wikimedia.org/wikipedia/commons/b/bc/Unix-like_history.svg">https://upload.wikimedia.org/wikipedia/commons/b/bc/Unix-like_history.svg</a><br><img src="./images/linux_history.jpg"></li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/linux/">Linux</category>
      
      
      <category domain="https://jukyellow.github.io/tags/linux/">linux</category>
      
      <category domain="https://jukyellow.github.io/tags/unix/">unix</category>
      
      <category domain="https://jukyellow.github.io/tags/centos/">centos</category>
      
      <category domain="https://jukyellow.github.io/tags/%EB%AA%85%EB%A0%B9%EC%96%B4/">명령어</category>
      
      <category domain="https://jukyellow.github.io/tags/os%EB%B2%84%EC%A0%84/">OS버전</category>
      
      
      <comments>https://jukyellow.github.io/2021/03/05/linux-command/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo Bug Patch and Tuning</title>
      <link>https://jukyellow.github.io/2021/02/25/bug-patch-tuning/</link>
      <guid>https://jukyellow.github.io/2021/02/25/bug-patch-tuning/</guid>
      <pubDate>Wed, 24 Feb 2021 22:05:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Hexo가 blog 설치/구동에 편하긴한데, 테마를 품질에 따라 튜닝요소가 많이 필요한듯 하다. beantech 테</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>Hexo가 blog 설치/구동에 편하긴한데, 테마를 품질에 따라 튜닝요소가 많이 필요한듯 하다. beantech 테마를 사용중인데, 여기저기 문제가 많아서 소소히 고쳐가며 쓰고 있다.  </li></ul><hr><h1 id="발견된-문제점들-미해결-사항"><a href="#발견된-문제점들-미해결-사항" class="headerlink" title="발견된 문제점들(미해결 사항)"></a>발견된 문제점들(미해결 사항)</h1><ol><li>google analytics 연동오류 : google의 애널리스틱 -&gt; 데이터 스트림방식으로 설정이 바뀐것에 대한 수정작업 필요한듯   <blockquote><p>(2021.03.17) 검색엔진 최적화(SEO) 관련 플러그인 설치/설정후 정상적으로 동작함을 확인</p></blockquote></li><li>방문자 count 문제 : tistory처럼 쉽게 설정할수 없음. 방문자 count 서비스를 찾아서 붙여야하는데, 잘 정리된 레퍼런스를 찾을수 없음  <blockquote><p>Total/today/yesterday 형태가 가장 보기 좋음</p></blockquote></li><li>SNS settings에 medium 연결기능은 없음 : 이것도 기존꺼 참고해서 코딩가능한 부분인가?  </li></ol><hr><h1 id="Blog-설정들"><a href="#Blog-설정들" class="headerlink" title="Blog 설정들"></a>Blog 설정들</h1><ol><li>댓글기능 추가: Disqus(<a href="https://disqus.com/">https://disqus.com/</a>) 가입 및 Hexo 설정(_config.yml)<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus settings</span></span><br><span class="line"><span class="keyword">disqus_username: </span>yelran-s-tech-<span class="keyword">blog </span><span class="comment">#jukyellow.github.io</span></span><br></pre></td></tr></table></figure></li><li>방문자 count 추가: github hits로 갈음  </li><li>구글 검색엔진 노출 설정: sitemap.xml 추가, robots.txt 추가 등<br>(참고 : <a href="https://ivelee.github.io/github/how-to-expose-github-blog-google-search/">https://ivelee.github.io/github/how-to-expose-github-blog-google-search/</a>)  </li></ol><hr><h1 id="해결된이슈-추가기능"><a href="#해결된이슈-추가기능" class="headerlink" title="해결된이슈 + 추가기능"></a>해결된이슈 + 추가기능</h1><ol><li>(bug) deploy 0 byte  </li><li>(bug) side-bar widgets  </li><li>(기능추가) achive 배경화면  </li><li>(기능추가) category 페이지  </li><li>(기능추가) 썸네일</li><li>(기능추가) 방문자 count</li></ol><hr><h2 id="deploy-0-byte"><a href="#deploy-0-byte" class="headerlink" title="deploy 0 byte"></a>deploy 0 byte</h2><ul><li>문제: hexo beantech 테마 적용후, deploy 단계에서 파일 0 bytes 오류 발생    </li><li>해결: hexo 3.9버전이 버전이여서 문제인가 싶어, hexo init으로 새 폴더 생성(hexo 5.3.0버전)+ theme 복제  </li></ul><h2 id="side-bar-widgets"><a href="#side-bar-widgets" class="headerlink" title="side-bar widgets"></a>side-bar widgets</h2><ul><li>문제: side-bar widgets 목록 설정불가  </li><li>해결:</li><li><ol><li>forEach문 오류발생(sidebar widgets 목록을 찾을수 없음)  </li></ol></li><li><ol start="2"><li>theme/beantech/_config.yml에 widgets목록을 직접 기입해서 해결됨, deploy도 성공  </li></ol></li></ul><h2 id="achive-배경화면"><a href="#achive-배경화면" class="headerlink" title="achive 배경화면"></a>achive 배경화면</h2><ul><li>문제: achive, category 페이지 배경화면 누락  </li><li>해결: theme/beantech/layout/_partial/header.ejs 파일 수정 (is_category, is_archive 추가)  </li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">header.intro-header&#123;</span><br><span class="line">&lt;% <span class="keyword">if</span> (is_home() || is_category() || is_archive() ) &#123; %&gt;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">&#x27;&lt;%= config.root + config[&quot;header-img&quot;] %&gt;&#x27;</span>) </span><br><span class="line"><span class="comment">/*config*/</span></span><br><span class="line">&lt;%&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_post())&#123;%&gt;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">&#x27;&lt;%= page[&quot;header-img&quot;] %&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">/*post*/</span></span><br><span class="line">&lt;%&#125; <span class="keyword">else</span> &#123;%&gt;</span><br><span class="line">background-<span class="keyword">image</span>: url(<span class="string">&#x27;&lt;%= config.root + page[&quot;header-img&quot;] %&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">/*page*/</span></span><br><span class="line">&lt;%&#125; %&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="category-페이지"><a href="#category-페이지" class="headerlink" title="category 페이지"></a>category 페이지</h2><ul><li>문제: category 이슈 페이지에 achive 목록으로 나오는 현상  </li><li>해결:  </li><li><ol><li>theme/beantech/layout/category.ejs 추가(archive.ejs 복사)  </li></ol></li><li><ol start="2"><li>category.ejs 수정(category 단위의 목록 출력 + 선택한 category는 최상위에 출력 코딩)  </li></ol></li><li>참고: <a href="https://github.com/wzpan/hexo-theme-freemind/blob/master/layout/categories.ejs">https://github.com/wzpan/hexo-theme-freemind/blob/master/layout/categories.ejs</a>  </li><li>설명: page의 카테고리 id와 site 전체의 카테고리 정보를 비교해서 처리  <blockquote><p>p_category.data[0]._id == item._id  </p></blockquote></li><li>source: <a href="https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs">https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs</a>  </li></ul><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;% if (site.categories.length) &#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;div class=&quot;archive&quot;&gt;</span></span><br><span class="line"><span class="attribute">&lt;% var p_category = null;</span></span><br><span class="line"><span class="attribute">page.posts.each(post=&gt;</span>&#123; </span><br><span class="line">p_category = post.categories;</span><br><span class="line">&#125;) %&gt;</span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;% site.categories.sort(&#x27;name&#x27;).each(function(item)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% if(p_category.data[0]._id == item._id)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;h4 class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= item.name %&gt;</span>&quot; data-target=&quot;#modal-<span class="attribute">&lt;%= item.name %&gt;</span>&quot;&gt; <span class="attribute">&lt;%= item.name %&gt;</span> <span class="attribute">&lt;b class=&quot;caret&quot;&gt;</span><span class="attribute">&lt;/b&gt;</span><span class="attribute">&lt;/h4&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;ul id=&quot;modal-&lt;%= item.name %&gt;</span>&quot; class=&quot;collapse in&quot;&gt;</span><br><span class="line"><span class="attribute">&lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% if (it.categories.length == 1 &amp;&amp; it.categories.data[0]._id == item._id &amp;&amp; p_category.data[0]._id == item._id)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;li class=&quot;listing-item&quot;&gt;</span></span><br><span class="line"><span class="attribute">&lt;%= it.date.format(&#x27;MM-DD&#x27;) %&gt;</span></span><br><span class="line"><span class="attribute">&lt;i class=&quot;fa fa-angle-double-right&quot; aria-hidden=&quot;true&quot;&gt;</span><span class="attribute">&lt;/i&gt;</span></span><br><span class="line"><span class="attribute">&lt;a href=&quot;&lt;%= config.root %&gt;</span><span class="attribute">&lt;%= it.path %&gt;</span>&quot; <span class="attribute">&lt;% if (it.description) &#123; %&gt;</span> title=&quot;<span class="attribute">&lt;%= it.description %&gt;</span>&quot; <span class="attribute">&lt;% &#125; %&gt;</span>&gt;<span class="attribute">&lt;%= it.title %&gt;</span><span class="attribute">&lt;/a&gt;</span></span><br><span class="line"><span class="attribute">&lt;/li&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125;); %&gt;</span></span><br><span class="line">   <span class="attribute">&lt;/ul&gt;</span></span><br><span class="line">   <span class="attribute">&lt;% &#125;); %&gt;</span></span><br><span class="line">   <span class="attribute">&lt;hr align=&quot;left&quot; style=&quot;border: solid 1px gray; width: 55%;&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">&lt;% site.categories.sort(&#x27;name&#x27;).each(function(item)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% if(p_category.data[0]._id != item._id)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;h4 class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= item.name %&gt;</span>&quot; data-target=&quot;#modal-<span class="attribute">&lt;%= item.name %&gt;</span>&quot;&gt; <span class="attribute">&lt;%= item.name %&gt;</span> <span class="attribute">&lt;b class=&quot;caret&quot;&gt;</span><span class="attribute">&lt;/b&gt;</span><span class="attribute">&lt;/h4&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;ul id=&quot;modal-&lt;%= item.name %&gt;</span>&quot; class=&quot;collapse in&quot;&gt;</span><br><span class="line"><span class="attribute">&lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% if (it.categories.length == 1 &amp;&amp; it.categories.data[0]._id == item._id &amp;&amp; p_category.data[0]._id != item._id)&#123; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;li class=&quot;listing-item&quot;&gt;</span></span><br><span class="line"><span class="attribute">&lt;%= it.date.format(&#x27;MM-DD&#x27;) %&gt;</span></span><br><span class="line"><span class="attribute">&lt;i class=&quot;fa fa-angle-double-right&quot; aria-hidden=&quot;true&quot;&gt;</span><span class="attribute">&lt;/i&gt;</span></span><br><span class="line"><span class="attribute">&lt;a href=&quot;&lt;%= config.root %&gt;</span><span class="attribute">&lt;%= it.path %&gt;</span>&quot; <span class="attribute">&lt;% if (it.description) &#123; %&gt;</span> title=&quot;<span class="attribute">&lt;%= it.description %&gt;</span>&quot; <span class="attribute">&lt;% &#125; %&gt;</span>&gt;<span class="attribute">&lt;%= it.title %&gt;</span><span class="attribute">&lt;/a&gt;</span></span><br><span class="line"><span class="attribute">&lt;/li&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125;); %&gt;</span></span><br><span class="line">   <span class="attribute">&lt;/ul&gt;</span></span><br><span class="line">   <span class="attribute">&lt;% &#125;); %&gt;</span></span><br><span class="line">   <span class="attribute">&lt;/ul&gt;</span></span><br><span class="line"><span class="attribute">&lt;/div&gt;</span></span><br><span class="line"><span class="attribute">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="썸네일"><a href="#썸네일" class="headerlink" title="썸네일"></a>썸네일</h2><ul><li>설명 post 목록 썸네일 기능 추가  </li><li>설치 : <a href="https://www.npmjs.com/package/hexo-featured-image">https://www.npmjs.com/package/hexo-featured-image</a>  </li><li>_config.xml 체크사항:  URL path 설정  </li><li>썸네일 이미지 설정: 개별 post 페이지의 헤더에 ‘featured_image’ path 추가  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">featured_image: .<span class="regexp">/images/</span><span class="number">01</span>_init.png</span><br></pre></td></tr></table></figure></li><li>캡쳐<br><img src="./images/%EC%8D%B8%EB%84%A4%EC%9D%BC.jpg" alt="width:600px height:400px">  </li><li>post 목록(index.ejs) 튜닝 : 썸네일이 있을때는 div를 두개로(가로분할) 구성  </li></ul><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="perl"> page.posts.each(function(post)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (!post.featured_image)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-preview&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left; width: 100%;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%</span></span></span><span class="perl">- config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;&lt;%</span></span></span><span class="perl">- post.path </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- post.title || <span class="string">&quot;Untitled&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;post-subtitle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- post.subtitle || <span class="string">&quot;&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-content-preview&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- <span class="keyword">truncate</span>(strip_html(post.content), &#123;<span class="keyword">length</span>: <span class="number">140</span>, omission: <span class="string">&#x27;...&#x27;</span>&#125;) </span><span class="xml">%&gt;...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (config.home_posts_tag)&#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 10px 0;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Posted by &lt;%</span><span class="perl">- post.author || config.author </span><span class="xml">%&gt; on</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="perl"> post.date.format(config.date_format) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> post.tags.forEach(function(tag)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;tags/#&lt;%=</span></span></span><span class="perl"> tag.name </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> tag.name </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span>&lt;%=</span><span class="perl"> tag.name </span><span class="xml">%&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125;) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">&#125; <span class="keyword">else</span> &#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Posted by &lt;%</span><span class="perl">- post.author || config.author </span><span class="xml">%&gt; on</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="perl"> post.date.format(config.date_format) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">&#125;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125;<span class="keyword">else</span>&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-preview&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left; width: 70%; padding:5px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%</span></span></span><span class="perl">- config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;&lt;%</span></span></span><span class="perl">- post.path </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- post.title || <span class="string">&quot;Untitled&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;post-subtitle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- post.subtitle || <span class="string">&quot;&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-content-preview&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;%</span></span><span class="perl">- <span class="keyword">truncate</span>(strip_html(post.content), &#123;<span class="keyword">length</span>: <span class="number">100</span>, omission: <span class="string">&#x27;...&#x27;</span>&#125;) </span><span class="xml"><span class="comment">%&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">- <span class="keyword">truncate</span>(strip_html(post.content), &#123;<span class="keyword">length</span>: <span class="number">85</span>, omission: <span class="string">&#x27;...&#x27;</span>&#125;) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (config.home_posts_tag)&#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 10px 0;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Posted by &lt;%</span><span class="perl">- post.author || config.author </span><span class="xml">%&gt; on</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="perl"> post.date.format(config.date_format) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> post.tags.forEach(function(tag)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;tags/#&lt;%=</span></span></span><span class="perl"> tag.name </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> tag.name </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span>&lt;%=</span><span class="perl"> tag.name </span><span class="xml">%&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125;) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">&#125; <span class="keyword">else</span> &#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Posted by &lt;%</span><span class="perl">- post.author || config.author </span><span class="xml">%&gt; on</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="perl"> post.date.format(config.date_format) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">&#125;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-preview&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left; width: 30%; padding:5px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (post.featured_image)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%</span></span></span><span class="perl">- post.featured_image </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125; </span><span class="xml">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125;); </span><span class="xml">%&gt;</span></span><br></pre></td></tr></table></figure><h2 id="방문자-count"><a href="#방문자-count" class="headerlink" title="방문자 count"></a>방문자 count</h2><ul><li><ol><li>busuanzi_container : sidebar.ejs  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line"> [ 조회수:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">   | 방문자수:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> ]</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>github hits : footer.ejs  <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://hits.dwyl.com/</span></span></span><span class="template-variable">&#123;&#123; <span class="name">site.url</span> | remove_first: <span class="string">&#x27;https://&#x27;</span> | remove_first: <span class="string">&#x27;http://&#x27;</span> &#125;&#125;</span><span class="template-variable">&#123;&#123; <span class="name">page.url</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://hits.dwyl.com/</span></span></span><span class="template-variable">&#123;&#123; <span class="name">site.url</span> | remove_first: <span class="string">&#x27;https://&#x27;</span> | remove_first: <span class="string">&#x27;http://&#x27;</span> &#125;&#125;</span><span class="template-variable">&#123;&#123; <span class="name">page.url</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">.svg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/">Blog, PT</category>
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/hexo/">Hexo</category>
      
      
      <category domain="https://jukyellow.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://jukyellow.github.io/tags/hexo-bug-patch/">hexo bug patch</category>
      
      <category domain="https://jukyellow.github.io/tags/category-ejs/">category.ejs</category>
      
      
      <comments>https://jukyellow.github.io/2021/02/25/bug-patch-tuning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker-Install-Root-Dir-Modify</title>
      <link>https://jukyellow.github.io/2021/02/23/docker-install-root-dir-modify/</link>
      <guid>https://jukyellow.github.io/2021/02/23/docker-install-root-dir-modify/</guid>
      <pubDate>Mon, 22 Feb 2021 20:30:53 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;설치환경&quot;&gt;&lt;a href=&quot;#설치환경&quot; class=&quot;headerlink&quot; title=&quot;설치환경&quot;&gt;&lt;/a&gt;설치환경&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;OS: CentOS 7.2&lt;/li&gt;
&lt;li&gt;Docker: Docker Comunity 20.0.3?&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="설치환경"><a href="#설치환경" class="headerlink" title="설치환경"></a>설치환경</h1><ul><li>OS: CentOS 7.2</li><li>Docker: Docker Comunity 20.0.3?</li></ul><h1 id="Docker-재-설치"><a href="#Docker-재-설치" class="headerlink" title="Docker (재)설치"></a>Docker (재)설치</h1><ul><li>도커가 이미 설치된 경우, 관련 파일/패키지를 삭제하고 재설치를 수행해야 한다. </li></ul><h2 id="컨테이너-종료-이미지-삭제"><a href="#컨테이너-종료-이미지-삭제" class="headerlink" title="컨테이너 종료, 이미지 삭제"></a>컨테이너 종료, 이미지 삭제</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">q</span>)</span></span><br><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> -<span class="params">q</span>)</span></span><br><span class="line">docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure><h2 id="서비스-중지"><a href="#서비스-중지" class="headerlink" title="서비스 중지"></a>서비스 중지</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">stop</span> docker.service</span><br><span class="line">systemctl <span class="built_in">stop</span> containerd.service</span><br></pre></td></tr></table></figure><h2 id="설치된-패키지-확인-삭제"><a href="#설치된-패키지-확인-삭제" class="headerlink" title="설치된 패키지 확인/삭제"></a>설치된 패키지 확인/삭제</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> list installed | grep docker</span><br><span class="line"><span class="attribute">yum</span> erase containerd.io.x<span class="number">86</span>_<span class="number">6</span></span><br><span class="line"><span class="attribute">yum</span> erase docker-ce.x<span class="number">86</span>_<span class="number">64</span></span><br><span class="line"><span class="attribute">yum</span> erase docker-ce-cli.x<span class="number">86</span>_<span class="number">64</span></span><br></pre></td></tr></table></figure><h2 id="디렉토리-파일-삭제"><a href="#디렉토리-파일-삭제" class="headerlink" title="디렉토리/파일 삭제"></a>디렉토리/파일 삭제</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rm</span> -rf  /<span class="keyword">var</span>/lib/docker</span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">var</span>/<span class="keyword">run</span></span><br><span class="line"><span class="keyword">rm</span> docker.sock docker.pid</span><br></pre></td></tr></table></figure><h2 id="도커-재설치-확인"><a href="#도커-재설치-확인" class="headerlink" title="도커 재설치/확인"></a>도커 재설치/확인</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span>-y docker-ce</span><br><span class="line">yum list <span class="keyword">installed </span><span class="title">| grep docker</span></span><br></pre></td></tr></table></figure><h2 id="도커-enable-start"><a href="#도커-enable-start" class="headerlink" title="도커 enable/start"></a>도커 enable/start</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> docker.service</span><br><span class="line">systemctl <span class="builtin-name">enable</span> containerd.service</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl status docker.service</span><br><span class="line">service status docker</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://cloudrain21.com/remove-docker-forcely-and-reinstall">http://cloudrain21.com/remove-docker-forcely-and-reinstall</a>   </li></ul><hr><h1 id="Root-Dir-변경"><a href="#Root-Dir-변경" class="headerlink" title="Root Dir 변경"></a>Root Dir 변경</h1><ul><li>Docker 설치를 Root 계정으로 하는경우, Docker image 저장경로가 /var/lib/docker에 잡힘에 따라 Root 공간을 점유하게 된다.  </li><li>Root 공간은 OS 영역이므로 스토리지 관리에 문제(공간부족 등)가 되고, 보통은 별도의 디스크를 마운트하여 할당하는 것이 좋다.  </li></ul><h2 id="설치-경로-확인"><a href="#설치-경로-확인" class="headerlink" title="설치 경로 확인:"></a>설치 경로 확인:</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/var/lib/docker</span></span><br><span class="line"><span class="keyword">ls</span> -F</span><br></pre></td></tr></table></figure><h2 id="현재-dir-root-확인"><a href="#현재-dir-root-확인" class="headerlink" title="현재 dir-root 확인"></a>현재 dir-root 확인</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep <span class="string">&quot;Docker Root Dir&quot;</span></span><br><span class="line">docker <span class="keyword">volume</span><span class="bash"> inspect my-vol</span></span><br><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure><h2 id="스크립트-파일변경"><a href="#스크립트-파일변경" class="headerlink" title="스크립트 파일변경"></a>스크립트 파일변경</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line">( - ExecStart로 시작하는 라인 끝에 --data-root=<span class="regexp">/docker/</span>root/dir 추가)</span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>bin<span class="regexp">/dockerd -H fd:/</span><span class="regexp">/ --containerd=/</span>run<span class="regexp">/containerd/</span>containerd.sock --data-root=<span class="regexp">/home/</span>docker</span><br></pre></td></tr></table></figure><h2 id="데이터-복사-재시작"><a href="#데이터-복사-재시작" class="headerlink" title="데이터 복사/재시작"></a>데이터 복사/재시작</h2><ul><li>Docker Root 디렉토리의 데이타  복사 또는 이동 및 Docker 서비스 재시작  </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl stop docker</span><br><span class="line">mkdir <span class="regexp">/home/</span>docker2</span><br><span class="line">cp -rp <span class="regexp">/var/</span>lib<span class="regexp">/docker /</span>home/    =&gt; 파일 복사</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="Root-변경확인"><a href="#Root-변경확인" class="headerlink" title="Root 변경확인"></a>Root 변경확인</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep <span class="string">&quot;Docker Root Dir&quot;</span></span><br><span class="line">(Docker Root Dir: <span class="regexp">/home/</span><span class="function"><span class="params">docker</span>    =&gt;</span> 변경된 root dir )</span><br><span class="line">docker volume inspect my-vol</span><br></pre></td></tr></table></figure><h2 id="실행권한-추가"><a href="#실행권한-추가" class="headerlink" title="실행권한 추가"></a>실행권한 추가</h2><ul><li>root권한으로 설치된경우, user권한에 실행권한 추가  </li><li>참고: <a href="https://github.com/occidere/TIL/issues/116">https://github.com/occidere/TIL/issues/116</a>  </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">666</span> <span class="regexp">/var/</span>run/docker.sock</span><br></pre></td></tr></table></figure><h2 id="참고-1"><a href="#참고-1" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://fliedcat.tistory.com/113">https://fliedcat.tistory.com/113</a>  </li></ul><hr>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/msa/">MSA</category>
      
      <category domain="https://jukyellow.github.io/categories/msa/docker/">Docker</category>
      
      
      <category domain="https://jukyellow.github.io/tags/docker/">docker</category>
      
      <category domain="https://jukyellow.github.io/tags/docker-install/">docker install</category>
      
      <category domain="https://jukyellow.github.io/tags/root-dir/">Root Dir</category>
      
      <category domain="https://jukyellow.github.io/tags/centos/">Centos</category>
      
      <category domain="https://jukyellow.github.io/tags/msa/">MSA</category>
      
      
      <comments>https://jukyellow.github.io/2021/02/23/docker-install-root-dir-modify/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OCR-Tesseract-Demo</title>
      <link>https://jukyellow.github.io/2021/02/20/OCR-Tesseract-Demo/</link>
      <guid>https://jukyellow.github.io/2021/02/20/OCR-Tesseract-Demo/</guid>
      <pubDate>Fri, 19 Feb 2021 21:59:11 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;현재 인터넷에 공개되 있는 ‘Tesseract 데모 페이지 구현 블로그’는 구 레파지토리(google) 버전이라 실행이 불가능하다. 하여 최신 레파지토리(github) 기준으로 동작가능한 데모 페이지로 오류를 수정하여 내용을 공개한다.</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>현재 인터넷에 공개되 있는 ‘Tesseract 데모 페이지 구현 블로그’는 구 레파지토리(google) 버전이라 실행이 불가능하다. 하여 최신 레파지토리(github) 기준으로 동작가능한 데모 페이지로 오류를 수정하여 내용을 공개한다.  </li><li>또한, 기존 블로그는 모바일 환경을 지원하지 않지만, 모바일에서 카메라 캡처-&gt;Text추출 가능한 소스로 업데이트 예정이다.  </li></ul><h1 id="실행화면"><a href="#실행화면" class="headerlink" title="실행화면"></a>실행화면</h1><ul><li>초기화면<br><img src="./images/01_init.png">  </li><li>Text 추출 결과<br><img src="./images/02_Text%EC%B6%94%EC%B6%9C.png">  </li></ul><h1 id="tesseract-다운로드"><a href="#tesseract-다운로드" class="headerlink" title="tesseract 다운로드"></a>tesseract 다운로드</h1><h2 id="도커-이미지-다운로드"><a href="#도커-이미지-다운로드" class="headerlink" title="도커 이미지 다운로드"></a>도커 이미지 다운로드</h2><ul><li><a href="https://tesseract-ocr.github.io/">https://tesseract-ocr.github.io/</a>  </li><li><a href="https://tesseract-ocr.github.io/tessdoc/">https://tesseract-ocr.github.io/tessdoc/</a>  </li><li><a href="https://tesseract-ocr.github.io/tessdoc/4.0-Docker-Containers.html">https://tesseract-ocr.github.io/tessdoc/4.0-Docker-Containers.html</a>  <blockquote><p>Tesseract 4 OCR Runtime Environment - Docker Container<br>(레파지토리) <a href="https://github.com/tesseract-shadow/tesseract-ocr-re">https://github.com/tesseract-shadow/tesseract-ocr-re</a>  </p></blockquote></li></ul><h2 id="image-다운로드"><a href="#image-다운로드" class="headerlink" title="image 다운로드"></a>image 다운로드</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull tesseractshadow/tesseract<span class="number">4</span>re .</span><br></pre></td></tr></table></figure><h2 id="샘플-테스트-복사-amp-실행"><a href="#샘플-테스트-복사-amp-실행" class="headerlink" title="샘플 테스트 (복사 &amp; 실행)"></a>샘플 테스트 (복사 &amp; 실행)</h2><ul><li>test.sh  </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp .<span class="regexp">/ocr-files/</span>phototest.tif t4re:<span class="regexp">/home/</span>work<span class="regexp">/$TASK_TMP_DIR/</span></span><br><span class="line">docker exec -it t4re <span class="regexp">/bin/</span>bash -c <span class="string">&quot;mkdir -p ./$TASK_TMP_DIR/out/; cd ./$TASK_TMP_DIR/out/; tesseract ../phototest.tif phototest -l eng --psm 1 --oem 3 txt pdf hocr&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="데모-페이지"><a href="#데모-페이지" class="headerlink" title="데모 페이지"></a>데모 페이지</h1><h2 id="pytesseract-설치-및-Flask-웹서버-연동"><a href="#pytesseract-설치-및-Flask-웹서버-연동" class="headerlink" title="pytesseract 설치 및 Flask 웹서버 연동"></a>pytesseract 설치 및 Flask 웹서버 연동</h2><ul><li>출처: <a href="https://realpython.com/setting-up-a-simple-ocr-server/#web-server-time">https://realpython.com/setting-up-a-simple-ocr-server/#web-server-time</a> </li><li>(source) <a href="https://github.com/ybur-yug/python_ocr_tutorial">https://github.com/ybur-yug/python_ocr_tutorial</a>  <blockquote><p>(tesseract 설치/구동까지는 1번참고, 해당 자료는 tesseract 구레파지토리를 사용하는 옛날버전인듯)<br>pytesseract를 설치하는 부분은 1)번 + 별도 dockerfile로 구성  </p></blockquote></li></ul><hr><h2 id="도커실행"><a href="#도커실행" class="headerlink" title="도커실행"></a>도커실행</h2><ul><li>5000: ocr tesseract flask port  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -t ocr_tesseract_web .</span><br><span class="line"><span class="attribute">docker</span> run --name ocr_tesseract_web --publish <span class="number">5000</span>:<span class="number">5000</span> -it ocr_tesseract_web</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><ul><li>tesseractshadow/tesseract4re + Flask 웹서버 구동을 위해서 일부 오류수정 추가<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start with a base image</span></span><br><span class="line"><span class="comment"># FROM ubuntu:14.04</span></span><br><span class="line"><span class="keyword">FROM</span> tesseractshadow/tesseract4re</span><br><span class="line"></span><br><span class="line"><span class="comment">## install dependencies</span></span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> update</span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> install -y liblog4cplus-dev</span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> install -y python python-pip</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">RUN</span> ls</span><br><span class="line">WORKDIR /</span><br><span class="line"><span class="builtin-name">RUN</span> ls</span><br><span class="line"><span class="builtin-name">ADD</span> requirements.txt /</span><br><span class="line"><span class="builtin-name">RUN</span> pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># pil error : decoder jpeg not available</span></span><br><span class="line"><span class="builtin-name">RUN</span> pip uninstall Pillow -y</span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> install -y libjpeg-dev</span><br><span class="line"><span class="builtin-name">RUN</span> pip install Pillow</span><br><span class="line"></span><br><span class="line"><span class="comment"># update working directories</span></span><br><span class="line"><span class="builtin-name">ADD</span> ./flask_server /flask_server</span><br><span class="line">WORKDIR /flask_server</span><br><span class="line"></span><br><span class="line"><span class="comment">#EXPOSE 5000</span></span><br><span class="line">CMD [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Flask-app"><a href="#Flask-app" class="headerlink" title="Flask app"></a>Flask app</h2><ul><li>app.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/v&#123;&#125;/ocr&#x27;</span>.<span class="built_in">format</span>(<span class="params">_VERSION</span>), methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ocr</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;--call ocr processing --&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.files.get(<span class="string">&quot;image&quot;</span>):</span><br><span class="line">            print(<span class="string">&#x27;--read image --&#x27;</span>)</span><br><span class="line">            <span class="comment"># read the image in PIL format</span></span><br><span class="line">            image = request.files[<span class="string">&quot;image&quot;</span>].read()</span><br><span class="line">            image = Image.<span class="built_in">open</span>(io.BytesIO(image))</span><br><span class="line">            print(<span class="string">&#x27;RECV:&#x27;</span>, image.<span class="built_in">format</span>, image.size, image.mode)</span><br><span class="line"></span><br><span class="line">            output = process_image2(image)</span><br><span class="line">            print(<span class="string">&#x27;output:&#x27;</span>, output)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;output&quot;</span>: output&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;only .jpg files, please&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;ocr processing exception:&#x27;</span> , e)</span><br><span class="line">        print(traceback.format_exc())</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li><li>javascript  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#results&quot;</span>).hide()</span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_mobile)&#123;</span><br><span class="line"><span class="keyword">var</span> cFile = getCaptureImg();</span><br><span class="line">data.append(<span class="string">&quot;image&quot;</span>, cFile);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> file = $(<span class="string">&#x27;#file&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">data.append(<span class="string">&quot;image&quot;</span>, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;/v1/ocr&quot;</span>,</span><br><span class="line">  enctype: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span><br><span class="line">  data : data,</span><br><span class="line">  processData: <span class="literal">false</span>,</span><br><span class="line">  contentType: <span class="literal">false</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,</span><br><span class="line">  timeout: <span class="number">600000</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">$(<span class="string">&quot;#post-form&quot;</span>).hide()</span><br><span class="line">$(<span class="string">&quot;#retry&quot;</span>).show()</span><br><span class="line">$(<span class="string">&quot;#results&quot;</span>).show()</span><br><span class="line">$(<span class="string">&quot;#results-data&quot;</span>).html(<span class="string">&quot;&lt;div class=&#x27;well&#x27;&gt;&quot;</span>+result[<span class="string">&quot;output&quot;</span>]+<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><ul><li>전체 source: <a href="https://github.com/jukyellow/artificial-intelligence-study/tree/master/13_ImageProcessing/OCR(Tesseract)/pytessract_dockerfike">https://github.com/jukyellow/artificial-intelligence-study/tree/master/13_ImageProcessing/OCR(Tesseract)/pytessract_dockerfike</a>  </li><li>참고: PC 크롬환경에서 테스트완료, 모바일 환경은 테스트 못함(소스는 모바일(아이폰) 환경도 가능한 모듈로 구성)  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/image/">Image</category>
      
      
      <category domain="https://jukyellow.github.io/tags/ocr/">OCR</category>
      
      <category domain="https://jukyellow.github.io/tags/tesseract/">Tesseract</category>
      
      <category domain="https://jukyellow.github.io/tags/docker/">Docker</category>
      
      <category domain="https://jukyellow.github.io/tags/text%EC%B6%94%EC%B6%9C/">Text추출</category>
      
      
      <comments>https://jukyellow.github.io/2021/02/20/OCR-Tesseract-Demo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Face Check in 구현</title>
      <link>https://jukyellow.github.io/2021/02/19/Face-Check-In/</link>
      <guid>https://jukyellow.github.io/2021/02/19/Face-Check-In/</guid>
      <pubDate>Fri, 19 Feb 2021 03:42:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;안면인식 + 동작감지 = (비접촉) 출석체크  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;안면인식과 동작감지 기술을 이용하여 비 접</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>안면인식 + 동작감지 = (비접촉) 출석체크  </li></ul><p>안면인식과 동작감지 기술을 이용하여 비 접촉 출석체크 시스템을 구현해보았다. 오픈소스의 대중화와 머신러닝 프레임워크의 발전, 그리고 AI 민주화시대를 앞당기는 기업들의 노력으로, 앞으로 이런 수준의 서비스들은 추가적인 연구없이 현재 공개되어 있는 기술들로 충분히 구현 가능하다.  </p><p><img src="./images/01_%EC%B6%9C%EC%84%9D%EC%B2%B4%ED%81%AC.jpg" alt="width:800px height:500px">  </p><h2 id="Teachable-Machine-2-0"><a href="#Teachable-Machine-2-0" class="headerlink" title="Teachable Machine(2.0)"></a>Teachable Machine(2.0)</h2><ul><li><a href="https://teachablemachine.withgoogle.com/">https://teachablemachine.withgoogle.com/</a>  </li><li>일반인도 머신러닝 서비스를 만들수 있는 플랫폼을 제공(2019년/Google)  </li><li>학습~배포(json/api)<br><img src="./images/02_google_teachableMachine.jpg" alt="width:450px height:250px">  </li><li>관련 파생 서비스: 관상가양반(<a href="https://yourface.ga/">https://yourface.ga/</a>)  </li><li>단점: 세세한 튜닝(최적화) 불가능-&gt;안면인식 성능 낮음</li></ul><h2 id="안면인식-OpenSource"><a href="#안면인식-OpenSource" class="headerlink" title="안면인식 OpenSource"></a>안면인식 OpenSource</h2><h3 id="FaceApi"><a href="#FaceApi" class="headerlink" title="FaceApi"></a>FaceApi</h3><ul><li>Javascript 구현체(tensorflow.js + node.js)  </li><li>github : <a href="https://github.com/justadudewhohacks/face-api.js/">https://github.com/justadudewhohacks/face-api.js/</a><br><img src="./images/03_face-api.jpg" alt="width:500px height:300px">  </li><li>다양한 기능(face-tracking, recognition…) 내장하고 있지만 속도가 느림  </li></ul><h3 id="Facenet-2015년-Google"><a href="#Facenet-2015년-Google" class="headerlink" title="Facenet(2015년/Google)"></a>Facenet(2015년/Google)</h3><ul><li>Facenet: Embedding(백만명 사진 학습&gt;특징 임베딩 벡터&gt;98~99%)<br><img src="./images/04_Facenet.jpg" alt="width:300px height:200px">  </li><li>블로그: <a href="https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/">https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/</a>  </li><li>논문: <a href="https://arxiv.org/abs/1503.03832">https://arxiv.org/abs/1503.03832</a>  </li></ul><hr><h1 id="시스템-구성-파이프라인"><a href="#시스템-구성-파이프라인" class="headerlink" title="시스템 구성/파이프라인"></a>시스템 구성/파이프라인</h1><ul><li><p>시스템 구성<br><img src="./images/05_Pipeline.jpg">  </p></li><li><p>작업절차: 안면인식(keras)&gt;동작인식(Teach)&gt;두 모델 기능병합(HTML5,JS)&gt;배포(Docker/Flask)  </p></li></ul><p>Face Model(안면인식)은 Google Colab환경에서 학습하였다. Facenet 모델의 Embedding 벡터와 지도학습 방법인 서포터벡터머신(SVC)을 사용하여 얼굴예측 모델을 구현하여, 구현체를 H5(Keras 모델), Pickle(Skit-Learn 모델) 파일 형태로 출력한다. Pose Model(동작감지)은 Google Teachable Machine을 사용하여 팔의 동작(O,X,캡쳐,대기)을 학습시키고, 모델을 Json형태로 출력하였다.  </p><p>서버에 설치는 Docker(Container 가상화 기술)를 사용하여 환경을 구성하였다. Docker를 사용하면 OS환경(Windows/Linux등)과 상관없이 개발환경 그대로 배포환경으로 옮길 수 있다는 장점이 있다. 또한 필요한 Library를 시스템 설치 없이 다운로드후 구동방식으로 동작 시킬 수 있기 때문에 개발 생산성도 좋아진다. Docker를 빌드하기 위해서는 yml 파일이나 Dockerfile이 필요한데, 여기서는 Dockerfile을 사용하였고 Base 이미지로 Keras(Tensorflow)/Flask 이미지 서버를 구성한 뒤, ML(Machine Learning) 출력파일을 올려서 컨테이너를 구성하였다.  </p><p>배포서버의 도메인이 Https(Nginx) 로 구성되어 있어서, 웹서버(Nginx) 뒤에 WAS서버 형태로 시스템을 붙여야 했다. Flask ML 서버를 port를 분리하여 구동 시키고 Nginx의 URI 라우팅(Location 설정)을 수정하여 구성하였다. Flask는 Python 웹 애플리케이션 서버 역할을 하면서 동시에 웹서버(html, js 배포) 역할을 할 수 있기때문에, Flask 서버에 Html/Javascript 소스도 배포하였다. 이렇게 해서 화면단의 요청을 ML서버가 직접 받도록 구성하여 CORS(Cross-Origin Resource Sharing) 및 Https/Http 혼용사용 문제도 해결하였다. </p><hr><h1 id="활용기술"><a href="#활용기술" class="headerlink" title="활용기술"></a>활용기술</h1><h2 id="안면인식-FaceNet"><a href="#안면인식-FaceNet" class="headerlink" title="안면인식(FaceNet)"></a>안면인식(FaceNet)</h2><ul><li>사진(150명) Agumentation &gt; Embedding(특징벡터) &gt; SVC(서포트벡터머신) &gt; 예측<br><img src="./images/06_agumentation.jpg"></li></ul><p>Facenet 모델은 기존 사람의 얼굴 윤곽을 잡아서 학습시키는 랜드마크 방식과 다르게, 사람 얼굴의 특정정보를 Embedding이라는 기하학적 공간에 사상시켜 훈련한데에 있다. 유명인 백만명을 학습시켜 Anchor 본인과 같은 사람의 사진이면 Positive로 보고 유클리드 공간상의 거리를 좁히고, 다른 사람이면 Negative로 보고 거리를 멀게 하도록 학습시키는 방식으로 Embedding 벡터를 훈련시켰다. 이 모델의 Embedding벡터를 사람 얼굴 특징 벡터로 Pre-Training 벡터로 사용하여 새로운 얼굴들을 추가 학습시키는 방법으로 활용 가능하다.</p><h3 id="학습-절차"><a href="#학습-절차" class="headerlink" title="학습 절차"></a>학습 절차</h3><p><img src="./images/10_Train_process.jpg"></p><p>머신러닝 학습을 위해서는 여러 장의 사진이 필요하기 때문에, 사진을 복제/변형하여 추가(20장)로 훈련 데이터를 확보한다. 이후 얼굴추출 Library를 이용하여 좌표에 해당하는 이미지를 Slice한다. 이후 오픈소스로 존재하는 Facenet Embedding 벡터를 통과시켜 얼굴 특징점을 수치화한 Vector를 추출한 뒤 본격적인 학습과정이 수행된다. 수치 데이터의 분포가 일정하게 정규화 한 뒤, 사람별로 Labeling 과정을 거치고 지도학습 모델중의 하나인 서포터벡터머신(SVC)으로 훈련시켰다.<br>학습모델은 변경이 가능하고 딥러닝 모델을 사용하려면 사진 개수가 충분히 많아야 한다. 훈련Set 사진으로 학습시킨 뒤 테스트Set 사진으로 성능을 보면 99.8%로 거의 100%가깝게 나왔지만, 실제로 웹캠으로 시연을 해보면, 성능이 다소 떨어지는데 이는 사진이 현재 얼굴과 많이 다르거나, 웹캠의 해상도 조명등의 영향 때문인데 조명으로 인한 성능차이는 전처리 기능을 보강하여 추가 개선 가능하다.</p><ul><li>Embedding Feacture 추출소스(Facenet-&gt;predict)<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_embedding(model, face_pixels):</span><br><span class="line">    face_pixels = face_pixels.astype(&#x27;float32&#x27;)</span><br><span class="line">    <span class="built_in">mean</span>, <span class="built_in">std</span> = face_pixels.<span class="built_in">mean</span>(), face_pixels.<span class="built_in">std</span>()</span><br><span class="line">    face_pixels = (face_pixels - <span class="built_in">mean</span>) / <span class="built_in">std</span></span><br><span class="line">    samples = expand_dims(face_pixels, axis=<span class="number">0</span>)</span><br><span class="line">    yhat = model.predict(samples) # make prediction to <span class="built_in">get</span> embedding</span><br><span class="line">    <span class="built_in">return</span> yhat[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="동작감지-Teachable-Machine"><a href="#동작감지-Teachable-Machine" class="headerlink" title="동작감지(Teachable Machine)"></a>동작감지(Teachable Machine)</h2><p><img src="./images/07_Teach_pose.jpg" alt="width:900px height:500px">  </p><p>구글 Teachable Machine은 이미지/사운드/동작 이 세가지 학습방식을 지원하고, 일반인도 충분히 머신러닝 훈련 및 배포까지 가능한 환경을 제공하는 플랫폼이다. 이를 이용하여 팔의 동작 (O,X,캡쳐-두팔,대기)을 학습시켰다. 해당 플랫폼을 활용하여 만든 서비스 사례 중 하나가 ‘관상가 양반’(<a href="https://yourface.ga/)%EC%9D%B4%EB%8B%A4">https://yourface.ga/)이다</a>.<br>바야흐로 AI 민주화(democratization) 시대가 열리고 있다. 우리도 이제 발맞춰 민첩하게 대응하고 목표를 추진할 수 있는 인력양성이 필요한 시점인 것 같다.</p><hr><h2 id="Docker-Flask-Web-ML-Server"><a href="#Docker-Flask-Web-ML-Server" class="headerlink" title="Docker(Flask Web/ML Server)"></a>Docker(Flask Web/ML Server)</h2><p><img src="./images/08_docker.jpg" alt="width:600px height:200px"> <img src="./images/9_docker_layer.jpg" alt="width:400px height:200px">   </p><ul><li>docker base img: <a href="https://hub.docker.com/repository/docker/jukyellow/keras-flask-img">https://hub.docker.com/repository/docker/jukyellow/keras-flask-img</a>  </li><li>base img 생성방법: <a href="https://github.com/jukyellow/artificial-intelligence-study/tree/master/11_Serving/keras-flask-img">https://github.com/jukyellow/artificial-intelligence-study/tree/master/11_Serving/keras-flask-img</a>  </li></ul><hr><h1 id="레퍼런스"><a href="#레퍼런스" class="headerlink" title="레퍼런스"></a>레퍼런스</h1><ul><li>(Facenet + SVC 이미지 학습) <a href="https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/">https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/</a>  </li><li>(Facenet Pre-Train model) <a href="https://www.microsoft.com/en-us/research/project/ms-celeb-1m-challenge-recognizing-one-million-celebrities-real-world/">https://www.microsoft.com/en-us/research/project/ms-celeb-1m-challenge-recognizing-one-million-celebrities-real-world/</a>  </li><li>(Jquery MultiPart-Form Ajax) <a href="https://mkyong.com/jquery/jquery-ajax-submit-a-multipart-form/">https://mkyong.com/jquery/jquery-ajax-submit-a-multipart-form/</a>  </li><li>(Google Teachable Machine) <a href="https://teachablemachine.withgoogle.com/">https://teachablemachine.withgoogle.com/</a>  </li></ul>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/ai/">AI</category>
      
      <category domain="https://jukyellow.github.io/categories/ai/image/">Image</category>
      
      
      <category domain="https://jukyellow.github.io/tags/facenet/">facenet</category>
      
      <category domain="https://jukyellow.github.io/tags/google-teachable-machine/">google teachable machine</category>
      
      <category domain="https://jukyellow.github.io/tags/face-recognition/">face recognition</category>
      
      <category domain="https://jukyellow.github.io/tags/docker/">docker</category>
      
      
      <comments>https://jukyellow.github.io/2021/02/19/Face-Check-In/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Markdown 기반 Slide Show &#39;Marp&#39; 사용법</title>
      <link>https://jukyellow.github.io/2021/01/31/marp-guide/</link>
      <guid>https://jukyellow.github.io/2021/01/31/marp-guide/</guid>
      <pubDate>Sun, 31 Jan 2021 00:45:44 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;https-marp-slide-guide-netlify-app&quot;&gt;&lt;a href=&quot;#https-marp-slide-guide-netlify-app&quot; class=&quot;headerlink&quot; title=&quot;https://marp-slide-guide</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="https-marp-slide-guide-netlify-app"><a href="#https-marp-slide-guide-netlify-app" class="headerlink" title="https://marp-slide-guide.netlify.app/"></a><a href="https://marp-slide-guide.netlify.app/">https://marp-slide-guide.netlify.app/</a></h2>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/">Blog, PT</category>
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/presentation/">Presentation</category>
      
      
      <category domain="https://jukyellow.github.io/tags/marp/">marp</category>
      
      <category domain="https://jukyellow.github.io/tags/markdown/">markdown</category>
      
      <category domain="https://jukyellow.github.io/tags/slide/">slide</category>
      
      
      <comments>https://jukyellow.github.io/2021/01/31/marp-guide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo Blog 스킨 적용 및 Github 배포</title>
      <link>https://jukyellow.github.io/2021/01/30/hexo-install-guide-1/</link>
      <guid>https://jukyellow.github.io/2021/01/30/hexo-install-guide-1/</guid>
      <pubDate>Fri, 29 Jan 2021 22:00:45 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-git-npm-windows-설치&quot;&gt;&lt;a href=&quot;#1-git-npm-windows-설치&quot; class=&quot;headerlink&quot; title=&quot;1. git/npm windows 설치&quot;&gt;&lt;/a&gt;1. git/npm windows 설치&lt;/h2</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-git-npm-windows-설치"><a href="#1-git-npm-windows-설치" class="headerlink" title="1. git/npm windows 설치"></a>1. git/npm windows 설치</h2><blockquote><p>git과 npm이 사전에 설치되어 있어야한다.  </p></blockquote><h2 id="2-hexo-기본-가이드-한글로-번역됨"><a href="#2-hexo-기본-가이드-한글로-번역됨" class="headerlink" title="2. hexo (기본 가이드 한글로 번역됨)"></a>2. hexo (기본 가이드 한글로 번역됨)</h2><ul><li><a href="https://hexo.io/ko/docs/">https://hexo.io/ko/docs/</a>   <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g <span class="comment">--save</span></span><br><span class="line">npm install hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-테마-repo-clone"><a href="#3-테마-repo-clone" class="headerlink" title="3. 테마 repo clone"></a>3. 테마 repo clone</h2><ul><li><a href="https://github.com/YenYuHsuan/hexo-theme-beantech">https://github.com/YenYuHsuan/hexo-theme-beantech</a>  </li></ul><h2 id="4-경로진입"><a href="#4-경로진입" class="headerlink" title="4. 경로진입"></a>4. 경로진입</h2><blockquote><p>cd hexo-beantech  </p></blockquote><h2 id="5-node-패키지-설치"><a href="#5-node-패키지-설치" class="headerlink" title="5. node 패키지 설치"></a>5. node 패키지 설치</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h2 id="6-실행"><a href="#6-실행" class="headerlink" title="6. 실행"></a>6. 실행</h2><ul><li>hexo serve  </li><li>localhost:4000 확인  </li></ul><h2 id="7-category-기능-활성화"><a href="#7-category-기능-활성화" class="headerlink" title="7. category 기능 활성화:"></a>7. category 기능 활성화:</h2><ul><li>_config.yml &gt; widgets 부분 category 주석풀기 + post에 작성시 category 추가  </li></ul><h2 id="8-기초세팅"><a href="#8-기초세팅" class="headerlink" title="8. 기초세팅"></a>8. 기초세팅</h2><ul><li>_config.yml 설정(<a href="https://github.com/YenYuHsuan/hexo-theme-beantech">https://github.com/YenYuHsuan/hexo-theme-beantech</a> 따라하기)  </li></ul><h2 id="9-post작성-및-배포"><a href="#9-post작성-및-배포" class="headerlink" title="9. post작성 및 배포"></a>9. post작성 및 배포</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> post <span class="string">&quot;&lt;post name&gt;&quot;</span> # you can change post to another layout <span class="keyword">if</span> you want</span><br><span class="line">hexo clean &amp;&amp; hexo <span class="keyword">generate</span> # <span class="keyword">generate</span> the <span class="keyword">static</span> file</span><br><span class="line">hexo server # run hexo in <span class="keyword">local</span> environment</span><br><span class="line">hexo deploy # hexo will push the <span class="keyword">static</span> files automatically into the specific branch(gh-pages) of your repo!</span><br></pre></td></tr></table></figure><h2 id="10-버그-패치"><a href="#10-버그-패치" class="headerlink" title="10. 버그 패치"></a>10. 버그 패치</h2><ol><li>hexo beantech 테마 적용후, deploy 단계에서 파일 0 bytes 오류 발생  </li><li>hexo 3.9버전이 버전이여서 문제인가 싶어, hexo init으로 새 폴더 생성(hexo 5.3.0버전)+ theme 복제  </li><li>forEach문 오류발생(sidebar widgets 목록을 찾을수 없음)  </li><li>theme/beantech/_config.yml에 widgets목록을 직접 기입해서 해결됨, deploy도 성공  </li></ol><h2 id="11-tag-category-입력"><a href="#11-tag-category-입력" class="headerlink" title="11. tag/category 입력"></a>11. tag/category 입력</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- Hexo</span><br><span class="line">- Blog</span><br><span class="line"># or tags: [&quot;A&quot;, &quot;B&quot;]</span><br><span class="line">catagories:</span><br><span class="line">- Hexo</span><br></pre></td></tr></table></figure><h2 id="12-무료-이미지-다운로드"><a href="#12-무료-이미지-다운로드" class="headerlink" title="12. 무료 이미지 다운로드"></a>12. 무료 이미지 다운로드</h2><blockquote><p><a href="https://www.freepik.com/">https://www.freepik.com</a><br><a href="https://pixabay.com/">https://pixabay.com/</a><br><a href="https://unsplash.com/">https://unsplash.com/</a><br><br></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/">Blog, PT</category>
      
      <category domain="https://jukyellow.github.io/categories/blog-pt/hexo/">Hexo</category>
      
      
      <category domain="https://jukyellow.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://jukyellow.github.io/tags/hexo-blog/">hexo blog</category>
      
      <category domain="https://jukyellow.github.io/tags/hexo-install/">hexo install</category>
      
      
      <comments>https://jukyellow.github.io/2021/01/30/hexo-install-guide-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://jukyellow.github.io/2021/01/29/hello-world/</link>
      <guid>https://jukyellow.github.io/2021/01/29/hello-world/</guid>
      <pubDate>Thu, 28 Jan 2021 21:45:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://jukyellow.github.io/2021/01/29/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
