{"meta":{"title":"옐란 기술 블로그","subtitle":"<나를 위한 기록 노트>","description":"yelan`s tech blog","author":"옐란","url":"https://jukyellow.github.io","root":"/"},"pages":[{"title":"","date":"2021-01-31T14:31:08.149Z","updated":"2021-01-31T14:31:08.149Z","comments":true,"path":"404.html","permalink":"https://jukyellow.github.io/404.html","excerpt":"","text":""},{"title":"About Me","date":"2021-01-31T01:43:33.000Z","updated":"2021-02-26T13:18:27.643Z","comments":true,"path":"about/index.html","permalink":"https://jukyellow.github.io/about/index.html","excerpt":"","text":"상상하라 그러면 이루어질 것이다!좌우명 뜻이 있는 곳에 길이 있다. 감명깊게 읽은 책 내가 단단해지는 새벽공부, 쳔년의내공 결국 해내는 사람들의 원칙 인생 짤 스위스 스카이 다이빙 히스토리 (2021.01) github 블로그 Open"},{"title":"Archives","date":"2021-01-31T11:49:56.000Z","updated":"2021-02-26T08:47:29.708Z","comments":false,"path":"archive/index.html","permalink":"https://jukyellow.github.io/archive/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-02-26T08:46:44.847Z","updated":"2021-02-26T08:46:44.847Z","comments":true,"path":"tags/index.html","permalink":"https://jukyellow.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-02-26T08:35:28.492Z","updated":"2021-02-26T08:35:28.492Z","comments":true,"path":"gtag.js","permalink":"https://jukyellow.github.io/gtag.js","excerpt":"","text":"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-EG1ZFE1SGM');"},{"title":"","date":"2021-02-26T00:02:41.421Z","updated":"2021-02-26T00:00:07.857Z","comments":true,"path":"google54fa4245b3962d7d.html","permalink":"https://jukyellow.github.io/google54fa4245b3962d7d.html","excerpt":"","text":"google-site-verification: google54fa4245b3962d7d.html"}],"posts":[{"title":"Kaggle-Notebook-Guide","slug":"kaggle-notebook-guide","date":"2021-03-14T04:36:50.000Z","updated":"2021-03-14T06:21:52.453Z","comments":true,"path":"2021/03/14/kaggle-notebook-guide/","link":"","permalink":"https://jukyellow.github.io/2021/03/14/kaggle-notebook-guide/","excerpt":"","text":"Kaggle 사이트에서 머신러닝 개발환경(jupyter notebook)을 제공한다. Kaggle competition에서 제공하는 DataSet은 100G가 넘어가는게 많은데, 캐글 개발환경에서 바로 DataSet 접근이 가능하다. 1주 최대 38시간 GPU 사용이 가능하고, 주마다 Reset된다.(notebook생성할때 어디서 봤는데 다시 못찾겠다;;) 메뉴진입 회원가입 -&gt; Competion -&gt; Summit Predictions -&gt; New Notebook 제약사항 확인일반 제약사항 GPU: 1주 38시간(1주일단위 초기화되어 다시 38시간 사용가능) 20G까지 쓰기 가능 You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using “Save &amp; Run All” GPU 설정 Data 추가 Data접근예제코드 제공 이미 아래와 같이 예제코드 제공하고, 파일count 체크하는 로직을 추가하였다. 123456789101112131415161718192021222324252627# This Python 3 environment comes with many helpful analytics libraries installed# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python# For example, here&#x27;s several helpful packages to loadimport numpy as np # linear algebraimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)# Input data files are available in the read-only &quot;../input/&quot; directory# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directoryimport osf_cnt_map = &#123;&#125;for dirname, _, filenames in os.walk(&#x27;/kaggle/input&#x27;): f_cnt_map[dirname] = len(filenames)# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; # You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current sessionfor idx, d_name in enumerate(f_cnt_map.keys()): print(&quot;idx:&quot;, idx, &quot; ,d_name:&quot;, d_name, &quot; ,f_cnt:&quot;, f_cnt_map[d_name])print(&quot;---&quot;) prn_cnt = 0for dirname, _, filenames in os.walk(&#x27;/kaggle/input&#x27;): for filename in filenames: print(os.path.join(dirname, filename)) prn_cnt + = 1 if(prn_cnt&gt;=30) break 샘플파일 보기123456- 1. 파일명 확인!ls /kaggle/input/hpa-single-cell-image-classification/test/- 2. 이미지 보기# 이미지 샘플(test-set) 보기!img_array = np.array(Image.open(&#x27;/kaggle/input/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_blue.png&#x27;))plt.imshow(img_array) Label 정보 확인1234567891011121314151617181920#1-1. 그룹별 갯수 확인tr_group = train_csv.sort_values(by=&quot;Label&quot;, ascending=False).groupby(by=[&#x27;Label&#x27;])print(tr_group.size().sort_values(ascending=False))print()#1-2. label 갯수 확인#l_list = []la_map = &#123;&#125;for idx, label in enumerate(train_csv[&quot;Label&quot;]): for one_la in label.split(&quot;|&quot;): if one_la in la_map.keys(): la_map[one_la] = la_map[one_la] + 1 else: la_map[one_la] = 0for idx, label in enumerate(la_map.keys()): print(&#x27;idx:&#x27;, idx, &#x27;,label count:&#x27;, la_map[label])print()#1-3. uniq label 갯수 확인print(&#x27;uniq label:&#x27;, len(la_map.keys()))","categories":[{"name":"AI","slug":"ai","permalink":"https://jukyellow.github.io/categories/ai/"},{"name":"Kaggle","slug":"ai/kaggle","permalink":"https://jukyellow.github.io/categories/ai/kaggle/"}],"tags":[{"name":"Kaggle","slug":"kaggle","permalink":"https://jukyellow.github.io/tags/kaggle/"},{"name":"캐글","slug":"캐글","permalink":"https://jukyellow.github.io/tags/%EC%BA%90%EA%B8%80/"},{"name":"kaggle notebook","slug":"kaggle-notebook","permalink":"https://jukyellow.github.io/tags/kaggle-notebook/"},{"name":"competition","slug":"competition","permalink":"https://jukyellow.github.io/tags/competition/"}]},{"title":"Hexo-Category-2Depth-Display","slug":"hexo-category-2depth-display","date":"2021-03-13T13:58:05.000Z","updated":"2021-03-13T14:49:39.503Z","comments":true,"path":"2021/03/13/hexo-category-2depth-display/","link":"","permalink":"https://jukyellow.github.io/2021/03/13/hexo-category-2depth-display/","excerpt":"","text":"개요 내가 사용한 Hexo 테마(BeanTech)에는 카테고리 기능이 없었다. 이전 포스팅한 기능패치 포스트(https://jukyellow.github.io/2021/02/25/bug-patch-tuning/)에서 참고 페이지에서 힌트를 찾았고 그냥 날코딩(감으로) 삽질끝에 원하는 형태 구현 성공! Post 카테고리 작성법 아래와 같이 Post작성시 헤더에 Parent/Child 그룹으로 구성가능 Child가 없을때 Parent로만 구성됨 카테고리 페이지 화면설명 (2) 상단에는 선택한 Parent 노드 출력 (3) Child 노드중에서도 선택한 항목을 최상단에 출력 (4) 선택하지 않은 Parent는 하위에 차례로 출력 (5) 세모박스 클릭시 노드 닫아두기 가능(닫아둔채로 생성도 가능) 구현 가이드?ejs 문법(생략) Embedded JavaScript templates : 자바스트립트를 할 줄 알면 대충 읽을수 있음 선택된 카테고리 정보12&lt;% page.posts.each(post=&gt;&#123; %&gt; &lt;% p_category = post.categories; //선택된 카테고리 %&gt; 전체 카테고리 순회12345&lt;% site.categories.each(function(p_item)&#123; &lt;!-- 선택한 카테고리가 아니면 제외 --&gt; &lt;% if(p_category.data[0]._id != p_item._id || (p_category.data[1]!=undefined &amp;&amp; p_category.data[1].parent != p_item._id))&#123; %&gt; &lt;% return true; //continue %&gt; &lt;% &#125; %&gt; Parent가 존재하는 Child1&lt;% if(c_item.parent!=undefined &amp;&amp; p_item._id == c_item.parent)&#123; %&gt; 현재 선택한 Child 전체 출력 현재 선택한 카테고리(child) ID와 순회중인 child_id 비교(c_item._id == p_category.data[1]._id) 전체 포스트를 순회(&lt;% site.posts.sort(‘date’, -1).forEach(function(it){ %&gt;)하며 선택한 카테고리 id에 속하는 포스트 출력 1234567891011121314151617181920&lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt; &lt;% if (it.categories.length == 2 &amp;&amp; it.categories.data[1]._id == c_item._id &amp;&amp; c_item._id == p_category.data[1]._id)&#123; %&gt; &lt;% if (head_2d_cnt==0) &#123; %&gt; &lt;h4 style=&quot;margin:10px 0 10px;&quot; class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= c_item.name %&gt;&quot; data-target=&quot;#modal-&lt;%= c_item.name %&gt;&quot;&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/h4&gt; &lt;ul style=&quot;margin-bottom: 10px;&quot; id=&quot;modal-&lt;%= c_item.name %&gt;&quot; class=&quot;collapse in&quot;&gt; &lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt; &lt;% if (it.categories.length == 2 &amp;&amp; it.categories.data[1]._id == c_item._id &amp;&amp; it.categories.data[1]._id == p_category.data[1]._id)&#123; %&gt; &lt;li class=&quot;listing-item&quot;&gt; &lt;%= it.date.format(&#x27;MM-DD&#x27;) %&gt; &lt;i class=&quot;fa fa-angle-double-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;a href=&quot;&lt;%= config.root %&gt;&lt;%= it.path %&gt;&quot; &lt;% if (it.description) &#123; %&gt; title=&quot;&lt;%= it.description %&gt;&quot; &lt;% &#125; %&gt;&gt;&lt;%= it.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;% &#125;); %&gt; &lt;/ul&gt; &lt;% ++head_2d_cnt; %&gt; &lt;% &#125; %&gt; &lt;% return false; //break %&gt; &lt;% &#125; %&gt;&lt;% &#125;); %&gt; child 닫은채 출력 현재 child가 열린채 출력 리스트의 하위 목록으로 id를 지정(data-target=”#modal-&lt;%= c_item.name %&gt;) 12&lt;h4 style=&quot;margin:10px 0 10px;&quot; class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= c_item.name %&gt;&quot; data-target=&quot;#modal-&lt;%= c_item.name %&gt;&quot;&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/h4&gt;&lt;ul style=&quot;margin-bottom: 10px;&quot; id=&quot;modal-&lt;%= c_item.name %&gt;&quot; class=&quot;collapse in&quot;&gt; child를 닫은채로 출력 하위 tag에서 class값을 “collapse”로 설정 12&lt;h4 style=&quot;margin:10px 0 10px;&quot; class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= c_item.name %&gt;&quot; data-target=&quot;#modal-&lt;%= c_item.name %&gt;&quot;&gt; &amp;nbsp;&amp;nbsp;&lt;%= c_item.name %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/h4&gt;&lt;ul style=&quot;margin-bottom: 10px;&quot; id=&quot;modal-&lt;%= c_item.name %&gt;&quot; class=&quot;collapse&quot;&gt; Source 적용버전: https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs 주석버전: https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category_comment.ejs","categories":[{"name":"Blog, PT","slug":"blog-pt","permalink":"https://jukyellow.github.io/categories/blog-pt/"},{"name":"Hexo","slug":"blog-pt/hexo","permalink":"https://jukyellow.github.io/categories/blog-pt/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jukyellow.github.io/tags/hexo/"},{"name":"category.ejs","slug":"category-ejs","permalink":"https://jukyellow.github.io/tags/category-ejs/"},{"name":"hexo category","slug":"hexo-category","permalink":"https://jukyellow.github.io/tags/hexo-category/"},{"name":"category group","slug":"category-group","permalink":"https://jukyellow.github.io/tags/category-group/"}]},{"title":"Stock-Predict-by-CNN-CandleChart","slug":"stock-predict-by-cnn-candlechart","date":"2021-03-09T22:07:14.000Z","updated":"2021-03-14T00:32:18.794Z","comments":true,"path":"2021/03/10/stock-predict-by-cnn-candlechart/","link":"","permalink":"https://jukyellow.github.io/2021/03/10/stock-predict-by-cnn-candlechart/","excerpt":"","text":"머신러닝 및 딥러닝을 활용해 주식Data를 학습/예측하는 CNN 모델을 구현해보자 정확하게는 기업별 종가의 상승/하락 예측 참고도서: 퀀트 전략을 위한 인공지능 트레이닝 작업설명: 참고도서의 Python 버전을 Juputer nootebook버전으로 변경 작업순서1234561.야후주식-&gt;데이터 다운로드-&gt;CSV저장2.CSV-&gt;데이터별 라벨링3.CSV-&gt;업다운(1,0)-&gt;이미지(캔들) 저장4.이미지 라벨별 -&gt; 폴더이동, 학습전 data 복제5.모델학습 6.성능 테스트 주식 데이터 다운로드회사별 주식코드 조회123456code_df = pd.read_html(&#x27;http://kind.krx.co.kr/corpgeneral/corpList.do?method=download&#x27;, header=0)[0]code_df = code_df[[&#x27;회사명&#x27;, &#x27;종목코드&#x27;]]code_df = code_df.rename(columns=&#123;&#x27;회사명&#x27;: &#x27;name&#x27;, &#x27;종목코드&#x27;: &#x27;code&#x27;&#125;)# 종목코드는 6자리로 구분되기때문에 0을 채워 6자리로 변경code_df.code = code_df.code.map(&#x27;&#123;:06d&#125;&#x27;.format)print(code_df.head()) 기업코드 조회 및 주식데이터 조회123456789101112131415161718# 참고: https://wendys.tistory.com/174# 회사명으로 주식 종목 코드를 획득할 수 있도록 하는 함수def get_code(df, name): code = df.query(&quot;name==&#x27;&#123;&#125;&#x27;&quot;.format(name))[&#x27;code&#x27;].to_string(index=False) # 위와같이 code명을 가져오면 앞에 공백이 붙어있는 상황이 발생하여 앞뒤로 sript() 하여 공백 제거 code = code.strip() return code# ex) 삼성전자의의 코드를 구해보겠습니다.code = get_code(code_df, &#x27;삼성전자&#x27;)# yahoo의 주식 데이터 종목은 코스피는 .KS, 코스닥은 .KQ가 붙습니다.# 삼성전자의 경우 코스피에 상장되어있기때문에 &#x27;종목코드.KS&#x27;로 처리하도록 한다.code = code + &#x27;.KS&#x27;print(&#x27;code:&#x27;, code)# get_data_yahoo API를 통해서 yahho finance의 주식 종목 데이터를 가져온다.df = pdr.get_data_yahoo(code)print(df.head()) 데이터 별 라벨링(Up-1, Down-0)주식 데이터 CSV 다운로드1234567891011121314151617181920def fetch_yahoo_data(ticker, start_date, end_date, fname, max_attempt, check_exist): if (os.path.exists(fname) == True) and check_exist: print(&quot;file exist&quot;) else: # remove exist file if os.path.exists(fname): os.remove(fname) for attempt in range(max_attempt): time.sleep(2) try: dat = data.get_data_yahoo(&#x27;&#x27;.join(&quot;&#123;&#125;&quot;.format( ticker)), start=start_date, end=end_date) dat.to_csv(fname) except Exception as e: if attempt &lt; max_attempt - 1: print(&#x27;Attempt &#123;&#125;: &#123;&#125;&#x27;.format(attempt + 1, str(e))) else: raise else: break 라벨링 상승세: 1, 하락세:0 으로 하루데이터별 txt파일 저장 1234567891011121314151617181920for i in range(0, len(df)): c = df.iloc[i:i + int(seq_len), :] starting = 0 endvalue = 0 label = &quot;&quot; if len(c) == int(seq_len): # starting = c[&quot;Close&quot;].iloc[-2] starting = c[&quot;Open&quot;].iloc[-1] endvalue = c[&quot;Close&quot;].iloc[-1] # print(f&#x27;endvalue &#123;endvalue&#125; - starting &#123;starting&#125;&#x27;) tmp_rtn = endvalue / starting -1 if tmp_rtn &gt; 0: label = 1 else: label = 0 with open(&quot;&#123;&#125;_label_&#123;&#125;.txt&quot;.format(filename[3][:-4], seq_len), &#x27;a&#x27;) as the_file: the_file.write(&quot;&#123;&#125;-&#123;&#125;,&#123;&#125;&quot;.format(filename[3][:-4], i, label)) the_file.write(&quot;\\n&quot;) 이미지 Candle chart 저장 주식지표를 이미지로 그리는 라이브러리 사용(candlestick2_ochl) https://github.com/matplotlib/mpl-finance -&gt; (변경됨) https://github.com/matplotlib/mplfinance 1234567891011121314151617181920212223242526272829303132333435363738394041for i in range(0, len(df)-int(seq_len)): # ohlc+volume c = df.iloc[i:i + int(seq_len), :] if len(c) == int(seq_len): my_dpi = 96 fig = plt.figure(figsize=(dimension / my_dpi, dimension / my_dpi), dpi=my_dpi) ax1 = fig.add_subplot(1, 1, 1) candlestick2_ochl(ax1, c[&#x27;Open&#x27;], c[&#x27;Close&#x27;], c[&#x27;High&#x27;],c[&#x27;Low&#x27;], width=1,colorup=&#x27;#77d879&#x27;, colordown=&#x27;#db3f3f&#x27;) ax1.grid(False) ax1.set_xticklabels([]) ax1.set_yticklabels([]) ax1.xaxis.set_visible(False) ax1.yaxis.set_visible(False) ax1.axis(&#x27;off&#x27;) # create the second axis for the volume bar-plot # Add a seconds axis for the volume overlay if use_volume: ax2 = ax1.twinx() # Plot the volume overlay bc = volume_overlay(ax2, c[&#x27;Open&#x27;], c[&#x27;Close&#x27;], c[&#x27;Volume&#x27;], colorup=&#x27;#77d879&#x27;, colordown=&#x27;#db3f3f&#x27;, alpha=0.5, width=1) ax2.add_collection(bc) ax2.grid(False) ax2.set_xticklabels([]) ax2.set_yticklabels([]) ax2.xaxis.set_visible(False) ax2.yaxis.set_visible(False) ax2.axis(&#x27;off&#x27;) pngfile = &#x27;dataset/&#123;&#125;_&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;-&#123;&#125;.png&#x27;.format( seq_len, dimension, symbol, dataset_type, symbol+&quot;_&quot;+dataset_type, i) fig.savefig(pngfile, pad_inches=0, transparent=False) plt.close(fig) # Alpha 채널 없애기 위한. from PIL import Image img = Image.open(pngfile) img = img.convert(&#x27;RGB&#x27;) img.save(pngfile) 이미지 라벨별 폴더이동데이터별 폴더 이동 학습할 이미지를 1, 0 폴더로 이동 소스1(주식 데이터 다운로드 생성) https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_1_CNN_Candle_Chart_Pred_ImgGen_20210309.ipynb CNN 모델설계 CNN(conv2d) 모델 설계 이미지 데이터에서 label(상승-1, 하락-1)을 예측하는 softmax 모델 구현해보자 def build_model(SHAPE, nb_classes, bn_axis, seed=None): input_layer = Input(shape=SHAPE) # (2021/03/10,juk) init -&gt; kernel_initializer, border_mode -&gt; padding # Step 1 x = Conv2D(32, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(input_layer) # Step 2 - Pooling x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x) # (2021/03/10,juk) add padding=&#39;same&#39; # Step 1 x = Conv2D(48, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;,activation=&#39;relu&#39;)(x) # Step 2 - Pooling x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x) x = Dropout(0.25)(x) # Step 1 x = Conv2D(64, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(x) # Step 2 - Pooling x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x) # Step 1 x = Conv2D(96, 3, 3, kernel_initializer =&#39;glorot_uniform&#39;, padding=&#39;same&#39;, activation=&#39;relu&#39;)(x) # Step 2 - Pooling x = MaxPooling2D(pool_size=(2, 2), padding=&#39;same&#39;)(x) x = Dropout(0.25)(x) # Step 3 - Flattening x = Flatten()(x) # Step 4 - Full connection x = Dense(256, activation=&#39;relu&#39;)(x) # (2021/03/10,juk) output_dim=256 -&gt; 256 # Dropout #x = Dropout(0.5)(x) x = Dense(2, activation=&#39;softmax&#39;)(x) model = Model(input_layer, x) model.summary() return model 성능평가 주식데이터의 예측 성능은 50% 전후를 넘지 않는다고 한다.(아직 납득하지 못함;;) 상승/하락을 예측하기 위해선 여러가지 변수(재무재표,경제지표 등등)가 상식적으로 필요하겠지만, 여기서는 주가데이터(candle chart:open/close 등)만으로 학습하였고, 이에대한 결과이다. 소스2(학습/예측/성능평가) https://github.com/jukyellow/machine-learning-finance/blob/main/00_%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/02_%EC%95%8C%EA%B3%A0%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%94%A9/08_1_2_CNN_Candle_Chart_Pred_Model_Training_20210309.ipynb 총평 주가데이터 및 Candle-Chart로 기업 주식의 상승/하락을 예측하는 딥러닝 모델을 구현해 봤다. 주가 데이터를 이미지로 활용/전처리하는 방법을 catch하게이는 충분한 예제인거 같다.","categories":[{"name":"AI","slug":"ai","permalink":"https://jukyellow.github.io/categories/ai/"},{"name":"Finance","slug":"ai/finance","permalink":"https://jukyellow.github.io/categories/ai/finance/"}],"tags":[{"name":"주식예측","slug":"주식예측","permalink":"https://jukyellow.github.io/tags/%EC%A3%BC%EC%8B%9D%EC%98%88%EC%B8%A1/"},{"name":"CNN","slug":"cnn","permalink":"https://jukyellow.github.io/tags/cnn/"},{"name":"Candle Chart","slug":"candle-chart","permalink":"https://jukyellow.github.io/tags/candle-chart/"},{"name":"Keras","slug":"keras","permalink":"https://jukyellow.github.io/tags/keras/"},{"name":"Conv2D","slug":"conv2d","permalink":"https://jukyellow.github.io/tags/conv2d/"},{"name":"Stock","slug":"stock","permalink":"https://jukyellow.github.io/tags/stock/"}]},{"title":"Linux-Command","slug":"linux-command","date":"2021-03-04T21:36:43.000Z","updated":"2021-03-04T22:18:45.786Z","comments":true,"path":"2021/03/05/linux-command/","link":"","permalink":"https://jukyellow.github.io/2021/03/05/linux-command/","excerpt":"","text":"유닉스(솔라리스) OS에서 Java 데몬 서비스를 운영하면서, 주로 사용했던 명령어들을 정리하였다. 리눅스 명령어OS버전 확인솔라리스1234- 커널 버전확인$ uname -a - 패키지버전 확인$ cat /etc/relese 우분투1234- 커널 버전확인$ uname -a- 패키지버전 확인$ cat /etc/issue CentOS12- 패키지 버전확인$ cat /etc/system-release. 프로세스 목록12- 특정프로세스 확인ps -ef | grep 문자열 조회 명령어12345678- 최신 변경 파일순 상세 조회$ ls -alrt- 하위 디렉토리까지 파일수 세기$ ls -lR | wc -l - 파일내 data 조회$ grep -l &quot;문자열&quot; * // 모든 파일에서 검색, *제일 많이 씀$ grep 문자열 파일명 // 특정 파일에서 문자열이 포함된 라인출력$ grep -c 문자열 파일명 // 특정 파일에서 문자열이 포함된 라인의 갯수 출력 IP/PORT 체크123456- Listen(점유) port 확인$ netstat -an | grep 8040- 방화벽 오픈여부 확인$ telnet ip port- 도메인의 IP 주소 확인$ nslookup 도메인명 스토리지 용량체크123456789101112- 디스크 잔여 용량(disk free)$ df -h // 사용자가 보기 쉬운 단위로&#123;KB, MB, GB&#125; 잔여량 표시, *제일 많이 씀$ df . // 현재 디렉토리가 포함된 파티션의 남은 공간을 보여준다.$ df -k // Kilobyte 단위로 현재 마운트된 파티션들의 남은 공간을 보여준다.$ df -F ufs -o i // inode 파일갯수 확인(100%차면 파일쓰기등 안됨)-디스크 현재 사용량(disk Usage)$ du -sh * // 현재 디렉토리 사용용량(하위폴더 포함), *제일 많이 씀$ du -h // 현재 디렉토리의 사용용량(사용자가 보기쉬운값으로)$ du -k // Kilobyte 사용용량 표시$ du -s * | awk &#x27;$1 &gt; 100000&#x27; // 특정용량 이상조회!&gt; 참고: https://ko.wikipedia.org/wiki/Du_(%EC%9C%A0%EB%8B%89%EC%8A%A4) 압축/해제123456789- 파일 압축$ tar -cvf 파일이름 압축할파일 혹은 /디렉토리- 파일 해제(압축풀기)$ tar -xvf 파일이름- jar 파일 리스트 보기$ jar -tvf jar파일명- jar 파일 압축 풀기$ jar -xvf jar파일명 Session 관리1234- 세션 타임아웃 변경echo $TMOUTexport TMOUT=18000 # 5시간echo $TMOUT 리눅스 변천사 사용버전은 크게 솔라리스와 레드헷, 개발자들은 우분투를 많이 씀 12345678 유닉스(커널) SunOS(커널) 솔라리스(배포판, 상용) 리눅스(커널) 리눅스(무료) 레드헷 (상용)우분투(무료) 페도라 센토스(무료) 이미지 출처: https://upload.wikimedia.org/wikipedia/commons/b/bc/Unix-like_history.svg","categories":[{"name":"Linux","slug":"linux","permalink":"https://jukyellow.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://jukyellow.github.io/tags/linux/"},{"name":"unix","slug":"unix","permalink":"https://jukyellow.github.io/tags/unix/"},{"name":"centos","slug":"centos","permalink":"https://jukyellow.github.io/tags/centos/"},{"name":"명령어","slug":"명령어","permalink":"https://jukyellow.github.io/tags/%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"name":"OS버전","slug":"os버전","permalink":"https://jukyellow.github.io/tags/os%EB%B2%84%EC%A0%84/"}]},{"title":"Hexo Bug Patch and Tuning","slug":"bug-patch-tuning","date":"2021-02-24T22:05:40.000Z","updated":"2021-03-12T21:48:02.266Z","comments":true,"path":"2021/02/25/bug-patch-tuning/","link":"","permalink":"https://jukyellow.github.io/2021/02/25/bug-patch-tuning/","excerpt":"","text":"개요 Hexo가 blog 설치/구동에 편하긴한데, 테마를 품질에 따라 튜닝요소가 많이 필요한듯 하다. beantech 테마를 사용중인데, 여기저기 문제가 많아서 소소히 고쳐가며 쓰고 있다. 발견된 문제점들(미해결 사항) google analytics 연동오류 : google의 애널리스틱 -&gt; 데이터 스트림방식으로 설정이 바뀐것에 대한 수정작업 필요한듯 방문자 count 문제 : tistory처럼 쉽게 설정할수 없음. 방문자 count 서비스를 찾아서 붙여야하는데, 잘 정리된 레퍼런스를 찾을수 없음 Total/today/yesterday 형태가 가장 보기 좋음 SNS settings에 medium 연결기능은 없음 : 이것도 기존꺼 참고해서 코딩가능한 부분인가? Blog 설정들 댓글기능 추가: Disqus(https://disqus.com/) 가입 및 Hexo 설정(_config.yml)12# Disqus settingsdisqus_username: yelran-s-tech-blog #jukyellow.github.io 방문자 count 추가: github hits로 갈음 구글 검색엔진 노출 설정: sitemap.xml 추가, robots.txt 추가 등(참고 : https://ivelee.github.io/github/how-to-expose-github-blog-google-search/) 해결된이슈 + 추가기능 (bug) deploy 0 byte (bug) side-bar widgets (기능추가) achive 배경화면 (기능추가) category 페이지 (기능추가) 썸네일 (기능추가) 방문자 count deploy 0 byte 문제: hexo beantech 테마 적용후, deploy 단계에서 파일 0 bytes 오류 발생 해결: hexo 3.9버전이 버전이여서 문제인가 싶어, hexo init으로 새 폴더 생성(hexo 5.3.0버전)+ theme 복제 side-bar widgets 문제: side-bar widgets 목록 설정불가 해결: forEach문 오류발생(sidebar widgets 목록을 찾을수 없음) theme/beantech/_config.yml에 widgets목록을 직접 기입해서 해결됨, deploy도 성공 achive 배경화면 문제: achive, category 페이지 배경화면 누락 해결: theme/beantech/layout/_partial/header.ejs 파일 수정 (is_category, is_archive 추가) 123456789101112header.intro-header&#123; &lt;% if (is_home() || is_category() || is_archive() ) &#123; %&gt; background-image: url(&#x27;&lt;%= config.root + config[&quot;header-img&quot;] %&gt;&#x27;) /*config*/ &lt;%&#125; else if (is_post())&#123;%&gt; background-image: url(&#x27;&lt;%= page[&quot;header-img&quot;] %&gt;&#x27;) /*post*/ &lt;%&#125; else &#123;%&gt; background-image: url(&#x27;&lt;%= config.root + page[&quot;header-img&quot;] %&gt;&#x27;) /*page*/ &lt;%&#125; %&gt;&#125; category 페이지 문제: category 이슈 페이지에 achive 목록으로 나오는 현상 해결: theme/beantech/layout/category.ejs 추가(archive.ejs 복사) category.ejs 수정(category 단위의 목록 출력 + 선택한 category는 최상위에 출력 코딩) 참고: https://github.com/wzpan/hexo-theme-freemind/blob/master/layout/categories.ejs 설명: page의 카테고리 id와 site 전체의 카테고리 정보를 비교해서 처리 p_category.data[0]._id == item._id source: https://github.com/jukyellow/hexo-blog/blob/main/themes/beantech/layout/category.ejs 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;% if (site.categories.length) &#123; %&gt;&lt;div class=&quot;archive&quot;&gt; &lt;% var p_category = null; page.posts.each(post=&gt;&#123; p_category = post.categories; &#125;) %&gt; &lt;% site.categories.sort(&#x27;name&#x27;).each(function(item)&#123; %&gt; &lt;% if(p_category.data[0]._id == item._id)&#123; %&gt; &lt;h4 class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= item.name %&gt;&quot; data-target=&quot;#modal-&lt;%= item.name %&gt;&quot;&gt; &lt;%= item.name %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/h4&gt; &lt;% &#125; %&gt; &lt;ul id=&quot;modal-&lt;%= item.name %&gt;&quot; class=&quot;collapse in&quot;&gt; &lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt; &lt;% if (it.categories.length == 1 &amp;&amp; it.categories.data[0]._id == item._id &amp;&amp; p_category.data[0]._id == item._id)&#123; %&gt; &lt;li class=&quot;listing-item&quot;&gt; &lt;%= it.date.format(&#x27;MM-DD&#x27;) %&gt; &lt;i class=&quot;fa fa-angle-double-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;a href=&quot;&lt;%= config.root %&gt;&lt;%= it.path %&gt;&quot; &lt;% if (it.description) &#123; %&gt; title=&quot;&lt;%= it.description %&gt;&quot; &lt;% &#125; %&gt;&gt;&lt;%= it.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;% &#125;); %&gt; &lt;/ul&gt; &lt;% &#125;); %&gt; &lt;hr align=&quot;left&quot; style=&quot;border: solid 1px gray; width: 55%;&quot;&gt; &lt;% site.categories.sort(&#x27;name&#x27;).each(function(item)&#123; %&gt; &lt;% if(p_category.data[0]._id != item._id)&#123; %&gt; &lt;h4 class=&quot;archive-ul show&quot; data-toggle=&quot;collapse&quot; id=&quot;&lt;%= item.name %&gt;&quot; data-target=&quot;#modal-&lt;%= item.name %&gt;&quot;&gt; &lt;%= item.name %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/h4&gt; &lt;% &#125; %&gt; &lt;ul id=&quot;modal-&lt;%= item.name %&gt;&quot; class=&quot;collapse in&quot;&gt; &lt;% site.posts.sort(&#x27;date&#x27;, -1).forEach(function(it)&#123; %&gt; &lt;% if (it.categories.length == 1 &amp;&amp; it.categories.data[0]._id == item._id &amp;&amp; p_category.data[0]._id != item._id)&#123; %&gt; &lt;li class=&quot;listing-item&quot;&gt; &lt;%= it.date.format(&#x27;MM-DD&#x27;) %&gt; &lt;i class=&quot;fa fa-angle-double-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;a href=&quot;&lt;%= config.root %&gt;&lt;%= it.path %&gt;&quot; &lt;% if (it.description) &#123; %&gt; title=&quot;&lt;%= it.description %&gt;&quot; &lt;% &#125; %&gt;&gt;&lt;%= it.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;% &#125;); %&gt; &lt;/ul&gt; &lt;% &#125;); %&gt; &lt;/ul&gt;&lt;/div&gt;&lt;% &#125; %&gt; 썸네일 설명 post 목록 썸네일 기능 추가 설치 : https://www.npmjs.com/package/hexo-featured-image _config.xml 체크사항: URL path 설정 썸네일 이미지 설정: 개별 post 페이지의 헤더에 ‘featured_image’ path 추가 1featured_image: ./images/01_init.png 캡쳐 post 목록(index.ejs) 튜닝 : 썸네일이 있을때는 div를 두개로(가로분할) 구성 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;% page.posts.each(function(post)&#123; %&gt; &lt;% if (!post.featured_image)&#123; %&gt; &lt;div class=&quot;post-preview&quot; style=&quot;float: left; width: 100%;&quot;&gt; &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot;&gt; &lt;h2 class=&quot;post-title&quot;&gt; &lt;%- post.title || &quot;Untitled&quot; %&gt; &lt;/h2&gt; &lt;h3 class=&quot;post-subtitle&quot;&gt; &lt;%- post.subtitle || &quot;&quot; %&gt; &lt;/h3&gt; &lt;div class=&quot;post-content-preview&quot;&gt; &lt;%- truncate(strip_html(post.content), &#123;length: 140, omission: &#x27;...&#x27;&#125;) %&gt;... &lt;/div&gt; &lt;/a&gt; &lt;% if (config.home_posts_tag)&#123;%&gt; &lt;p class=&quot;post-meta&quot; style=&quot;margin: 10px 0;&quot;&gt; Posted by &lt;%- post.author || config.author %&gt; on &lt;%= post.date.format(config.date_format) %&gt; &lt;/p&gt; &lt;div class=&quot;tags&quot;&gt; &lt;% post.tags.forEach(function(tag)&#123; %&gt; &lt;a href=&quot;&lt;%= config.root %&gt;tags/#&lt;%= tag.name %&gt;&quot; title=&quot;&lt;%= tag.name %&gt;&quot;&gt;&lt;%= tag.name %&gt;&lt;/a&gt; &lt;% &#125;) %&gt; &lt;/div&gt; &lt;%&#125; else &#123;%&gt; &lt;p class=&quot;post-meta&quot;&gt; Posted by &lt;%- post.author || config.author %&gt; on &lt;%= post.date.format(config.date_format) %&gt; &lt;/p&gt; &lt;%&#125;%&gt; &lt;/div&gt; &lt;% &#125;else&#123; %&gt; &lt;div class=&quot;post-preview&quot; style=&quot;float: left; width: 70%; padding:5px;&quot;&gt; &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot;&gt; &lt;h2 class=&quot;post-title&quot;&gt; &lt;%- post.title || &quot;Untitled&quot; %&gt; &lt;/h2&gt; &lt;h3 class=&quot;post-subtitle&quot;&gt; &lt;%- post.subtitle || &quot;&quot; %&gt; &lt;/h3&gt; &lt;div class=&quot;post-content-preview&quot;&gt; &lt;!-- &lt;%- truncate(strip_html(post.content), &#123;length: 100, omission: &#x27;...&#x27;&#125;) %&gt; --&gt; &lt;%- truncate(strip_html(post.content), &#123;length: 85, omission: &#x27;...&#x27;&#125;) %&gt; &lt;/div&gt; &lt;/a&gt; &lt;% if (config.home_posts_tag)&#123;%&gt; &lt;p class=&quot;post-meta&quot; style=&quot;margin: 10px 0;&quot;&gt; Posted by &lt;%- post.author || config.author %&gt; on &lt;%= post.date.format(config.date_format) %&gt; &lt;/p&gt; &lt;div class=&quot;tags&quot;&gt; &lt;% post.tags.forEach(function(tag)&#123; %&gt; &lt;a href=&quot;&lt;%= config.root %&gt;tags/#&lt;%= tag.name %&gt;&quot; title=&quot;&lt;%= tag.name %&gt;&quot;&gt;&lt;%= tag.name %&gt;&lt;/a&gt; &lt;% &#125;) %&gt; &lt;/div&gt; &lt;%&#125; else &#123;%&gt; &lt;p class=&quot;post-meta&quot;&gt; Posted by &lt;%- post.author || config.author %&gt; on &lt;%= post.date.format(config.date_format) %&gt; &lt;/p&gt; &lt;%&#125;%&gt; &lt;/div&gt; &lt;div class=&quot;post-preview&quot; style=&quot;float: left; width: 30%; padding:5px;&quot;&gt; &lt;% if (post.featured_image)&#123; %&gt; &lt;img src=&quot;&lt;%- post.featured_image %&gt;&quot;&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;hr&gt;&lt;% &#125;); %&gt; 방문자 count busuanzi_container : sidebar.ejs 123456&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; [ 조회수:&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; | 방문자수:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; ]&lt;/span&gt; github hits : footer.ejs 123&lt;a href=&quot;http://hits.dwyl.com/&#123;&#123; site.url | remove_first: &#x27;https://&#x27; | remove_first: &#x27;http://&#x27; &#125;&#125;&#123;&#123; page.url &#125;&#125;&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;http://hits.dwyl.com/&#123;&#123; site.url | remove_first: &#x27;https://&#x27; | remove_first: &#x27;http://&#x27; &#125;&#125;&#123;&#123; page.url &#125;&#125;.svg&quot; /&gt;&lt;/a&gt;","categories":[{"name":"Blog, PT","slug":"blog-pt","permalink":"https://jukyellow.github.io/categories/blog-pt/"},{"name":"Hexo","slug":"blog-pt/hexo","permalink":"https://jukyellow.github.io/categories/blog-pt/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jukyellow.github.io/tags/hexo/"},{"name":"hexo bug patch","slug":"hexo-bug-patch","permalink":"https://jukyellow.github.io/tags/hexo-bug-patch/"},{"name":"category.ejs","slug":"category-ejs","permalink":"https://jukyellow.github.io/tags/category-ejs/"}]},{"title":"Docker-Install-Root-Dir-Modify","slug":"docker-install-root-dir-modify","date":"2021-02-22T20:30:53.000Z","updated":"2021-03-12T21:58:27.290Z","comments":true,"path":"2021/02/23/docker-install-root-dir-modify/","link":"","permalink":"https://jukyellow.github.io/2021/02/23/docker-install-root-dir-modify/","excerpt":"","text":"설치환경 OS: CentOS 7.2 Docker: Docker Comunity 20.0.3? Docker (재)설치 도커가 이미 설치된 경우, 관련 파일/패키지를 삭제하고 재설치를 수행해야 한다. 컨테이너 종료, 이미지 삭제123docker stop $(docker ps -q)docker rm $(docker ps -a -q)docker rmi $(docker images -q) 서비스 중지12systemctl stop docker.servicesystemctl stop containerd.service 설치된 패키지 확인/삭제1234yum list installed | grep dockeryum erase containerd.io.x86_6yum erase docker-ce.x86_64yum erase docker-ce-cli.x86_64 디렉토리/파일 삭제123rm -rf /var/lib/dockercd /var/runrm docker.sock docker.pid 도커 재설치/확인12yum install -y docker-ceyum list installed | grep docker 도커 enable/start12345systemctl enable docker.servicesystemctl enable containerd.servicesystemctl start docker.servicesystemctl status docker.serviceservice status docker 참고 http://cloudrain21.com/remove-docker-forcely-and-reinstall Root Dir 변경 Docker 설치를 Root 계정으로 하는경우, Docker image 저장경로가 /var/lib/docker에 잡힘에 따라 Root 공간을 점유하게 된다. Root 공간은 OS 영역이므로 스토리지 관리에 문제(공간부족 등)가 되고, 보통은 별도의 디스크를 마운트하여 할당하는 것이 좋다. 설치 경로 확인:12cd /var/lib/dockerls -F 현재 dir-root 확인123docker info | grep &quot;Docker Root Dir&quot;docker volume inspect my-volsystemctl status docker.service 스크립트 파일변경123vi /usr/lib/systemd/system/docker.service( - ExecStart로 시작하는 라인 끝에 --data-root=/docker/root/dir 추가)ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --data-root=/home/docker 데이터 복사/재시작 Docker Root 디렉토리의 데이타 복사 또는 이동 및 Docker 서비스 재시작 12345systemctl daemon-reload systemctl stop dockermkdir /home/docker2cp -rp /var/lib/docker /home/ =&gt; 파일 복사systemctl start docker Root 변경확인123docker info | grep &quot;Docker Root Dir&quot;(Docker Root Dir: /home/docker =&gt; 변경된 root dir )docker volume inspect my-vol 실행권한 추가 root권한으로 설치된경우, user권한에 실행권한 추가 참고: https://github.com/occidere/TIL/issues/116 1sudo chmod 666 /var/run/docker.sock 참고 https://fliedcat.tistory.com/113","categories":[{"name":"MSA","slug":"msa","permalink":"https://jukyellow.github.io/categories/msa/"},{"name":"Docker","slug":"msa/docker","permalink":"https://jukyellow.github.io/categories/msa/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://jukyellow.github.io/tags/docker/"},{"name":"docker install","slug":"docker-install","permalink":"https://jukyellow.github.io/tags/docker-install/"},{"name":"Root Dir","slug":"root-dir","permalink":"https://jukyellow.github.io/tags/root-dir/"},{"name":"Centos","slug":"centos","permalink":"https://jukyellow.github.io/tags/centos/"},{"name":"MSA","slug":"msa","permalink":"https://jukyellow.github.io/tags/msa/"}]},{"title":"OCR-Tesseract-Demo","slug":"OCR-Tesseract-Demo","date":"2021-02-19T21:59:11.000Z","updated":"2021-03-11T22:24:41.560Z","comments":true,"path":"2021/02/20/OCR-Tesseract-Demo/","link":"","permalink":"https://jukyellow.github.io/2021/02/20/OCR-Tesseract-Demo/","excerpt":"","text":"현재 인터넷에 공개되 있는 ‘Tesseract 데모 페이지 구현 블로그’는 구 레파지토리(google) 버전이라 실행이 불가능하다. 하여 최신 레파지토리(github) 기준으로 동작가능한 데모 페이지로 오류를 수정하여 내용을 공개한다. 또한, 기존 블로그는 모바일 환경을 지원하지 않지만, 모바일에서 카메라 캡처-&gt;Text추출 가능한 소스로 업데이트 예정이다. 실행화면 초기화면 Text 추출 결과 tesseract 다운로드도커 이미지 다운로드 https://tesseract-ocr.github.io/ https://tesseract-ocr.github.io/tessdoc/ https://tesseract-ocr.github.io/tessdoc/4.0-Docker-Containers.html Tesseract 4 OCR Runtime Environment - Docker Container(레파지토리) https://github.com/tesseract-shadow/tesseract-ocr-re image 다운로드1docker pull tesseractshadow/tesseract4re . 샘플 테스트 (복사 &amp; 실행) test.sh 12docker cp ./ocr-files/phototest.tif t4re:/home/work/$TASK_TMP_DIR/docker exec -it t4re /bin/bash -c &quot;mkdir -p ./$TASK_TMP_DIR/out/; cd ./$TASK_TMP_DIR/out/; tesseract ../phototest.tif phototest -l eng --psm 1 --oem 3 txt pdf hocr&quot; 데모 페이지pytesseract 설치 및 Flask 웹서버 연동 출처: https://realpython.com/setting-up-a-simple-ocr-server/#web-server-time (source) https://github.com/ybur-yug/python_ocr_tutorial (tesseract 설치/구동까지는 1번참고, 해당 자료는 tesseract 구레파지토리를 사용하는 옛날버전인듯)pytesseract를 설치하는 부분은 1)번 + 별도 dockerfile로 구성 도커실행 5000: ocr tesseract flask port 12docker build -t ocr_tesseract_web .docker run --name ocr_tesseract_web --publish 5000:5000 -it ocr_tesseract_web dockerfile tesseractshadow/tesseract4re + Flask 웹서버 구동을 위해서 일부 오류수정 추가1234567891011121314151617181920212223242526# start with a base image# FROM ubuntu:14.04FROM tesseractshadow/tesseract4re## install dependenciesRUN apt-get updateRUN apt-get install -y liblog4cplus-devRUN apt-get install -y python python-pipRUN lsWORKDIR /RUN lsADD requirements.txt /RUN pip install -r requirements.txt# pil error : decoder jpeg not availableRUN pip uninstall Pillow -yRUN apt-get install -y libjpeg-devRUN pip install Pillow# update working directoriesADD ./flask_server /flask_serverWORKDIR /flask_server#EXPOSE 5000CMD [&quot;python&quot;, &quot;app.py&quot;] Flask app app.py 1234567891011121314151617181920212223242526@app.route(&#x27;/&#x27;)def main(): return render_template(&#x27;index.html&#x27;)@app.route(&#x27;/v&#123;&#125;/ocr&#x27;.format(_VERSION), methods=[&quot;POST&quot;])def ocr(): print(&#x27;--call ocr processing --&#x27;) try: if request.files.get(&quot;image&quot;): print(&#x27;--read image --&#x27;) # read the image in PIL format image = request.files[&quot;image&quot;].read() image = Image.open(io.BytesIO(image)) print(&#x27;RECV:&#x27;, image.format, image.size, image.mode) output = process_image2(image) print(&#x27;output:&#x27;, output) return jsonify(&#123;&quot;output&quot;: output&#125;) else: return jsonify(&#123;&quot;error&quot;: &quot;only .jpg files, please&quot;&#125;) except Exception as e: print(&#x27;ocr processing exception:&#x27; , e) print(traceback.format_exc()) return jsonify( &#123;&quot;error&quot;: str(e)&#125; ) javascript 123456789101112131415161718192021222324252627282930313233$(&#x27;#submit&#x27;).on(&#x27;click&#x27;, function(event)&#123; $(&quot;#results&quot;).hide() var data = new FormData(); if(is_mobile)&#123; var cFile = getCaptureImg(); data.append(&quot;image&quot;, cFile); &#125;else&#123; var file = $(&#x27;#file&#x27;)[0].files[0]; data.append(&quot;image&quot;, file); &#125; $.ajax(&#123; type: &quot;POST&quot;, url: &quot;/v1/ocr&quot;, enctype: &#x27;multipart/form-data&#x27;, data : data, processData: false, contentType: false, cache: false, timeout: 600000, success: function(result) &#123; console.log(result); $(&quot;#post-form&quot;).hide() $(&quot;#retry&quot;).show() $(&quot;#results&quot;).show() $(&quot;#results-data&quot;).html(&quot;&lt;div class=&#x27;well&#x27;&gt;&quot;+result[&quot;output&quot;]+&quot;&lt;/div&gt;&quot;); &#125;, error: function(error) &#123; console.log(error); &#125; &#125;);&#125;); Source 전체 source: https://github.com/jukyellow/artificial-intelligence-study/tree/master/13_ImageProcessing/OCR(Tesseract)/pytessract_dockerfike 참고: PC 크롬환경에서 테스트완료, 모바일 환경은 테스트 못함(소스는 모바일(아이폰) 환경도 가능한 모듈로 구성)","categories":[{"name":"AI","slug":"ai","permalink":"https://jukyellow.github.io/categories/ai/"},{"name":"OCR","slug":"ai/ocr","permalink":"https://jukyellow.github.io/categories/ai/ocr/"}],"tags":[{"name":"OCR","slug":"ocr","permalink":"https://jukyellow.github.io/tags/ocr/"},{"name":"Tesseract","slug":"tesseract","permalink":"https://jukyellow.github.io/tags/tesseract/"},{"name":"Docker","slug":"docker","permalink":"https://jukyellow.github.io/tags/docker/"},{"name":"Text추출","slug":"text추출","permalink":"https://jukyellow.github.io/tags/text%EC%B6%94%EC%B6%9C/"}]},{"title":"Face Check in 구현","slug":"Face-Check-In","date":"2021-02-19T03:42:22.000Z","updated":"2021-03-10T21:27:58.499Z","comments":true,"path":"2021/02/19/Face-Check-In/","link":"","permalink":"https://jukyellow.github.io/2021/02/19/Face-Check-In/","excerpt":"","text":"개요 안면인식 + 동작감지 = (비접촉) 출석체크 안면인식과 동작감지 기술을 이용하여 비 접촉 출석체크 시스템을 구현해보았다. 오픈소스의 대중화와 머신러닝 프레임워크의 발전, 그리고 AI 민주화시대를 앞당기는 기업들의 노력으로, 앞으로 이런 수준의 서비스들은 추가적인 연구없이 현재 공개되어 있는 기술들로 충분히 구현 가능하다. Teachable Machine(2.0) https://teachablemachine.withgoogle.com/ 일반인도 머신러닝 서비스를 만들수 있는 플랫폼을 제공(2019년/Google) 학습~배포(json/api) 관련 파생 서비스: 관상가양반(https://yourface.ga/) 단점: 세세한 튜닝(최적화) 불가능-&gt;안면인식 성능 낮음 안면인식 OpenSourceFaceApi Javascript 구현체(tensorflow.js + node.js) github : https://github.com/justadudewhohacks/face-api.js/ 다양한 기능(face-tracking, recognition…) 내장하고 있지만 속도가 느림 Facenet(2015년/Google) Facenet: Embedding(백만명 사진 학습&gt;특징 임베딩 벡터&gt;98~99%) 블로그: https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/ 논문: https://arxiv.org/abs/1503.03832 시스템 구성/파이프라인 시스템 구성 작업절차: 안면인식(keras)&gt;동작인식(Teach)&gt;두 모델 기능병합(HTML5,JS)&gt;배포(Docker/Flask) Face Model(안면인식)은 Google Colab환경에서 학습하였다. Facenet 모델의 Embedding 벡터와 지도학습 방법인 서포터벡터머신(SVC)을 사용하여 얼굴예측 모델을 구현하여, 구현체를 H5(Keras 모델), Pickle(Skit-Learn 모델) 파일 형태로 출력한다. Pose Model(동작감지)은 Google Teachable Machine을 사용하여 팔의 동작(O,X,캡쳐,대기)을 학습시키고, 모델을 Json형태로 출력하였다. 서버에 설치는 Docker(Container 가상화 기술)를 사용하여 환경을 구성하였다. Docker를 사용하면 OS환경(Windows/Linux등)과 상관없이 개발환경 그대로 배포환경으로 옮길 수 있다는 장점이 있다. 또한 필요한 Library를 시스템 설치 없이 다운로드후 구동방식으로 동작 시킬 수 있기 때문에 개발 생산성도 좋아진다. Docker를 빌드하기 위해서는 yml 파일이나 Dockerfile이 필요한데, 여기서는 Dockerfile을 사용하였고 Base 이미지로 Keras(Tensorflow)/Flask 이미지 서버를 구성한 뒤, ML(Machine Learning) 출력파일을 올려서 컨테이너를 구성하였다. 배포서버의 도메인이 Https(Nginx) 로 구성되어 있어서, 웹서버(Nginx) 뒤에 WAS서버 형태로 시스템을 붙여야 했다. Flask ML 서버를 port를 분리하여 구동 시키고 Nginx의 URI 라우팅(Location 설정)을 수정하여 구성하였다. Flask는 Python 웹 애플리케이션 서버 역할을 하면서 동시에 웹서버(html, js 배포) 역할을 할 수 있기때문에, Flask 서버에 Html/Javascript 소스도 배포하였다. 이렇게 해서 화면단의 요청을 ML서버가 직접 받도록 구성하여 CORS(Cross-Origin Resource Sharing) 및 Https/Http 혼용사용 문제도 해결하였다. 활용기술안면인식(FaceNet) 사진(150명) Agumentation &gt; Embedding(특징벡터) &gt; SVC(서포트벡터머신) &gt; 예측 Facenet 모델은 기존 사람의 얼굴 윤곽을 잡아서 학습시키는 랜드마크 방식과 다르게, 사람 얼굴의 특정정보를 Embedding이라는 기하학적 공간에 사상시켜 훈련한데에 있다. 유명인 백만명을 학습시켜 Anchor 본인과 같은 사람의 사진이면 Positive로 보고 유클리드 공간상의 거리를 좁히고, 다른 사람이면 Negative로 보고 거리를 멀게 하도록 학습시키는 방식으로 Embedding 벡터를 훈련시켰다. 이 모델의 Embedding벡터를 사람 얼굴 특징 벡터로 Pre-Training 벡터로 사용하여 새로운 얼굴들을 추가 학습시키는 방법으로 활용 가능하다. 학습 절차 머신러닝 학습을 위해서는 여러 장의 사진이 필요하기 때문에, 사진을 복제/변형하여 추가(20장)로 훈련 데이터를 확보한다. 이후 얼굴추출 Library를 이용하여 좌표에 해당하는 이미지를 Slice한다. 이후 오픈소스로 존재하는 Facenet Embedding 벡터를 통과시켜 얼굴 특징점을 수치화한 Vector를 추출한 뒤 본격적인 학습과정이 수행된다. 수치 데이터의 분포가 일정하게 정규화 한 뒤, 사람별로 Labeling 과정을 거치고 지도학습 모델중의 하나인 서포터벡터머신(SVC)으로 훈련시켰다.학습모델은 변경이 가능하고 딥러닝 모델을 사용하려면 사진 개수가 충분히 많아야 한다. 훈련Set 사진으로 학습시킨 뒤 테스트Set 사진으로 성능을 보면 99.8%로 거의 100%가깝게 나왔지만, 실제로 웹캠으로 시연을 해보면, 성능이 다소 떨어지는데 이는 사진이 현재 얼굴과 많이 다르거나, 웹캠의 해상도 조명등의 영향 때문인데 조명으로 인한 성능차이는 전처리 기능을 보강하여 추가 개선 가능하다. Embedding Feacture 추출소스(Facenet-&gt;predict)1234567def get_embedding(model, face_pixels): face_pixels = face_pixels.astype(&#x27;float32&#x27;) mean, std = face_pixels.mean(), face_pixels.std() face_pixels = (face_pixels - mean) / std samples = expand_dims(face_pixels, axis=0) yhat = model.predict(samples) # make prediction to get embedding return yhat[0] 동작감지(Teachable Machine) 구글 Teachable Machine은 이미지/사운드/동작 이 세가지 학습방식을 지원하고, 일반인도 충분히 머신러닝 훈련 및 배포까지 가능한 환경을 제공하는 플랫폼이다. 이를 이용하여 팔의 동작 (O,X,캡쳐-두팔,대기)을 학습시켰다. 해당 플랫폼을 활용하여 만든 서비스 사례 중 하나가 ‘관상가 양반’(https://yourface.ga/)이다.바야흐로 AI 민주화(democratization) 시대가 열리고 있다. 우리도 이제 발맞춰 민첩하게 대응하고 목표를 추진할 수 있는 인력양성이 필요한 시점인 것 같다. Docker(Flask Web/ML Server) docker base img: https://hub.docker.com/repository/docker/jukyellow/keras-flask-img base img 생성방법: https://github.com/jukyellow/artificial-intelligence-study/tree/master/11_Serving/keras-flask-img 레퍼런스 (Facenet + SVC 이미지 학습) https://machinelearningmastery.com/how-to-develop-a-face-recognition-system-using-facenet-in-keras-and-an-svm-classifier/ (Facenet Pre-Train model) https://www.microsoft.com/en-us/research/project/ms-celeb-1m-challenge-recognizing-one-million-celebrities-real-world/ (Jquery MultiPart-Form Ajax) https://mkyong.com/jquery/jquery-ajax-submit-a-multipart-form/ (Google Teachable Machine) https://teachablemachine.withgoogle.com/","categories":[{"name":"AI","slug":"ai","permalink":"https://jukyellow.github.io/categories/ai/"},{"name":"Image","slug":"ai/image","permalink":"https://jukyellow.github.io/categories/ai/image/"}],"tags":[{"name":"facenet","slug":"facenet","permalink":"https://jukyellow.github.io/tags/facenet/"},{"name":"google teachable machine","slug":"google-teachable-machine","permalink":"https://jukyellow.github.io/tags/google-teachable-machine/"},{"name":"face recognition","slug":"face-recognition","permalink":"https://jukyellow.github.io/tags/face-recognition/"},{"name":"docker","slug":"docker","permalink":"https://jukyellow.github.io/tags/docker/"}]},{"title":"Markdown 기반 Slide Show 'Marp' 사용법","slug":"marp-guide","date":"2021-01-31T00:45:44.000Z","updated":"2021-03-12T21:47:22.148Z","comments":true,"path":"2021/01/31/marp-guide/","link":"","permalink":"https://jukyellow.github.io/2021/01/31/marp-guide/","excerpt":"","text":"https://marp-slide-guide.netlify.app/","categories":[{"name":"Blog, PT","slug":"blog-pt","permalink":"https://jukyellow.github.io/categories/blog-pt/"},{"name":"Presentation","slug":"blog-pt/presentation","permalink":"https://jukyellow.github.io/categories/blog-pt/presentation/"}],"tags":[{"name":"marp","slug":"marp","permalink":"https://jukyellow.github.io/tags/marp/"},{"name":"markdown","slug":"markdown","permalink":"https://jukyellow.github.io/tags/markdown/"},{"name":"slide","slug":"slide","permalink":"https://jukyellow.github.io/tags/slide/"}]},{"title":"Hexo Blog 스킨 적용 및 Github 배포","slug":"hexo-install-guide-1","date":"2021-01-29T22:00:45.000Z","updated":"2021-03-12T21:48:06.523Z","comments":true,"path":"2021/01/30/hexo-install-guide-1/","link":"","permalink":"https://jukyellow.github.io/2021/01/30/hexo-install-guide-1/","excerpt":"","text":"1. git/npm windows 설치 git과 npm이 사전에 설치되어 있어야한다. 2. hexo (기본 가이드 한글로 번역됨) https://hexo.io/ko/docs/ 123npm install hexo-cli -g --savenpm install hexo-server --savenpm install hexo-deployer-git --save 3. 테마 repo clone https://github.com/YenYuHsuan/hexo-theme-beantech 4. 경로진입 cd hexo-beantech 5. node 패키지 설치1npm install 6. 실행 hexo serve localhost:4000 확인 7. category 기능 활성화: _config.yml &gt; widgets 부분 category 주석풀기 + post에 작성시 category 추가 8. 기초세팅 _config.yml 설정(https://github.com/YenYuHsuan/hexo-theme-beantech 따라하기) 9. post작성 및 배포1234hexo new post &quot;&lt;post name&gt;&quot; # you can change post to another layout if you wanthexo clean &amp;&amp; hexo generate # generate the static filehexo server # run hexo in local environmenthexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo! 10. 버그 패치 hexo beantech 테마 적용후, deploy 단계에서 파일 0 bytes 오류 발생 hexo 3.9버전이 버전이여서 문제인가 싶어, hexo init으로 새 폴더 생성(hexo 5.3.0버전)+ theme 복제 forEach문 오류발생(sidebar widgets 목록을 찾을수 없음) theme/beantech/_config.yml에 widgets목록을 직접 기입해서 해결됨, deploy도 성공 11. tag/category 입력123456tags:- Hexo- Blog# or tags: [&quot;A&quot;, &quot;B&quot;]catagories:- Hexo 12. 무료 이미지 다운로드 https://www.freepik.comhttps://pixabay.com/https://unsplash.com/","categories":[{"name":"Blog, PT","slug":"blog-pt","permalink":"https://jukyellow.github.io/categories/blog-pt/"},{"name":"Hexo","slug":"blog-pt/hexo","permalink":"https://jukyellow.github.io/categories/blog-pt/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jukyellow.github.io/tags/hexo/"},{"name":"hexo blog","slug":"hexo-blog","permalink":"https://jukyellow.github.io/tags/hexo-blog/"},{"name":"hexo install","slug":"hexo-install","permalink":"https://jukyellow.github.io/tags/hexo-install/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-01-28T21:45:44.000Z","updated":"2021-02-25T23:27:11.521Z","comments":true,"path":"2021/01/29/hello-world/","link":"","permalink":"https://jukyellow.github.io/2021/01/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"AI","slug":"ai","permalink":"https://jukyellow.github.io/categories/ai/"},{"name":"Kaggle","slug":"ai/kaggle","permalink":"https://jukyellow.github.io/categories/ai/kaggle/"},{"name":"Blog, PT","slug":"blog-pt","permalink":"https://jukyellow.github.io/categories/blog-pt/"},{"name":"Hexo","slug":"blog-pt/hexo","permalink":"https://jukyellow.github.io/categories/blog-pt/hexo/"},{"name":"Finance","slug":"ai/finance","permalink":"https://jukyellow.github.io/categories/ai/finance/"},{"name":"Linux","slug":"linux","permalink":"https://jukyellow.github.io/categories/linux/"},{"name":"MSA","slug":"msa","permalink":"https://jukyellow.github.io/categories/msa/"},{"name":"Docker","slug":"msa/docker","permalink":"https://jukyellow.github.io/categories/msa/docker/"},{"name":"OCR","slug":"ai/ocr","permalink":"https://jukyellow.github.io/categories/ai/ocr/"},{"name":"Image","slug":"ai/image","permalink":"https://jukyellow.github.io/categories/ai/image/"},{"name":"Presentation","slug":"blog-pt/presentation","permalink":"https://jukyellow.github.io/categories/blog-pt/presentation/"}],"tags":[{"name":"Kaggle","slug":"kaggle","permalink":"https://jukyellow.github.io/tags/kaggle/"},{"name":"캐글","slug":"캐글","permalink":"https://jukyellow.github.io/tags/%EC%BA%90%EA%B8%80/"},{"name":"kaggle notebook","slug":"kaggle-notebook","permalink":"https://jukyellow.github.io/tags/kaggle-notebook/"},{"name":"competition","slug":"competition","permalink":"https://jukyellow.github.io/tags/competition/"},{"name":"hexo","slug":"hexo","permalink":"https://jukyellow.github.io/tags/hexo/"},{"name":"category.ejs","slug":"category-ejs","permalink":"https://jukyellow.github.io/tags/category-ejs/"},{"name":"hexo category","slug":"hexo-category","permalink":"https://jukyellow.github.io/tags/hexo-category/"},{"name":"category group","slug":"category-group","permalink":"https://jukyellow.github.io/tags/category-group/"},{"name":"주식예측","slug":"주식예측","permalink":"https://jukyellow.github.io/tags/%EC%A3%BC%EC%8B%9D%EC%98%88%EC%B8%A1/"},{"name":"CNN","slug":"cnn","permalink":"https://jukyellow.github.io/tags/cnn/"},{"name":"Candle Chart","slug":"candle-chart","permalink":"https://jukyellow.github.io/tags/candle-chart/"},{"name":"Keras","slug":"keras","permalink":"https://jukyellow.github.io/tags/keras/"},{"name":"Conv2D","slug":"conv2d","permalink":"https://jukyellow.github.io/tags/conv2d/"},{"name":"Stock","slug":"stock","permalink":"https://jukyellow.github.io/tags/stock/"},{"name":"linux","slug":"linux","permalink":"https://jukyellow.github.io/tags/linux/"},{"name":"unix","slug":"unix","permalink":"https://jukyellow.github.io/tags/unix/"},{"name":"centos","slug":"centos","permalink":"https://jukyellow.github.io/tags/centos/"},{"name":"명령어","slug":"명령어","permalink":"https://jukyellow.github.io/tags/%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"name":"OS버전","slug":"os버전","permalink":"https://jukyellow.github.io/tags/os%EB%B2%84%EC%A0%84/"},{"name":"hexo bug patch","slug":"hexo-bug-patch","permalink":"https://jukyellow.github.io/tags/hexo-bug-patch/"},{"name":"docker","slug":"docker","permalink":"https://jukyellow.github.io/tags/docker/"},{"name":"docker install","slug":"docker-install","permalink":"https://jukyellow.github.io/tags/docker-install/"},{"name":"Root Dir","slug":"root-dir","permalink":"https://jukyellow.github.io/tags/root-dir/"},{"name":"Centos","slug":"centos","permalink":"https://jukyellow.github.io/tags/centos/"},{"name":"MSA","slug":"msa","permalink":"https://jukyellow.github.io/tags/msa/"},{"name":"OCR","slug":"ocr","permalink":"https://jukyellow.github.io/tags/ocr/"},{"name":"Tesseract","slug":"tesseract","permalink":"https://jukyellow.github.io/tags/tesseract/"},{"name":"Docker","slug":"docker","permalink":"https://jukyellow.github.io/tags/docker/"},{"name":"Text추출","slug":"text추출","permalink":"https://jukyellow.github.io/tags/text%EC%B6%94%EC%B6%9C/"},{"name":"facenet","slug":"facenet","permalink":"https://jukyellow.github.io/tags/facenet/"},{"name":"google teachable machine","slug":"google-teachable-machine","permalink":"https://jukyellow.github.io/tags/google-teachable-machine/"},{"name":"face recognition","slug":"face-recognition","permalink":"https://jukyellow.github.io/tags/face-recognition/"},{"name":"marp","slug":"marp","permalink":"https://jukyellow.github.io/tags/marp/"},{"name":"markdown","slug":"markdown","permalink":"https://jukyellow.github.io/tags/markdown/"},{"name":"slide","slug":"slide","permalink":"https://jukyellow.github.io/tags/slide/"},{"name":"hexo blog","slug":"hexo-blog","permalink":"https://jukyellow.github.io/tags/hexo-blog/"},{"name":"hexo install","slug":"hexo-install","permalink":"https://jukyellow.github.io/tags/hexo-install/"}]}